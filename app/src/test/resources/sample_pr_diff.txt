diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinConverter.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinConverter.kt
index 12e374a0955..6bdc78d3c02 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinConverter.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinConverter.kt
@@ -6,13 +6,24 @@
 package org.jetbrains.uast.kotlin

 import com.intellij.openapi.components.ServiceManager
+import com.intellij.psi.PsiComment
 import com.intellij.psi.PsiElement
-import org.jetbrains.kotlin.asJava.elements.KtLightParameterList
+import com.intellij.psi.PsiEnumConstant
+import com.intellij.psi.PsiParameterList
+import com.intellij.psi.impl.source.tree.LeafPsiElement
+import org.jetbrains.kotlin.asJava.LightClassUtil
+import org.jetbrains.kotlin.asJava.elements.KtLightElementBase
+import org.jetbrains.kotlin.asJava.elements.KtLightField
+import org.jetbrains.kotlin.asJava.toLightClass
 import org.jetbrains.kotlin.kdoc.psi.impl.KDocLink
+import org.jetbrains.kotlin.kdoc.psi.impl.KDocName
 import org.jetbrains.kotlin.kdoc.psi.impl.KDocSection
 import org.jetbrains.kotlin.kdoc.psi.impl.KDocTag
+import org.jetbrains.kotlin.lexer.KtTokens
 import org.jetbrains.kotlin.psi.*
+import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
 import org.jetbrains.uast.*
+import org.jetbrains.uast.kotlin.psi.UastKotlinPsiParameter
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiVariable

 interface BaseKotlinConverter {
@@ -22,7 +33,7 @@ interface BaseKotlinConverter {
         is KtDeclarationModifierList -> unwrapElements(element.parent)
         is KtContainerNode -> unwrapElements(element.parent)
         is KtSimpleNameStringTemplateEntry -> unwrapElements(element.parent)
-        is KtLightParameterList -> unwrapElements(element.parent)
+        is PsiParameterList -> unwrapElements(element.parent)
         is KtTypeElement -> unwrapElements(element.parent)
         is KtSuperTypeList -> unwrapElements(element.parent)
         is KtFinallySection -> unwrapElements(element.parent)
@@ -37,7 +48,9 @@ interface BaseKotlinConverter {
     fun convertAnnotation(
         annotationEntry: KtAnnotationEntry,
         givenParent: UElement?
-    ): UAnnotation
+    ): UAnnotation {
+        return KotlinUAnnotation(annotationEntry, givenParent)
+    }

     fun convertDeclaration(
         element: PsiElement,
@@ -45,19 +58,84 @@ interface BaseKotlinConverter {
         requiredTypes: Array<out Class<out UElement>>
     ): UElement?

+    fun convertDeclarationOrElement(
+        element: PsiElement,
+        givenParent: UElement?,
+        expectedTypes: Array<out Class<out UElement>>
+    ): UElement? {
+        return if (element is UElement) element
+        else convertDeclaration(element, givenParent, expectedTypes)
+            ?: convertPsiElement(element, givenParent, expectedTypes)
+    }
+
+    fun convertClassOrObject(
+        element: KtClassOrObject,
+        givenParent: UElement?,
+        requiredTypes: Array<out Class<out UElement>>
+    ): Sequence<UElement> {
+        val ktLightClass = element.toLightClass() ?: return emptySequence()
+        val uClass = KotlinUClass.create(ktLightClass, givenParent)
+        return requiredTypes.accommodate(
+            // Class
+            alternative { uClass },
+            // Object
+            alternative primaryConstructor@{
+                val primaryConstructor = element.primaryConstructor ?: return@primaryConstructor null
+                uClass.methods.asSequence()
+                    .filter { it.sourcePsi == primaryConstructor }
+                    .firstOrNull()
+            }
+        )
+    }
+
+    fun convertToPropertyAlternatives(
+        methods: LightClassUtil.PropertyAccessorsPsiMethods?,
+        givenParent: UElement?
+    ): Array<UElementAlternative<*>> {
+        return if (methods != null)
+            arrayOf(
+                alternative { methods.backingField?.let { KotlinUField(it, getKotlinMemberOrigin(it), givenParent) } },
+                alternative { methods.getter?.let { convertDeclaration(it, givenParent, arrayOf(UMethod::class.java)) as? UMethod } },
+                alternative { methods.setter?.let { convertDeclaration(it, givenParent, arrayOf(UMethod::class.java)) as? UMethod } }
+            )
+        else emptyArray()
+    }
+
+    fun convertNonLocalProperty(
+        property: KtProperty,
+        givenParent: UElement?,
+        requiredTypes: Array<out Class<out UElement>>
+    ): Sequence<UElement> {
+        return requiredTypes.accommodate(
+            *convertToPropertyAlternatives(LightClassUtil.getLightClassPropertyMethods(property), givenParent)
+        )
+    }
+
+    fun convertEnumEntry(original: KtEnumEntry, givenParent: UElement?): UElement? {
+        return LightClassUtil.getLightClassBackingField(original)?.let { psiField ->
+            if (psiField is KtLightField && psiField is PsiEnumConstant) {
+                KotlinUEnumConstant(psiField, psiField.kotlinOrigin, givenParent)
+            } else {
+                null
+            }
+        }
+    }
+
     fun convertReceiverParameter(receiver: KtTypeReference): UParameter? {
         val call = (receiver.parent as? KtCallableDeclaration) ?: return null
         if (call.receiverTypeReference != receiver) return null
         return call.toUElementOfType<UMethod>()?.uastParameters?.firstOrNull()
     }

+    fun forceUInjectionHost(): Boolean
+
     fun convertExpression(
         expression: KtExpression,
         givenParent: UElement?,
         requiredTypes: Array<out Class<out UElement>>
     ): UExpression?

-    fun convertEntry(
+    fun convertStringTemplateEntry(
         entry: KtStringTemplateEntry,
         givenParent: UElement?,
         requiredTypes: Array<out Class<out UElement>>
@@ -140,12 +218,127 @@ interface BaseKotlinConverter {
         }
     }

-
     fun convertPsiElement(
         element: PsiElement?,
         givenParent: UElement?,
         requiredTypes: Array<out Class<out UElement>>
-    ): UElement?
+    ): UElement? {
+        if (element == null) return null
+
+        fun <P : PsiElement> build(ctor: (P, UElement?) -> UElement): () -> UElement? = {
+            @Suppress("UNCHECKED_CAST")
+            ctor(element as P, givenParent)
+        }
+
+        return with(requiredTypes) {
+            when (element) {
+                is KtParameterList -> {
+                    el<UDeclarationsExpression> {
+                        val declarationsExpression = KotlinUDeclarationsExpression(null, givenParent, null)
+                        declarationsExpression.apply {
+                            declarations = element.parameters.mapIndexed { i, p ->
+                                KotlinUParameter(UastKotlinPsiParameter.create(p, element, declarationsExpression, i), p, this)
+                            }
+                        }
+                    }
+                }
+                is KtClassBody -> {
+                    el<UExpressionList>(build(KotlinUExpressionList.Companion::createClassBody))
+                }
+                is KtCatchClause -> {
+                    el<UCatchClause>(build(::KotlinUCatchClause))
+                }
+                is KtVariableDeclaration -> {
+                    if (element is KtProperty && !element.isLocal) {
+                        convertNonLocalProperty(element, givenParent, this).firstOrNull()
+                    } else {
+                        el<UVariable> { convertVariablesDeclaration(element, givenParent).declarations.singleOrNull() }
+                            ?: expr<UDeclarationsExpression> { convertExpression(element, givenParent, requiredTypes) }
+                    }
+                }
+                is KtExpression -> {
+                    convertExpression(element, givenParent, requiredTypes)
+                }
+                is KtLambdaArgument -> {
+                    element.getLambdaExpression()?.let { convertExpression(it, givenParent, requiredTypes) }
+                }
+                is KtLightElementBase -> {
+                    when (val expression = element.kotlinOrigin) {
+                        is KtExpression -> convertExpression(expression, givenParent, requiredTypes)
+                        else -> el<UExpression> { UastEmptyExpression(givenParent) }
+                    }
+                }
+                is KtLiteralStringTemplateEntry, is KtEscapeStringTemplateEntry -> {
+                    el<ULiteralExpression>(build(::KotlinStringULiteralExpression))
+                }
+                is KtStringTemplateEntry -> {
+                    element.expression?.let { convertExpression(it, givenParent, requiredTypes) }
+                        ?: expr<UExpression> { UastEmptyExpression(givenParent) }
+                }
+                is KtWhenEntry -> {
+                    el<USwitchClauseExpressionWithBody>(build(::KotlinUSwitchEntry))
+                }
+                is KtWhenCondition -> {
+                    convertWhenCondition(element, givenParent, requiredTypes)
+                }
+                is KtTypeReference -> {
+                    requiredTypes.accommodate(
+                        alternative { KotlinUTypeReferenceExpression(element, givenParent) },
+                        alternative { convertReceiverParameter(element) }
+                    ).firstOrNull()
+                }
+                is KtConstructorDelegationCall -> {
+                    el<UCallExpression> { KotlinUFunctionCallExpression(element, givenParent) }
+                }
+                is KtSuperTypeCallEntry -> {
+                    el<UExpression> {
+                        (element.getParentOfType<KtClassOrObject>(true)?.parent as? KtObjectLiteralExpression)
+                            ?.toUElementOfType<UExpression>()
+                            ?: KotlinUFunctionCallExpression(element, givenParent)
+                    }
+                }
+                is KtImportDirective -> {
+                    el<UImportStatement>(build(::KotlinUImportStatement))
+                }
+                is PsiComment -> {
+                    el<UComment>(build(::UComment))
+                }
+                is KDocName -> {
+                    if (element.getQualifier() == null)
+                        el<USimpleNameReferenceExpression> {
+                            element.lastChild?.let { psiIdentifier ->
+                                KotlinStringUSimpleReferenceExpression(psiIdentifier.text, givenParent, element, element)
+                            }
+                        }
+                    else el<UQualifiedReferenceExpression>(build(::KotlinDocUQualifiedReferenceExpression))
+                }
+                is LeafPsiElement -> {
+                    when {
+                        element.elementType in identifiersTokens -> {
+                            if (element.elementType != KtTokens.OBJECT_KEYWORD ||
+                                element.getParentOfType<KtObjectDeclaration>(false)?.nameIdentifier == null
+                            )
+                                el<UIdentifier>(build(::KotlinUIdentifier))
+                            else null
+                        }
+                        element.elementType in KtTokens.OPERATIONS && element.parent is KtOperationReferenceExpression -> {
+                            el<UIdentifier>(build(::KotlinUIdentifier))
+                        }
+                        element.elementType == KtTokens.LBRACKET && element.parent is KtCollectionLiteralExpression -> {
+                            el<UIdentifier> {
+                                UIdentifier(
+                                    element,
+                                    KotlinUCollectionLiteralExpression(element.parent as KtCollectionLiteralExpression, null)
+                                )
+                            }
+                        }
+                        else -> null
+                    }
+                }
+                else -> null
+            }
+        }
+    }

     fun convertOrEmpty(expression: KtExpression?, parent: UElement?): UExpression {
         return expression?.let { convertExpression(it, parent, DEFAULT_EXPRESSION_TYPES_LIST) } ?: UastEmptyExpression(parent)
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinUastResolveProviderService.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinUastResolveProviderService.kt
index c4a5237ceaf..99affd6df07 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinUastResolveProviderService.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/BaseKotlinUastResolveProviderService.kt
@@ -5,28 +5,38 @@

 package org.jetbrains.uast.kotlin

+import com.intellij.psi.PsiClass
 import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiMethod
 import com.intellij.psi.PsiType
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.types.typeUtil.TypeNullability
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
+import org.jetbrains.uast.*

 interface BaseKotlinUastResolveProviderService {
     fun isJvmElement(psiElement: PsiElement): Boolean

+    val languagePlugin: UastLanguagePlugin
+
     // ----------
     // Conversion
     // ----------

     val baseKotlinConverter: BaseKotlinConverter

-    fun convertParent(uElement: UElement): UElement?
+    fun convertParent(uElement: UElement): UElement? {
+        return convertParentImpl(this, uElement)
+    }

-    fun convertParent(uElement: UElement, parent: PsiElement?): UElement?
+    fun convertParent(uElement: UElement, parent: PsiElement?): UElement? {
+        return convertParentImpl(this, uElement, parent)
+    }

-    fun getReferenceVariants(ktExpression: KtExpression, nameHint: String): Sequence<PsiElement>
+    fun convertValueArguments(ktCallElement: KtCallElement, parent: UElement): List<UNamedExpression>?
+
+    fun findAttributeValueExpression(uAnnotation: KotlinUAnnotation, arg: ValueArgument): UExpression?
+
+    fun findDefaultValueForAnnotationAttribute(ktCallElement: KtCallElement, name: String): KtExpression?

     fun getArgumentForParameter(ktCallElement: KtCallElement, index: Int, parent: UElement): UExpression?

@@ -38,8 +48,24 @@ interface BaseKotlinUastResolveProviderService {
     // Resolution
     // ----------

+    fun getReferenceVariants(ktExpression: KtExpression, nameHint: String): Sequence<PsiElement>
+
     fun resolveCall(ktElement: KtElement): PsiMethod?

+    fun isResolvedToExtension(ktCallElement: KtCallElement): Boolean
+
+    fun resolvedFunctionName(ktCallElement: KtCallElement): String?
+
+    fun qualifiedAnnotationName(ktCallElement: KtCallElement): String?
+
+    fun callKind(ktCallElement: KtCallElement): UastCallKind
+
+    fun isAnnotationConstructorCall(ktCallElement: KtCallElement): Boolean
+
+    fun resolveToClassIfConstructorCall(ktCallElement: KtCallElement, source: UElement): PsiClass?
+
+    fun resolveToClass(ktAnnotationEntry: KtAnnotationEntry): PsiClass?
+
     fun resolveToDeclaration(ktExpression: KtExpression): PsiElement?

     fun resolveToType(ktTypeReference: KtTypeReference, source: UElement): PsiType?
@@ -48,6 +74,8 @@ interface BaseKotlinUastResolveProviderService {
     // Types
     // ----------

+    fun getReceiverType(ktCallElement: KtCallElement, source: UElement): PsiType?
+
     fun getDoubleColonReceiverType(ktDoubleColonExpression: KtDoubleColonExpression, source: UElement): PsiType?

     fun getCommonSupertype(left: KtExpression, right: KtExpression, uExpression: UExpression): PsiType?
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinConstructorUMethod.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinConstructorUMethod.kt
similarity index 86%
rename from uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinConstructorUMethod.kt
rename to uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinConstructorUMethod.kt
index 68a5bb25f15..8662c1d0a44 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinConstructorUMethod.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinConstructorUMethod.kt
@@ -6,6 +6,7 @@
 package org.jetbrains.uast.kotlin

 import com.intellij.psi.PsiMethod
+import org.jetbrains.kotlin.asJava.elements.KtLightMethod
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.utils.SmartList
 import org.jetbrains.kotlin.utils.addToStdlib.firstIsInstanceOrNull
@@ -13,12 +14,18 @@ import org.jetbrains.uast.UElement
 import org.jetbrains.uast.UExpression
 import org.jetbrains.uast.UIdentifier

-abstract class BaseKotlinConstructorUMethod(
+open class KotlinConstructorUMethod(
     private val ktClass: KtClassOrObject?,
     override val psi: PsiMethod,
     kotlinOrigin: KtDeclaration?,
     givenParent: UElement?
-) : BaseKotlinUMethod(psi, kotlinOrigin, givenParent) {
+) : KotlinUMethod(psi, kotlinOrigin, givenParent) {
+
+    constructor(
+        ktClass: KtClassOrObject?,
+        psi: KtLightMethod,
+        givenParent: UElement?
+    ) : this(ktClass, psi, psi.kotlinOrigin, givenParent)

     override val javaPsi = psi

@@ -38,7 +45,7 @@ abstract class BaseKotlinConstructorUMethod(
         KotlinLazyUBlockExpression(this) { uastParent ->
             SmartList<UExpression>().apply {
                 delegationCall?.let {
-                    add(buildDelegationCall(it, uastParent))
+                    add(KotlinUFunctionCallExpression(it, uastParent))
                 }
                 bodyExpressions.forEach {
                     add(baseResolveProviderService.baseKotlinConverter.convertOrEmpty(it, uastParent))
@@ -47,8 +54,6 @@ abstract class BaseKotlinConstructorUMethod(
         }
     }

-    abstract fun buildDelegationCall(delegationCall: KtCallElement, uastParent: UElement): UExpression
-
     override val uastAnchor: UIdentifier? by lz {
         KotlinUIdentifier(
             javaPsi.nameIdentifier,
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinScriptUClass.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinScriptUClass.kt
new file mode 100644
index 00000000000..32cdd27d397
--- /dev/null
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinScriptUClass.kt
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+package org.jetbrains.uast.kotlin
+
+import com.intellij.psi.*
+import org.jetbrains.kotlin.asJava.classes.KtLightClassForScript
+import org.jetbrains.kotlin.asJava.elements.KtLightMethod
+import org.jetbrains.kotlin.psi.KtClassOrObject
+import org.jetbrains.kotlin.psi.KtScript
+import org.jetbrains.kotlin.psi.KtScriptInitializer
+import org.jetbrains.uast.*
+
+class KotlinScriptUClass(
+    psi: KtLightClassForScript,
+    givenParent: UElement?
+) : AbstractKotlinUClass(givenParent), PsiClass by psi {
+    override fun getContainingFile(): PsiFile = unwrapFakeFileForLightClass(psi.containingFile)
+
+    override fun getNameIdentifier(): PsiIdentifier = UastLightIdentifier(psi, psi.kotlinOrigin)
+
+    override val uastAnchor by lazy { KotlinUIdentifier(nameIdentifier, sourcePsi?.nameIdentifier, this) }
+
+    override val javaPsi: PsiClass = psi
+
+    override val sourcePsi: KtClassOrObject? = psi.kotlinOrigin
+
+    override val psi = unwrap<UClass, KtLightClassForScript>(psi)
+
+    override fun getSuperClass(): UClass? = super.getSuperClass()
+
+    override fun getFields(): Array<UField> = super.getFields()
+
+    override fun getInitializers(): Array<UClassInitializer> = super.getInitializers()
+
+    override fun getInnerClasses(): Array<UClass> =
+        psi.innerClasses.mapNotNull { getLanguagePlugin().convertOpt<UClass>(it, this) }.toTypedArray()
+
+    override fun getMethods(): Array<UMethod> = psi.methods.map(this::createUMethod).toTypedArray()
+
+    private fun createUMethod(method: PsiMethod): UMethod {
+        return if (method.isConstructor) {
+            KotlinScriptConstructorUMethod(psi.script, method as KtLightMethod, this)
+        }
+        else {
+            languagePlugin?.convertOpt(method, this) ?: reportConvertFailure(method)
+        }
+    }
+
+    override fun getOriginalElement(): PsiElement? = psi.originalElement
+
+    class KotlinScriptConstructorUMethod(
+        script: KtScript,
+        override val psi: KtLightMethod,
+        givenParent: UElement?
+    ) : KotlinUMethod(psi, psi.kotlinOrigin, givenParent) {
+        override val uastBody: UExpression? by lz {
+            val initializers = script.declarations.filterIsInstance<KtScriptInitializer>()
+            KotlinLazyUBlockExpression.create(initializers, this)
+        }
+        override val javaPsi = psi
+    }
+}
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinSecondaryConstructorWithInitializersUMethod.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinSecondaryConstructorWithInitializersUMethod.kt
similarity index 85%
rename from uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinSecondaryConstructorWithInitializersUMethod.kt
rename to uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinSecondaryConstructorWithInitializersUMethod.kt
index af36dd02b6f..eaf0cf1b397 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinSecondaryConstructorWithInitializersUMethod.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinSecondaryConstructorWithInitializersUMethod.kt
@@ -13,11 +13,11 @@ import org.jetbrains.uast.UElement
 // This class was created as a workaround for KT-21617 to be the only constructor which includes `init` block
 // when there is no primary constructors in the class.
 // It is expected to have only one constructor of this type in a UClass.
-abstract class BaseKotlinSecondaryConstructorWithInitializersUMethod(
+class KotlinSecondaryConstructorWithInitializersUMethod(
     ktClass: KtClassOrObject?,
     psi: KtLightMethod,
     givenParent: UElement?
-) : BaseKotlinConstructorUMethod(ktClass, psi, psi.kotlinOrigin, givenParent) {
+) : KotlinConstructorUMethod(ktClass, psi, psi.kotlinOrigin, givenParent) {

     override fun getBodyExpressions(): List<KtExpression> {
         return getInitializers() + super.getBodyExpressions()
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotation.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotation.kt
new file mode 100644
index 00000000000..30cbfa83b87
--- /dev/null
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotation.kt
@@ -0,0 +1,135 @@
+/*
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+/*
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+package org.jetbrains.uast.kotlin
+
+import com.intellij.openapi.components.ServiceManager
+import com.intellij.psi.PsiAnnotation
+import com.intellij.psi.PsiClass
+import com.intellij.psi.PsiElement
+import com.intellij.psi.ResolveResult
+import org.jetbrains.kotlin.asJava.toLightAnnotation
+import org.jetbrains.kotlin.descriptors.annotations.AnnotationUseSiteTarget
+import org.jetbrains.kotlin.psi.*
+import org.jetbrains.kotlin.utils.addToStdlib.firstIsInstanceOrNull
+import org.jetbrains.kotlin.utils.addToStdlib.safeAs
+import org.jetbrains.uast.*
+import org.jetbrains.uast.kotlin.internal.multiResolveResults
+
+sealed class KotlinUAnnotationBase<T : KtCallElement>(
+    final override val sourcePsi: T,
+    givenParent: UElement?
+) : KotlinAbstractUElement(givenParent), UAnnotationEx, UAnchorOwner, UMultiResolvable {
+
+    abstract override val javaPsi: PsiAnnotation?
+
+    final override val psi: PsiElement = sourcePsi
+
+    protected abstract fun annotationUseSiteTarget(): AnnotationUseSiteTarget?
+
+    override val qualifiedName: String? by lz {
+        baseResolveProviderService.qualifiedAnnotationName(sourcePsi)
+    }
+
+    override val attributeValues: List<UNamedExpression> by lz {
+        baseResolveProviderService.convertValueArguments(sourcePsi, this) ?: emptyList()
+    }
+
+    override fun findAttributeValue(name: String?): UExpression? =
+        findDeclaredAttributeValue(name) ?: findAttributeDefaultValue(name ?: "value")
+
+    override fun findDeclaredAttributeValue(name: String?): UExpression? {
+        return attributeValues.find {
+            it.name == name ||
+                    (name == null && it.name == "value") ||
+                    (name == "value" && it.name == null)
+        }?.expression
+    }
+
+    private fun findAttributeDefaultValue(name: String): UExpression? {
+        return baseResolveProviderService.findDefaultValueForAnnotationAttribute(sourcePsi, name)?.let {
+            languagePlugin?.convertWithParent(it)
+        }
+    }
+
+    override fun convertParent(): UElement? {
+        sourcePsi.parent.safeAs<KtAnnotatedExpression>()?.let { annotatedExpression ->
+            return annotatedExpression.baseExpression?.let {
+                baseResolveProviderService.baseKotlinConverter.convertExpression(it, null, DEFAULT_EXPRESSION_TYPES_LIST)
+            }
+        }
+
+        val superParent = super.convertParent() ?: return null
+        if (annotationUseSiteTarget() == AnnotationUseSiteTarget.RECEIVER) {
+            (superParent.uastParent as? KotlinUMethod)?.uastParameters?.firstIsInstanceOrNull<KotlinReceiverUParameter>()?.let {
+                return it
+            }
+        }
+        return superParent
+    }
+
+    override fun multiResolve(): Iterable<ResolveResult> = sourcePsi.multiResolveResults().asIterable()
+}
+
+class KotlinUAnnotation(
+    annotationEntry: KtAnnotationEntry,
+    givenParent: UElement?
+) : KotlinUAnnotationBase<KtAnnotationEntry>(annotationEntry, givenParent), UAnnotation {
+
+    override val javaPsi = annotationEntry.toLightAnnotation()
+
+    override fun annotationUseSiteTarget() = sourcePsi.useSiteTarget?.getAnnotationUseSiteTarget()
+
+    override fun resolve(): PsiClass? {
+        return baseResolveProviderService.resolveToClass(sourcePsi)
+    }
+
+    override val uastAnchor by lz {
+        KotlinUIdentifier(
+            javaPsi?.nameReferenceElement,
+            annotationEntry.typeReference?.nameElement,
+            this
+        )
+    }
+
+}
+
+class KotlinUNestedAnnotation private constructor(
+    original: KtCallExpression,
+    givenParent: UElement?
+) : KotlinUAnnotationBase<KtCallExpression>(original, givenParent) {
+
+    override val javaPsi: PsiAnnotation? by lz { original.toLightAnnotation() }
+
+    override fun annotationUseSiteTarget(): AnnotationUseSiteTarget? = null
+
+    override fun resolve(): PsiClass? {
+        return baseResolveProviderService.resolveToClassIfConstructorCall(sourcePsi, this)
+    }
+
+    override val uastAnchor by lz {
+        KotlinUIdentifier(
+            javaPsi?.nameReferenceElement?.referenceNameElement,
+            (original.calleeExpression as? KtNameReferenceExpression)?.getReferencedNameElement(),
+            this
+        )
+    }
+
+    companion object {
+        fun create(ktCallExpression: KtCallExpression, givenParent: UElement?): KotlinUNestedAnnotation? {
+            val service = ServiceManager.getService(BaseKotlinUastResolveProviderService::class.java)
+            return if (service.isAnnotationConstructorCall(ktCallExpression))
+                KotlinUNestedAnnotation(ktCallExpression, givenParent)
+            else
+                null
+        }
+    }
+
+}
+
+
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotationMethod.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotationMethod.kt
index 4c8786a43ff..719142b2202 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotationMethod.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotationMethod.kt
@@ -12,7 +12,7 @@ import org.jetbrains.uast.*
 class KotlinUAnnotationMethod(
     psi: KtLightMethod,
     givenParent: UElement?
-) : BaseKotlinUMethod(psi, psi.kotlinOrigin, givenParent), UAnnotationMethod {
+) : KotlinUMethod(psi, psi.kotlinOrigin, givenParent), UAnnotationMethod {
     override val psi: KtLightMethod = unwrap<UMethod, KtLightMethod>(psi)

     override val uastDefaultValue: UExpression? by lz {
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinUClass.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUClass.kt
similarity index 81%
rename from uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinUClass.kt
rename to uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUClass.kt
index 5d3b9f30728..16509756c25 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinUClass.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUClass.kt
@@ -8,6 +8,7 @@ package org.jetbrains.uast.kotlin
 import com.intellij.psi.*
 import org.jetbrains.kotlin.asJava.classes.KtLightClass
 import org.jetbrains.kotlin.asJava.classes.KtLightClassForFacade
+import org.jetbrains.kotlin.asJava.classes.KtLightClassForScript
 import org.jetbrains.kotlin.asJava.elements.KtLightMethod
 import org.jetbrains.kotlin.load.java.JvmAbi
 import org.jetbrains.kotlin.psi.KtClassOrObject
@@ -16,11 +17,11 @@ import org.jetbrains.kotlin.psi.KtObjectDeclaration
 import org.jetbrains.kotlin.utils.addIfNotNull
 import org.jetbrains.uast.*

-abstract class BaseKotlinUClass(
+class KotlinUClass(
     psi: KtLightClass,
     givenParent: UElement?
 ) : AbstractKotlinUClass(givenParent), PsiClass by psi {
-    final override val ktClass = psi.kotlinOrigin
+    override val ktClass = psi.kotlinOrigin

     override val javaPsi: KtLightClass = psi

@@ -32,9 +33,9 @@ abstract class BaseKotlinUClass(

     override fun getOriginalElement(): PsiElement? = super.getOriginalElement()

-    override fun getNameIdentifier(): PsiIdentifier? = UastLightIdentifier(psi, ktClass)
+    override fun getNameIdentifier(): PsiIdentifier = UastLightIdentifier(psi, ktClass)

-    override fun getContainingFile(): PsiFile? = unwrapFakeFileForLightClass(psi.containingFile)
+    override fun getContainingFile(): PsiFile = unwrapFakeFileForLightClass(psi.containingFile)

     override val uastAnchor by lazy { getIdentifierSourcePsi()?.let { KotlinUIdentifier(nameIdentifier, it, this) } }

@@ -63,12 +64,11 @@ abstract class BaseKotlinUClass(
         var secondaryConstructorsCount = 0

         fun createUMethod(psiMethod: PsiMethod): UMethod {
-            return if (psiMethod is KtLightMethod &&
-                psiMethod.isConstructor) {
+            return if (psiMethod is KtLightMethod && psiMethod.isConstructor) {
                 if (!hasPrimaryConstructor && secondaryConstructorsCount++ == 0)
-                    buildSecondaryConstructorUMethod(ktClass, psiMethod, this)
+                    KotlinSecondaryConstructorWithInitializersUMethod(ktClass, psiMethod, this)
                 else
-                    buildPrimaryConstructorUMethod(ktClass, psiMethod, this)
+                    KotlinConstructorUMethod(ktClass, psiMethod, this)
             } else {
                 languagePlugin?.convertOpt(psiMethod, this) ?: reportConvertFailure(psiMethod)
             }
@@ -106,6 +106,11 @@ abstract class BaseKotlinUClass(
         return result.toTypedArray()
     }

-    abstract fun buildPrimaryConstructorUMethod(ktClass: KtClassOrObject?, psi: KtLightMethod, givenParent: UElement?) : UMethod
-    abstract fun buildSecondaryConstructorUMethod(ktClass: KtClassOrObject?, psi: KtLightMethod, givenParent: UElement?) : UMethod
+    companion object {
+        fun create(psi: KtLightClass, containingElement: UElement?): UClass = when (psi) {
+            is PsiAnonymousClass -> KotlinUAnonymousClass(psi, containingElement)
+            is KtLightClassForScript -> KotlinScriptUClass(psi, containingElement)
+            else -> KotlinUClass(psi, containingElement)
+        }
+    }
 }
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUEnumConstant.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUEnumConstant.kt
similarity index 75%
rename from uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUEnumConstant.kt
rename to uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUEnumConstant.kt
index d7b7c072ee3..acdadf23c83 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUEnumConstant.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUEnumConstant.kt
@@ -1,4 +1,7 @@
-// Copyright 2000-2021 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
+/*
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
 package org.jetbrains.uast.kotlin

 import com.intellij.psi.*
@@ -15,7 +18,7 @@ class KotlinUEnumConstant(
     psi: PsiEnumConstant,
     override val sourcePsi: KtElement?,
     givenParent: UElement?
-) : AbstractKotlinUVariable(givenParent), UEnumConstantExPlaceHolder, UCallExpressionEx, DelegatedMultiResolve, PsiEnumConstant by psi {
+) : AbstractKotlinUVariable(givenParent), UEnumConstantEx, UCallExpression, DelegatedMultiResolve, PsiEnumConstant by psi {

     override val initializingClass: UClass? by lz {
         (psi.initializingClass as? KtLightClass)?.let { initializingClass ->
@@ -53,7 +56,7 @@ class KotlinUEnumConstant(
     override val methodIdentifier: UIdentifier?
         get() = null

-    override val classReference: UReferenceExpression?
+    override val classReference: UReferenceExpression
         get() = KotlinEnumConstantClassReference(psi, sourcePsi, this)

     override val typeArgumentCount: Int
@@ -65,13 +68,15 @@ class KotlinUEnumConstant(
     override val valueArgumentCount: Int
         get() = psi.argumentList?.expressions?.size ?: 0

-    override val valueArguments by lz(fun(): List<UExpression> {
-        val ktEnumEntry = sourcePsi as? KtEnumEntry ?: return emptyList()
-        val ktSuperTypeCallEntry = ktEnumEntry.initializerList?.initializers?.firstOrNull() as? KtSuperTypeCallEntry ?: return emptyList()
-        return ktSuperTypeCallEntry.valueArguments.map {
-            it.getArgumentExpression()?.let { getLanguagePlugin().convertElement(it, this) } as? UExpression ?: UastEmptyExpression(this)
+    override val valueArguments: List<UExpression> by lz {
+        val ktEnumEntry = sourcePsi as? KtEnumEntry ?: return@lz emptyList()
+        val ktSuperTypeCallEntry =
+            ktEnumEntry.initializerList?.initializers?.firstOrNull() as? KtSuperTypeCallEntry ?: return@lz emptyList()
+        ktSuperTypeCallEntry.valueArguments.map { valueArgument ->
+            valueArgument.getArgumentExpression()?.let { languagePlugin?.convertElement(it, this) } as? UExpression
+                ?: UastEmptyExpression(this)
         }
-    })
+    }

     override val returnType: PsiType?
         get() = uastParent?.getAsJavaPsiElement(PsiClass::class.java)?.let { PsiTypesUtil.getClassType(it) }
@@ -86,7 +91,7 @@ class KotlinUEnumConstant(
         override val sourcePsi: KtElement?,
         givenParent: UElement?
     ) : KotlinAbstractUExpression(givenParent), USimpleNameReferenceExpression {
-        override val javaPsi: PsiElement?
+        override val javaPsi: PsiElement
             get() = psi

         override fun resolve() = psi.containingClass
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUIdentifier.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUIdentifier.kt
index f79d414a91b..0ed15d2eed8 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUIdentifier.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUIdentifier.kt
@@ -9,7 +9,6 @@ import com.intellij.openapi.application.ApplicationManager
 import com.intellij.psi.PsiElement
 import com.intellij.psi.impl.source.tree.LeafPsiElement
 import org.jetbrains.kotlin.kdoc.psi.impl.KDocName
-import org.jetbrains.uast.kotlin.createKDocNameSimpleNameReference
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.utils.KotlinExceptionWithAttachments
 import org.jetbrains.uast.UElement
@@ -22,7 +21,7 @@ class KotlinUIdentifier constructor(
     givenParent: UElement?
 ) : UIdentifier(sourcePsi, givenParent) {

-    override val javaPsi: PsiElement? by lazy(javaPsiSupplier) // don't know any real need to call it in production
+    override val javaPsi: PsiElement? by lz(javaPsiSupplier) // don't know any real need to call it in production

     override val psi: PsiElement?
         get() = javaPsi ?: sourcePsi
@@ -43,11 +42,11 @@ class KotlinUIdentifier constructor(
         return false
     }

-    override val uastParent: UElement? by lazy {
-        if (givenParent != null) return@lazy givenParent
-        val parent = sourcePsi?.parent ?: return@lazy null
+    override val uastParent: UElement? by lz {
+        if (givenParent != null) return@lz givenParent
+        val parent = sourcePsi?.parent ?: return@lz null

-        return@lazy if (parent is KDocName && parent.getQualifier() != null) // e.g. for UElement in org.jetbrains.uast.UElement
+        return@lz if (parent is KDocName && parent.getQualifier() != null) // e.g. for UElement in org.jetbrains.uast.UElement
             createKDocNameSimpleNameReference(parentKDocName = parent, givenParent = null)
         else
             getIdentifierParentForCall(parent) ?: parent.toUElement()
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinUMethod.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethod.kt
similarity index 73%
rename from uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinUMethod.kt
rename to uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethod.kt
index 3facc92f8bc..e024900c553 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/BaseKotlinUMethod.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethod.kt
@@ -9,20 +9,27 @@ import com.intellij.psi.PsiFile
 import com.intellij.psi.PsiMethod
 import com.intellij.psi.PsiNameIdentifierOwner
 import com.intellij.psi.PsiParameter
+import org.jetbrains.kotlin.asJava.LightClassUtil
 import org.jetbrains.kotlin.asJava.elements.KtLightElement
 import org.jetbrains.kotlin.asJava.elements.KtLightMethod
 import org.jetbrains.kotlin.asJava.elements.isGetter
 import org.jetbrains.kotlin.asJava.elements.isSetter
 import org.jetbrains.kotlin.psi.*
+import org.jetbrains.kotlin.psi.psiUtil.containingClassOrObject
+import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
 import org.jetbrains.kotlin.utils.SmartList
 import org.jetbrains.uast.*
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiParameter

-abstract class BaseKotlinUMethod(
+open class KotlinUMethod(
     psi: PsiMethod,
     final override val sourcePsi: KtDeclaration?,
     givenParent: UElement?
 ) : KotlinAbstractUElement(givenParent), UMethod, UAnchorOwner, PsiMethod by psi {
+    constructor(
+        psi: KtLightMethod,
+        givenParent: UElement?
+    ) : this(psi, getKotlinMemberOrigin(psi), givenParent)

     override val uastParameters: List<UParameter> by lz {

@@ -100,4 +107,35 @@ abstract class BaseKotlinUMethod(
             KotlinUTypeReferenceExpression(it, this) { javaPsi.returnType ?: UastErrorType }
         }
     }
+
+    companion object {
+        fun create(
+            psi: KtLightMethod,
+            givenParent: UElement?
+        ): UMethod {
+            val kotlinOrigin = psi.kotlinOrigin
+            return when {
+                kotlinOrigin is KtConstructor<*> ->
+                    KotlinConstructorUMethod(kotlinOrigin.containingClassOrObject, psi, givenParent)
+                kotlinOrigin is KtParameter && kotlinOrigin.getParentOfType<KtClass>(true)?.isAnnotation() == true ->
+                    KotlinUAnnotationMethod(psi, givenParent)
+                else ->
+                    KotlinUMethod(psi, givenParent)
+            }
+        }
+
+        fun create(
+            sourcePsi: KtDeclaration?,
+            givenParent: UElement?
+        ): UMethod? {
+            val javaPsi = when (sourcePsi) {
+                is KtPropertyAccessor ->
+                    LightClassUtil.getLightClassAccessorMethod(sourcePsi)
+                is KtFunction ->
+                    LightClassUtil.getLightClassMethod(sourcePsi)
+                else -> null
+            } as? KtLightMethod ?: return null
+            return create(javaPsi, givenParent)
+        }
+    }
 }
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinClassViaConstructorUSimpleReferenceExpression.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinClassViaConstructorUSimpleReferenceExpression.kt
new file mode 100644
index 00000000000..ef1c8be61bd
--- /dev/null
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinClassViaConstructorUSimpleReferenceExpression.kt
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+package org.jetbrains.uast.kotlin
+
+import com.intellij.psi.PsiClass
+import com.intellij.psi.PsiElement
+import com.intellij.psi.PsiMethod
+import com.intellij.psi.PsiNamedElement
+import org.jetbrains.kotlin.psi.KtCallElement
+import org.jetbrains.uast.UElement
+import org.jetbrains.uast.USimpleNameReferenceExpression
+import org.jetbrains.uast.internal.log
+import org.jetbrains.uast.visitor.UastVisitor
+
+class KotlinClassViaConstructorUSimpleReferenceExpression(
+    override val sourcePsi: KtCallElement,
+    override val identifier: String,
+    givenParent: UElement?
+) : KotlinAbstractUExpression(givenParent), USimpleNameReferenceExpression, KotlinUElementWithType {
+    override val resolvedName: String?
+        get() = (resolved as? PsiNamedElement)?.name
+
+    private val resolved by lz {
+        baseResolveProviderService.resolveToClassIfConstructorCall(sourcePsi, this)
+    }
+
+    override fun accept(visitor: UastVisitor) {
+        super<KotlinAbstractUExpression>.accept(visitor)
+    }
+
+    override fun resolve(): PsiElement? = resolved
+
+    override fun asLogString(): String {
+        val resolveStr = when (val resolved = resolve()) {
+            is PsiClass -> "PsiClass: ${resolved.name}"
+            is PsiMethod -> "PsiMethod: ${resolved.name}"
+            else -> resolved.toString()
+        }
+        return log<USimpleNameReferenceExpression>("identifier = $identifier, resolvesTo = $resolveStr")
+    }
+}
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinStringTemplateUPolyadicExpression.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinStringTemplateUPolyadicExpression.kt
index f6736f2dd39..47b2a476555 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinStringTemplateUPolyadicExpression.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinStringTemplateUPolyadicExpression.kt
@@ -20,7 +20,7 @@ class KotlinStringTemplateUPolyadicExpression(
     UInjectionHost {
     override val operands: List<UExpression> by lz {
         sourcePsi.entries.map {
-            baseResolveProviderService.baseKotlinConverter.convertEntry(
+            baseResolveProviderService.baseKotlinConverter.convertStringTemplateEntry(
                 it,
                 this,
                 DEFAULT_EXPRESSION_TYPES_LIST
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUBlockExpression.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUBlockExpression.kt
index 4b9f5c91949..0f1787b7e7d 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUBlockExpression.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUBlockExpression.kt
@@ -24,7 +24,7 @@ open class KotlinUBlockExpression(
         if (directParent is UnknownKotlinExpression && directParent.sourcePsi is KtAnonymousInitializer) {
             val containingUClass = directParent.getContainingUClass() ?: return directParent
             containingUClass.methods.find {
-                it is BaseKotlinConstructorUMethod && it.isPrimary || it is BaseKotlinSecondaryConstructorWithInitializersUMethod
+                it is KotlinConstructorUMethod && it.isPrimary || it is KotlinSecondaryConstructorWithInitializersUMethod
             }?.let {
                 return it.uastBody
             }
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUFunctionCallExpression.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUFunctionCallExpression.kt
new file mode 100644
index 00000000000..862e4e2a12a
--- /dev/null
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUFunctionCallExpression.kt
@@ -0,0 +1,184 @@
+/*
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.uast.kotlin
+
+import com.intellij.psi.*
+import com.intellij.psi.util.PsiTypesUtil
+import org.jetbrains.kotlin.psi.*
+import org.jetbrains.uast.*
+import org.jetbrains.uast.internal.acceptList
+import org.jetbrains.uast.kotlin.internal.TypedResolveResult
+import org.jetbrains.uast.visitor.UastVisitor
+
+class KotlinUFunctionCallExpression(
+    override val sourcePsi: KtCallElement,
+    givenParent: UElement?,
+) : KotlinAbstractUExpression(givenParent), UCallExpression, KotlinUElementWithType, UMultiResolvable {
+
+    override val receiverType by lz {
+        baseResolveProviderService.getReceiverType(sourcePsi, this)
+    }
+
+    override val methodName by lz {
+        baseResolveProviderService.resolvedFunctionName(sourcePsi)
+    }
+
+    override val classReference by lz {
+        KotlinClassViaConstructorUSimpleReferenceExpression(sourcePsi, methodName.orAnonymous("class"), this)
+    }
+
+    override val methodIdentifier by lz {
+        if (sourcePsi is KtSuperTypeCallEntry) {
+            ((sourcePsi.parent as? KtInitializerList)?.parent as? KtEnumEntry)?.let { ktEnumEntry ->
+                return@lz KotlinUIdentifier(ktEnumEntry.nameIdentifier, this)
+            }
+        }
+
+        when (val calleeExpression = sourcePsi.calleeExpression) {
+            null -> null
+            is KtNameReferenceExpression ->
+                KotlinUIdentifier(calleeExpression.getReferencedNameElement(), this)
+            is KtConstructorDelegationReferenceExpression ->
+                KotlinUIdentifier(calleeExpression.firstChild ?: calleeExpression, this)
+            is KtConstructorCalleeExpression ->
+                KotlinUIdentifier(
+                    calleeExpression.constructorReferenceExpression?.getReferencedNameElement() ?: calleeExpression, this
+                )
+            is KtLambdaExpression ->
+                KotlinUIdentifier(calleeExpression.functionLiteral.lBrace, this)
+            else ->
+                KotlinUIdentifier(
+                    sourcePsi.valueArgumentList?.leftParenthesis
+                        ?: sourcePsi.lambdaArguments.singleOrNull()?.getLambdaExpression()?.functionLiteral?.lBrace
+                        ?: calleeExpression, this
+                )
+        }
+    }
+
+    override val valueArgumentCount: Int
+        get() = sourcePsi.valueArguments.size
+
+    override val valueArguments by lz {
+        sourcePsi.valueArguments.map {
+            baseResolveProviderService.baseKotlinConverter.convertOrEmpty(it.getArgumentExpression(), this)
+        }
+    }
+
+    override fun getArgumentForParameter(i: Int): UExpression? {
+        val resolvedCall = baseResolveProviderService.resolveCall(sourcePsi)
+        if (resolvedCall != null) {
+            val actualParamIndex = if (baseResolveProviderService.isResolvedToExtension(sourcePsi)) i - 1 else i
+            if (actualParamIndex == -1) return receiver
+            return baseResolveProviderService.getArgumentForParameter(sourcePsi, actualParamIndex, this)
+        }
+        val argument = valueArguments.getOrNull(i) ?: return null
+        val argumentType = argument.getExpressionType()
+        for (resolveResult in multiResolve()) {
+            val psiMethod = resolveResult.element as? PsiMethod ?: continue
+            val psiParameter = psiMethod.parameterList.parameters.getOrNull(i) ?: continue
+
+            if (argumentType == null || psiParameter.type.isAssignableFrom(argumentType))
+                return argument
+        }
+        return null
+    }
+
+    override fun getExpressionType(): PsiType? {
+        super<KotlinUElementWithType>.getExpressionType()?.let { return it }
+        for (resolveResult in multiResolve()) {
+            val psiMethod = resolveResult.element
+            when {
+                psiMethod.isConstructor ->
+                    psiMethod.containingClass?.let { return PsiTypesUtil.getClassType(it) }
+                else ->
+                    psiMethod.returnType?.let { return it }
+            }
+        }
+        return null
+    }
+
+    override val typeArgumentCount: Int
+        get() = sourcePsi.typeArguments.size
+
+    override val typeArguments by lz {
+        sourcePsi.typeArguments.map { ktTypeProjection ->
+            ktTypeProjection.typeReference?.let { baseResolveProviderService.resolveToType(it, this) } ?: UastErrorType
+        }
+    }
+
+    override val returnType: PsiType? by lz {
+        getExpressionType()
+    }
+
+    override val kind: UastCallKind by lz {
+        baseResolveProviderService.callKind(sourcePsi)
+    }
+
+    override val receiver: UExpression? by lz {
+        (uastParent as? UQualifiedReferenceExpression)?.let {
+            if (it.selector == this) return@lz it.receiver
+        }
+
+        val ktNameReferenceExpression = sourcePsi.calleeExpression as? KtNameReferenceExpression ?: return@lz null
+        val localCallableDeclaration =
+            baseResolveProviderService.resolveToDeclaration(ktNameReferenceExpression) as? PsiVariable ?: return@lz null
+        if (localCallableDeclaration !is PsiLocalVariable && localCallableDeclaration !is PsiParameter) return@lz null
+
+        // an implicit receiver for variables calls (KT-25524)
+        object : KotlinAbstractUExpression(this), UReferenceExpression {
+
+            override val sourcePsi: KtNameReferenceExpression get() = ktNameReferenceExpression
+
+            override val resolvedName: String? get() = localCallableDeclaration.name
+
+            override fun resolve(): PsiElement = localCallableDeclaration
+
+        }
+    }
+
+    private val multiResolved: Iterable<TypedResolveResult<PsiMethod>> by lz {
+        val contextElement = sourcePsi
+        val calleeExpression = contextElement.calleeExpression as? KtReferenceExpression ?: return@lz emptyList()
+        val methodName = methodName ?: calleeExpression.text ?: return@lz emptyList()
+        val variants = baseResolveProviderService.getReferenceVariants(calleeExpression, methodName)
+        variants.flatMap {
+            when (it) {
+                is PsiClass -> it.constructors.asSequence()
+                is PsiMethod -> sequenceOf(it)
+                else -> emptySequence()
+            }
+        }.map { TypedResolveResult(it) }.asIterable()
+    }
+
+    override fun multiResolve(): Iterable<TypedResolveResult<PsiMethod>> =
+        multiResolved
+
+    override fun resolve(): PsiMethod? =
+        baseResolveProviderService.resolveCall(sourcePsi)
+
+    override fun accept(visitor: UastVisitor) {
+        if (visitor.visitCallExpression(this)) return
+        uAnnotations.acceptList(visitor)
+        methodIdentifier?.accept(visitor)
+        classReference.accept(visitor)
+        valueArguments.acceptList(visitor)
+
+        visitor.afterVisitCallExpression(this)
+    }
+
+    override fun convertParent(): UElement? = super.convertParent().let { result ->
+        when (result) {
+            is UMethod -> result.uastBody ?: result
+            is UClass ->
+                result.methods
+                    .filterIsInstance<KotlinConstructorUMethod>()
+                    .firstOrNull { it.isPrimary }
+                    ?.uastBody
+                ?: result
+            else -> result
+        }
+    }
+}
diff --git a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/multiResolveUtils.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/multiResolveUtils.kt
index c325ac1a564..f997b7d28bc 100644
--- a/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/multiResolveUtils.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/multiResolveUtils.kt
@@ -5,6 +5,7 @@

 package org.jetbrains.uast.kotlin.internal

+import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiPolyVariantReference
 import com.intellij.psi.PsiSubstitutor
 import com.intellij.psi.ResolveResult
@@ -31,3 +32,8 @@ fun KtElement.multiResolveResults(): Sequence<ResolveResult> =
             else -> (ref.resolve()?.let { sequenceOf(CandidateInfo(it, PsiSubstitutor.EMPTY)) }).orEmpty()
         }
     }
+
+class TypedResolveResult<T : PsiElement>(element: T) : CandidateInfo(element, PsiSubstitutor.EMPTY) {
+    @Suppress("UNCHECKED_CAST")
+    override fun getElement(): T = super.getElement() as T
+}
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
similarity index 80%
rename from uast/uast-kotlin/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
rename to uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
index d46b6044474..81eef063122 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
+++ b/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
@@ -1,17 +1,6 @@
 /*
- * Copyright 2010-2016 JetBrains s.r.o.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
  */

 package org.jetbrains.uast.kotlin
@@ -35,7 +24,10 @@ import org.jetbrains.uast.*
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiParameter
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiVariable

-fun convertParentImpl(uElement: UElement): UElement? {
+fun convertParentImpl(
+    service: BaseKotlinUastResolveProviderService,
+    uElement: UElement
+): UElement? {
     @Suppress("DEPRECATION")
     val psi = uElement.psi //TODO: `psi` is deprecated but it seems that it couldn't be simply replaced for this case
     var parent = psi?.parent ?: uElement.sourcePsi?.parent ?: psi?.containingFile
@@ -44,7 +36,7 @@ fun convertParentImpl(uElement: UElement): UElement? {
         when (parent) {
             is KtClassBody -> {
                 val grandParent = parent.parent
-                convertParentImpl(uElement, grandParent)?.let { return it }
+                convertParentImpl(service, uElement, grandParent)?.let { return it }
                 parent = grandParent
             }
             is KtFile -> {
@@ -64,9 +56,8 @@ fun convertParentImpl(uElement: UElement): UElement? {
     }

     if (psi is KtAnnotationEntry) {
-        val parentUnwrapped = KotlinConverter.unwrapElements(parent) ?: return null
-        val target = psi.useSiteTarget?.getAnnotationUseSiteTarget()
-        when (target) {
+        val parentUnwrapped = service.baseKotlinConverter.unwrapElements(parent) ?: return null
+        when (psi.useSiteTarget?.getAnnotationUseSiteTarget()) {
             AnnotationUseSiteTarget.PROPERTY_GETTER ->
                 parent = (parentUnwrapped as? KtProperty)?.getter
                          ?: (parentUnwrapped as? KtParameter)?.toLightGetter()
@@ -91,7 +82,7 @@ fun convertParentImpl(uElement: UElement): UElement? {
         parent = parent.parent
     }

-    if (KotlinConverter.forceUInjectionHost) {
+    if (service.baseKotlinConverter.forceUInjectionHost()) {
         if (parent is KtBlockStringTemplateEntry) {
             parent = parent.parent
         }
@@ -124,7 +115,7 @@ fun convertParentImpl(uElement: UElement): UElement? {
         parent = parent.parent
     }

-    val result = convertParentImpl(uElement, parent)
+    val result = convertParentImpl(service, uElement, parent)
     if (result == uElement) {
         throw KotlinExceptionWithAttachments("Loop in parent structure when converting a $psi of type ${psi?.javaClass} with parent $parent of type ${parent?.javaClass}")
             .withAttachment("text", parent?.text)
@@ -134,15 +125,20 @@ fun convertParentImpl(uElement: UElement): UElement? {
     return result
 }

-fun convertParentImpl(element: UElement, parent: PsiElement?): UElement? {
-    val parentUnwrapped = KotlinConverter.unwrapElements(parent) ?: return null
+fun convertParentImpl(
+    service: BaseKotlinUastResolveProviderService,
+    element: UElement,
+    parent: PsiElement?
+): UElement? {
+    val parentUnwrapped = service.baseKotlinConverter.unwrapElements(parent) ?: return null
     if (parent is KtValueArgument && parentUnwrapped is KtAnnotationEntry) {
-        return (KotlinUastLanguagePlugin().convertElementWithParent(parentUnwrapped, null) as? KotlinUAnnotation)
-            ?.findAttributeValueExpression(parent)
+        return (service.languagePlugin.convertElementWithParent(parentUnwrapped, null) as? KotlinUAnnotation)?.let {
+            service.findAttributeValueExpression(it, parent)
+        }
     }

     if (parent is KtParameter) {
-        val annotationClass = findAnnotationClassFromConstructorParameter(parent)
+        val annotationClass = findAnnotationClassFromConstructorParameter(service.languagePlugin, parent)
         if (annotationClass != null) {
             return annotationClass.methods.find { it.name == parent.name }
         }
@@ -151,14 +147,14 @@ fun convertParentImpl(element: UElement, parent: PsiElement?): UElement? {
     if (parent is KtClassInitializer) {
         val containingClass = parent.containingClassOrObject
         if (containingClass != null) {
-            val containingUClass = KotlinUastLanguagePlugin().convertElementWithParent(containingClass, null) as? KotlinUClass
+            val containingUClass = service.languagePlugin.convertElementWithParent(containingClass, null) as? KotlinUClass
             containingUClass?.methods?.filterIsInstance<KotlinConstructorUMethod>()?.firstOrNull { it.isPrimary }?.let {
                 return it.uastBody
             }
         }
     }

-    val result = KotlinUastLanguagePlugin().convertElementWithParent(parentUnwrapped, null)
+    val result = service.languagePlugin.convertElementWithParent(parentUnwrapped, null)

     if (result is KotlinUBlockExpression && element is UClass) {
         return KotlinUDeclarationsExpression(result).apply {
@@ -219,14 +215,16 @@ fun convertParentImpl(element: UElement, parent: PsiElement?): UElement? {
 }

 private fun isInConditionBranch(element: UElement, result: USwitchClauseExpressionWithBody) =
-        element.psi?.parentsWithSelf?.takeWhile { it !== result.psi }?.any { it is KtWhenCondition } ?: false
-
+    element.psi?.parentsWithSelf?.takeWhile { it !== result.psi }?.any { it is KtWhenCondition } ?: false

-private fun findAnnotationClassFromConstructorParameter(parameter: KtParameter): UClass? {
+private fun findAnnotationClassFromConstructorParameter(
+    languagePlugin: UastLanguagePlugin,
+    parameter: KtParameter
+): UClass? {
     val primaryConstructor = parameter.getStrictParentOfType<KtPrimaryConstructor>() ?: return null
     val containingClass = primaryConstructor.getContainingClassOrObject()
     if (containingClass.isAnnotation()) {
-        return KotlinUastLanguagePlugin().convertElementWithParent(containingClass, null) as? UClass
+        return languagePlugin.convertElementWithParent(containingClass, null) as? UClass
     }
     return null
 }
diff --git a/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastIdentifiersTestBase.kt b/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastIdentifiersTestBase.kt
index 1fa6bcb7c21..a4a3a9d8442 100644
--- a/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastIdentifiersTestBase.kt
+++ b/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastIdentifiersTestBase.kt
@@ -55,9 +55,6 @@ interface UastIdentifiersTestBase : UastPluginSelection, UastFileComparisonTestB
             }
         } catch (e: AssertionError) {
             if (!isExpectedToFail(filePath)) throw e
-        } catch (e: NotImplementedError) {
-            // TODO: Remove this catch once parent conversion in FIR UAST is implemented
-            if (!isExpectedToFail(filePath)) throw e
         }

         cleanUpIdenticalFile(
diff --git a/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastTypesTestBase.kt b/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastTypesTestBase.kt
index 3ac6dc413a6..6053e119b0f 100644
--- a/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastTypesTestBase.kt
+++ b/uast/uast-kotlin-base/test/org/jetbrains/uast/test/common/kotlin/UastTypesTestBase.kt
@@ -6,7 +6,6 @@
 package org.jetbrains.uast.test.common.kotlin

 import org.jetbrains.kotlin.idea.test.KotlinTestUtils
-import org.jetbrains.kotlin.test.KtAssert
 import org.jetbrains.uast.UFile
 import org.jetbrains.uast.test.common.kotlin.UastTestSuffix.TXT
 import java.io.File
@@ -22,22 +21,10 @@ interface UastTypesTestBase : UastPluginSelection, UastFileComparisonTestBase {
         return getTypesFile(filePath, "$pluginSuffix$TXT")
     }

-    // TODO: ideally, we don't want this kind of whitelist.
-    fun isExpectedToFail(filePath: String): Boolean {
-        return false
-    }
-
     fun check(filePath: String, file: UFile) {
         val typesFile = getPluginTypesFile(filePath)

-        try {
-            KotlinTestUtils.assertEqualsToFile(typesFile, file.asLogTypes())
-            if (isExpectedToFail(filePath)) {
-                KtAssert.fail("This test seems not fail anymore. Drop this from the white-list and re-run the test.")
-            }
-        } catch (e: Exception) {
-            if (!isExpectedToFail(filePath)) throw e
-        }
+        KotlinTestUtils.assertEqualsToFile(typesFile, file.asLogTypes())

         cleanUpIdenticalFile(
             typesFile,
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinConverter.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinConverter.kt
index bac46704ace..d0d9ef8afac 100644
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinConverter.kt
+++ b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinConverter.kt
@@ -5,20 +5,19 @@

 package org.jetbrains.uast.kotlin

-import com.intellij.openapi.components.ServiceManager
-import com.intellij.psi.PsiComment
+import com.intellij.openapi.util.registry.Registry
 import com.intellij.psi.PsiElement
-import com.intellij.psi.impl.source.tree.LeafPsiElement
+import com.intellij.psi.PsiEnumConstant
+import com.intellij.psi.PsiField
+import org.jetbrains.annotations.TestOnly
 import org.jetbrains.kotlin.asJava.LightClassUtil
 import org.jetbrains.kotlin.asJava.classes.KtLightClass
 import org.jetbrains.kotlin.asJava.elements.*
 import org.jetbrains.kotlin.asJava.findFacadeClass
 import org.jetbrains.kotlin.asJava.toLightClass
 import org.jetbrains.kotlin.asJava.toPsiParameters
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocName
 import org.jetbrains.kotlin.lexer.KtTokens
 import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
 import org.jetbrains.kotlin.utils.addToStdlib.safeAs
 import org.jetbrains.uast.*
 import org.jetbrains.uast.expressions.UInjectionHost
@@ -31,23 +30,6 @@ import org.jetbrains.uast.kotlin.psi.UastKotlinPsiParameterBase
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiVariable

 internal object FirKotlinConverter : BaseKotlinConverter {
-    override fun convertAnnotation(annotationEntry: KtAnnotationEntry, givenParent: UElement?): UAnnotation {
-        // TODO: need to polish/implement annotations more
-        return FirKotlinUAnnotation(annotationEntry, givenParent)
-    }
-
-    internal fun convertDeclarationOrElement(
-        element: PsiElement,
-        givenParent: UElement?,
-        requiredTypes: Array<out Class<out UElement>>
-    ): UElement? {
-        if (element is UElement) return element
-
-        // TODO: cache inside PsiElement?
-
-        return convertDeclaration(element, givenParent, requiredTypes)
-            ?: convertPsiElement(element, givenParent, requiredTypes)
-    }

     override fun convertDeclaration(
         element: PsiElement,
@@ -71,6 +53,12 @@ internal object FirKotlinConverter : BaseKotlinConverter {
             ctor(original as P, ktElement, givenParent)
         }

+        fun Array<out Class<out UElement>>.convertToUField(original: PsiField, kotlinOrigin: KtElement?): UElement? =
+            if (original is PsiEnumConstant)
+                el<UEnumConstant>(buildKtOpt(kotlinOrigin, ::KotlinUEnumConstant))
+            else
+                el<UField>(buildKtOpt(kotlinOrigin, ::KotlinUField))
+
         return with(requiredTypes) {
             when (original) {
                 is KtFile -> {
@@ -81,17 +69,28 @@ internal object FirKotlinConverter : BaseKotlinConverter {
                 }

                 is KtLightClass -> {
-                    // TODO: differentiate enum entry
-                    el<UClass> { FirKotlinUClass.create(original, givenParent) }
+                    when (original.kotlinOrigin) {
+                        is KtEnumEntry -> el<UEnumConstant> {
+                            convertEnumEntry(original.kotlinOrigin as KtEnumEntry, givenParent)
+                        }
+                        else -> el<UClass> { KotlinUClass.create(original, givenParent) }
+                    }
                 }
                 is KtClassOrObject -> {
                     convertClassOrObject(original, givenParent, requiredTypes).firstOrNull()
                 }
-                // TODO: KtEnumEntry
+                is KtEnumEntry -> {
+                    el<UEnumConstant> {
+                        convertEnumEntry(original, givenParent)
+                    }
+                }

                 is KtLightField -> {
-                    // TODO: differentiate enum constant
-                    el<UField>(buildKtOpt(original.kotlinOrigin, ::KotlinUField))
+                    convertToUField(original, original.kotlinOrigin)
+                }
+                is KtLightFieldForSourceDeclarationSupport -> {
+                    // KtLightFieldForDecompiledDeclaration is not a KtLightField
+                    convertToUField(original, original.kotlinOrigin)
                 }
                 is UastKotlinPsiVariable -> {
                     el<ULocalVariable>(buildKt(original.ktElement, ::KotlinULocalVariable))
@@ -116,12 +115,12 @@ internal object FirKotlinConverter : BaseKotlinConverter {
                     }
                 }
                 is KtPropertyAccessor -> {
-                    el<UMethod> { FirKotlinUMethod.create(original, givenParent) }
+                    el<UMethod> { KotlinUMethod.create(original, givenParent) }
                 }

                 is KtLightMethod -> {
                     // .Companion is needed because of KT-13934
-                    el<UMethod>(build(FirKotlinUMethod.Companion::create))
+                    el<UMethod>(build(KotlinUMethod.Companion::create))
                 }
                 is KtFunction -> {
                     if (original.isLocal) {
@@ -142,12 +141,18 @@ internal object FirKotlinConverter : BaseKotlinConverter {
                             }
                         }
                     } else {
-                        el<UMethod> { FirKotlinUMethod.create(original, givenParent) }
+                        el<UMethod> { KotlinUMethod.create(original, givenParent) }
                     }
                 }

-                // TODO: KtAnnotationEntry
-                // TODO: KtCallExpression (for nested annotation)
+                is KtAnnotationEntry -> el<UAnnotation>(build(::convertAnnotation))
+                is KtCallExpression ->
+                    if (requiredTypes.isAssignableFrom(KotlinUNestedAnnotation::class.java) &&
+                        !requiredTypes.isAssignableFrom(UCallExpression::class.java)
+                    ) {
+                        el<UAnnotation> { KotlinUNestedAnnotation.create(original, givenParent) }
+                    } else null
+                is KtLightAnnotationForSourceEntry -> convertDeclarationOrElement(original.kotlinOrigin, givenParent, requiredTypes)

                 is KtDelegatedSuperTypeEntry -> el<KotlinSupertypeDelegationUExpression> {
                     KotlinSupertypeDelegationUExpression(original, givenParent)
@@ -167,49 +172,10 @@ internal object FirKotlinConverter : BaseKotlinConverter {
             // File
           alternative { KotlinUFile(element, firKotlinUastPlugin) },
             // Facade
-          alternative { element.findFacadeClass()?.let { FirKotlinUClass.create(it, givenParent) } }
+          alternative { element.findFacadeClass()?.let { KotlinUClass.create(it, givenParent) } }
         )
     }

-    internal fun convertClassOrObject(
-        element: KtClassOrObject,
-        givenParent: UElement?,
-        requiredTypes: Array<out Class<out UElement>>
-    ): Sequence<UElement> {
-        val ktLightClass = element.toLightClass() ?: return emptySequence()
-        val uClass = FirKotlinUClass.create(ktLightClass, givenParent)
-        return requiredTypes.accommodate(
-            // Class
-            alternative { uClass },
-            // Object
-            alternative primaryConstructor@{
-                val primaryConstructor = element.primaryConstructor ?: return@primaryConstructor null
-                uClass.methods.asSequence()
-                    .filter { it.sourcePsi == primaryConstructor }
-                    .firstOrNull()
-            }
-        )
-    }
-
-    private fun convertToPropertyAlternatives(
-        methods: LightClassUtil.PropertyAccessorsPsiMethods?,
-        givenParent: UElement?
-    ): Array<UElementAlternative<*>> =
-        if (methods != null)
-            arrayOf(
-                alternative { methods.backingField?.let { KotlinUField(it, getKotlinMemberOrigin(it), givenParent) } },
-                alternative { methods.getter?.let { convertDeclaration(it, givenParent, arrayOf(UMethod::class.java)) as? UMethod } },
-                alternative { methods.setter?.let { convertDeclaration(it, givenParent, arrayOf(UMethod::class.java)) as? UMethod } }
-            )
-        else emptyArray()
-
-    internal fun convertNonLocalProperty(
-        property: KtProperty,
-        givenParent: UElement?,
-        requiredTypes: Array<out Class<out UElement>>
-    ): Sequence<UElement> =
-        requiredTypes.accommodate(*convertToPropertyAlternatives(LightClassUtil.getLightClassPropertyMethods(property), givenParent))
-
     internal fun convertParameter(
         element: KtParameter,
         givenParent: UElement?,
@@ -227,104 +193,16 @@ internal object FirKotlinConverter : BaseKotlinConverter {
             *convertToPropertyAlternatives(LightClassUtil.getLightClassPropertyMethods(element), givenParent)
         )

-    override fun convertPsiElement(
-        element: PsiElement?,
-        givenParent: UElement?,
-        requiredTypes: Array<out Class<out UElement>>
-    ): UElement? {
-        if (element == null) return null
-
-        fun <P : PsiElement> build(ctor: (P, UElement?) -> UElement): () -> UElement? = {
-            @Suppress("UNCHECKED_CAST")
-            ctor(element as P, givenParent)
+    var forceUInjectionHost = Registry.`is`("kotlin.uast.force.uinjectionhost", false)
+        @TestOnly
+        set(value) {
+            field = value
         }

-        return with(requiredTypes) {
-            when (element) {
-                is KtParameterList -> {
-                    el<UDeclarationsExpression> {
-                        val declarationsExpression = KotlinUDeclarationsExpression(null, givenParent, null)
-                        declarationsExpression.apply {
-                            declarations = element.parameters.mapIndexed { i, p ->
-                                KotlinUParameter(UastKotlinPsiParameter.create(p, element, declarationsExpression, i), p, this)
-                            }
-                        }
-                    }
-                }
-                is KtClassBody -> {
-                    el<UExpressionList>(build(KotlinUExpressionList.Companion::createClassBody))
-                }
-                is KtCatchClause -> {
-                    el<UCatchClause>(build(::KotlinUCatchClause))
-                }
-                is KtVariableDeclaration -> {
-                    if (element is KtProperty && !element.isLocal) {
-                        convertNonLocalProperty(element, givenParent, this).firstOrNull()
-                    } else {
-                        el<UVariable> { convertVariablesDeclaration(element, givenParent).declarations.singleOrNull() }
-                            ?: expr<UDeclarationsExpression> { convertExpression(element, givenParent, requiredTypes) }
-                    }
-                }
-                is KtExpression -> {
-                    convertExpression(element, givenParent, requiredTypes)
-                }
-                is KtLiteralStringTemplateEntry, is KtEscapeStringTemplateEntry -> {
-                    el<ULiteralExpression>(build(::KotlinStringULiteralExpression))
-                }
-                is KtStringTemplateEntry -> {
-                    element.expression?.let { convertExpression(it, givenParent, requiredTypes) }
-                        ?: expr<UExpression> { UastEmptyExpression(givenParent) }
-                }
-                is KtWhenEntry -> el<USwitchClauseExpressionWithBody>(build(::KotlinUSwitchEntry))
-                is KtWhenCondition -> convertWhenCondition(element, givenParent, requiredTypes)
-                is KtTypeReference ->
-                    requiredTypes.accommodate(
-                        alternative { KotlinUTypeReferenceExpression(element, givenParent) },
-                        alternative { convertReceiverParameter(element) }
-                    ).firstOrNull()
-                is KtImportDirective -> {
-                    el<UImportStatement>(build(::KotlinUImportStatement))
-                }
-                is PsiComment -> el<UComment>(build(::UComment))
-                is KDocName -> {
-                    if (element.getQualifier() == null)
-                        el<USimpleNameReferenceExpression> {
-                            element.lastChild?.let { psiIdentifier ->
-                                KotlinStringUSimpleReferenceExpression(psiIdentifier.text, givenParent, element, element)
-                            }
-                        }
-                    else el<UQualifiedReferenceExpression>(build(::KotlinDocUQualifiedReferenceExpression))
-                }
-                is LeafPsiElement -> {
-                    when {
-                        element.elementType in identifiersTokens -> {
-                            if (element.elementType != KtTokens.OBJECT_KEYWORD ||
-                                element.getParentOfType<KtObjectDeclaration>(false)?.nameIdentifier == null
-                            )
-                                el<UIdentifier>(build(::KotlinUIdentifier))
-                            else null
-                        }
-                        element.elementType in KtTokens.OPERATIONS && element.parent is KtOperationReferenceExpression -> {
-                            el<UIdentifier>(build(::KotlinUIdentifier))
-                        }
-                        element.elementType == KtTokens.LBRACKET && element.parent is KtCollectionLiteralExpression -> {
-                            el<UIdentifier> {
-                                UIdentifier(
-                                    element,
-                                    KotlinUCollectionLiteralExpression(element.parent as KtCollectionLiteralExpression, null)
-                                )
-                            }
-                        }
-                        else -> null
-                    }
-                }
-                else -> null
-            }
-        }
+    override fun forceUInjectionHost(): Boolean {
+        return forceUInjectionHost
     }

-    // TODO: forceUInjectionHost (for test)?
-
     override fun convertExpression(
         expression: KtExpression,
         givenParent: UElement?,
@@ -356,14 +234,14 @@ internal object FirKotlinConverter : BaseKotlinConverter {

                 is KtStringTemplateExpression -> {
                     when {
-                        requiredTypes.contains(UInjectionHost::class.java) -> {
+                        forceUInjectionHost || requiredTypes.contains(UInjectionHost::class.java) -> {
                             expr<UInjectionHost> { KotlinStringTemplateUPolyadicExpression(expression, givenParent) }
                         }
                         expression.entries.isEmpty() -> {
                             expr<ULiteralExpression> { KotlinStringULiteralExpression(expression, givenParent, "") }
                         }
                         expression.entries.size == 1 -> {
-                            convertEntry(expression.entries[0], givenParent, requiredTypes)
+                            convertStringTemplateEntry(expression.entries[0], givenParent, requiredTypes)
                         }
                         else -> {
                             expr<KotlinStringTemplateUPolyadicExpression> {
@@ -413,6 +291,7 @@ internal object FirKotlinConverter : BaseKotlinConverter {
                 is KtDotQualifiedExpression -> expr<UQualifiedReferenceExpression>(build(::KotlinUQualifiedReferenceExpression))
                 is KtSafeQualifiedExpression -> expr<UQualifiedReferenceExpression>(build(::KotlinUSafeQualifiedExpression))
                 is KtSimpleNameExpression -> expr<USimpleNameReferenceExpression>(build(::FirKotlinUSimpleReferenceExpression))
+                is KtCallExpression -> expr<UCallExpression>(build(::KotlinUFunctionCallExpression))

                 is KtBinaryExpression -> {
                     if (expression.operationToken == KtTokens.ELVIS) {
@@ -427,7 +306,7 @@ internal object FirKotlinConverter : BaseKotlinConverter {
                 is KtClassOrObject -> expr<UDeclarationsExpression> {
                     expression.toLightClass()?.let { lightClass ->
                         KotlinUDeclarationsExpression(givenParent).apply {
-                            declarations = listOf(FirKotlinUClass.create(lightClass, this))
+                            declarations = listOf(KotlinUClass.create(lightClass, this))
                         }
                     } ?: UastEmptyExpression(givenParent)
                 }
@@ -439,6 +318,11 @@ internal object FirKotlinConverter : BaseKotlinConverter {
                         expr<UDeclarationsExpression>(build(::createLocalFunctionDeclaration))
                     }
                 }
+                is KtAnnotatedExpression -> {
+                    expression.baseExpression
+                        ?.let { convertExpression(it, givenParent, requiredTypes) }
+                        ?: expr<UExpression>(build(::UnknownKotlinExpression))
+                }

                 else -> expr<UExpression>(build(::UnknownKotlinExpression))
             }
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastLanguagePlugin.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastLanguagePlugin.kt
index 8a995856388..6cef54aa0b4 100644
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastLanguagePlugin.kt
+++ b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastLanguagePlugin.kt
@@ -58,7 +58,7 @@ class FirKotlinUastLanguagePlugin : UastLanguagePlugin {
             element is KtClassOrObject ->
                 FirKotlinConverter.convertClassOrObject(element, null, requiredTypes) as Sequence<T>
             element is KtProperty && !element.isLocal ->
-                FirKotlinConverter.convertPsiElement(element, null, requiredTypes) as Sequence<T>
+                FirKotlinConverter.convertNonLocalProperty(element, null, requiredTypes) as Sequence<T>
             element is KtParameter ->
                 FirKotlinConverter.convertParameter(element, null, requiredTypes) as Sequence<T>
             else ->
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt
index d510cef03f5..c998cee262b 100644
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt
+++ b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt
@@ -5,34 +5,64 @@

 package org.jetbrains.uast.kotlin

+import com.intellij.psi.PsiClass
 import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiMethod
 import com.intellij.psi.PsiType
 import org.jetbrains.kotlin.idea.frontend.api.KtTypeArgumentWithVariance
 import org.jetbrains.kotlin.idea.frontend.api.analyseForUast
+import org.jetbrains.kotlin.idea.frontend.api.calls.KtAnnotationCall
+import org.jetbrains.kotlin.idea.frontend.api.calls.KtCallWithArguments
+import org.jetbrains.kotlin.idea.frontend.api.symbols.KtConstructorSymbol
+import org.jetbrains.kotlin.idea.frontend.api.symbols.markers.KtNamedSymbol
 import org.jetbrains.kotlin.idea.frontend.api.types.*
 import org.jetbrains.kotlin.idea.references.mainReference
 import org.jetbrains.kotlin.load.kotlin.TypeMappingMode
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
 import org.jetbrains.kotlin.types.typeUtil.TypeNullability
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
-import org.jetbrains.uast.UastErrorType
+import org.jetbrains.uast.*
+import org.jetbrains.uast.kotlin.internal.firKotlinUastPlugin
 import org.jetbrains.uast.kotlin.internal.toPsiMethod
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiParameterBase

 interface FirKotlinUastResolveProviderService : BaseKotlinUastResolveProviderService {
+
+    override val languagePlugin: UastLanguagePlugin
+        get() = firKotlinUastPlugin
+
     override val baseKotlinConverter: BaseKotlinConverter
         get() = FirKotlinConverter

-    override fun convertParent(uElement: UElement): UElement? {
-        // TODO
-        return null
+    override fun convertValueArguments(ktCallElement: KtCallElement, parent: UElement): List<UNamedExpression>? {
+        analyseForUast(ktCallElement) {
+            val argumentMapping = (ktCallElement.resolveCall() as? KtCallWithArguments)?.argumentMapping ?: return null
+            return argumentMapping.entries.map {
+                val name = it.value.name.asString()
+                // TODO: it.key.isSpread() ?
+                KotlinUNamedExpression.create(name, it.key, parent)
+            }
+        }
     }

-    override fun convertParent(uElement: UElement, parent: PsiElement?): UElement? {
-        TODO("Not yet implemented")
+    override fun findAttributeValueExpression(uAnnotation: KotlinUAnnotation, arg: ValueArgument): UExpression? {
+        val annotationEntry = uAnnotation.sourcePsi
+        analyseForUast(annotationEntry) {
+            val resolvedAnnotationCall = annotationEntry.resolveCall() as? KtAnnotationCall ?: return null
+            val parameter = resolvedAnnotationCall.argumentMapping[arg] ?: return null
+            val namedExpression = uAnnotation.attributeValues.find { it.name == parameter.name.asString() }
+            return namedExpression?.expression as? KotlinUVarargExpression ?: namedExpression
+        }
+    }
+
+    override fun findDefaultValueForAnnotationAttribute(ktCallElement: KtCallElement, name: String): KtExpression? {
+        analyseForUast(ktCallElement) {
+            val resolvedAnnotationCall = ktCallElement.resolveCall() as? KtAnnotationCall ?: return null
+            val resolvedAnnotationConstructorSymbol =
+                resolvedAnnotationCall.targetFunction.candidates.singleOrNull() as? KtConstructorSymbol ?: return null
+            val parameter = resolvedAnnotationConstructorSymbol.valueParameters.find { it.name.asString() == name } ?: return null
+            return (parameter.psi as? KtParameter)?.defaultValue
+        }
     }

     override fun getArgumentForParameter(ktCallElement: KtCallElement, index: Int, parent: UElement): UExpression? {
@@ -78,6 +108,11 @@ interface FirKotlinUastResolveProviderService : BaseKotlinUastResolveProviderSer

     override fun resolveCall(ktElement: KtElement): PsiMethod? {
         when (ktElement) {
+            is KtCallElement -> {
+                analyseForUast(ktElement) {
+                    return ktElement.resolveCall()?.toPsiMethod()
+                }
+            }
             is KtBinaryExpression -> {
                 analyseForUast(ktElement) {
                     return ktElement.resolveCall()?.toPsiMethod()
@@ -93,6 +128,74 @@ interface FirKotlinUastResolveProviderService : BaseKotlinUastResolveProviderSer
         }
     }

+    override fun isResolvedToExtension(ktCallElement: KtCallElement): Boolean {
+        analyseForUast(ktCallElement) {
+            val resolvedFunctionLikeSymbol = ktCallElement.resolveCall()?.targetFunction?.candidates?.singleOrNull() ?: return false
+            return resolvedFunctionLikeSymbol.isExtension
+        }
+    }
+
+    override fun resolvedFunctionName(ktCallElement: KtCallElement): String? {
+        analyseForUast(ktCallElement) {
+            val resolvedFunctionLikeSymbol = ktCallElement.resolveCall()?.targetFunction?.candidates?.singleOrNull() ?: return null
+            return (resolvedFunctionLikeSymbol as? KtNamedSymbol)?.name?.identifierOrNullIfSpecial
+        }
+    }
+
+    override fun qualifiedAnnotationName(ktCallElement: KtCallElement): String? {
+        analyseForUast(ktCallElement) {
+            val resolvedAnnotationCall = ktCallElement.resolveCall() as? KtAnnotationCall ?: return null
+            val resolvedAnnotationConstructorSymbol =
+                resolvedAnnotationCall.targetFunction.candidates.singleOrNull() as? KtConstructorSymbol ?: return null
+            return resolvedAnnotationConstructorSymbol.containingClassIdIfNonLocal
+                ?.asSingleFqName()
+                ?.toString()
+        }
+    }
+
+    override fun callKind(ktCallElement: KtCallElement): UastCallKind {
+        analyseForUast(ktCallElement) {
+            val resolvedFunctionLikeSymbol =
+                ktCallElement.resolveCall()?.targetFunction?.candidates?.singleOrNull() ?: return UastCallKind.METHOD_CALL
+            return when (resolvedFunctionLikeSymbol) {
+                is KtConstructorSymbol -> UastCallKind.CONSTRUCTOR_CALL
+                // TODO: NESTED_ARRAY_INITIALIZER
+                else -> UastCallKind.METHOD_CALL
+            }
+        }
+    }
+
+    override fun isAnnotationConstructorCall(ktCallElement: KtCallElement): Boolean {
+        analyseForUast(ktCallElement) {
+            val resolvedAnnotationCall = ktCallElement.resolveCall() as? KtAnnotationCall ?: return false
+            val resolvedAnnotationConstructorSymbol =
+                resolvedAnnotationCall.targetFunction.candidates.singleOrNull() as? KtConstructorSymbol ?: return false
+            // TODO: check if the containing class's kind is Annotation
+            return false
+        }
+    }
+
+    override fun resolveToClassIfConstructorCall(ktCallElement: KtCallElement, source: UElement): PsiClass? {
+        analyseForUast(ktCallElement) {
+            val resolvedFunctionLikeSymbol = ktCallElement.resolveCall()?.targetFunction?.candidates?.singleOrNull() ?: return null
+            return when (resolvedFunctionLikeSymbol) {
+                is KtConstructorSymbol -> null // TODO: PsiClass for the containing class
+                // TODO: SAM constructor
+                else -> null
+            }
+        }
+    }
+
+    override fun resolveToClass(ktAnnotationEntry: KtAnnotationEntry): PsiClass? {
+        analyseForUast(ktAnnotationEntry) {
+            val resolvedAnnotationCall = ktAnnotationEntry.resolveCall() as? KtAnnotationCall ?: return null
+            val resolvedAnnotationConstructorSymbol =
+                resolvedAnnotationCall.targetFunction.candidates.singleOrNull() as? KtConstructorSymbol ?: return null
+            // TODO: PsiClass for the containing class
+            return null
+        }
+    }
+
     override fun resolveToDeclaration(ktExpression: KtExpression): PsiElement? {
         when (ktExpression) {
             is KtExpressionWithLabel -> {
@@ -118,6 +221,14 @@ interface FirKotlinUastResolveProviderService : BaseKotlinUastResolveProviderSer
         }
     }

+    override fun getReceiverType(ktCallElement: KtCallElement, source: UElement): PsiType? {
+        analyseForUast(ktCallElement) {
+            val ktType = ktCallElement.resolveCall()?.targetFunction?.candidates?.singleOrNull()?.receiverType?.type ?: return null
+            if (ktType is KtClassErrorType) return null
+            return ktType.asPsiType(ktCallElement, TypeMappingMode.DEFAULT_UAST)
+        }
+    }
+
     override fun getDoubleColonReceiverType(ktDoubleColonExpression: KtDoubleColonExpression, source: UElement): PsiType? {
         analyseForUast(ktDoubleColonExpression) {
             return ktDoubleColonExpression.getReceiverKtType()?.asPsiType(ktDoubleColonExpression, TypeMappingMode.DEFAULT_UAST)
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinConstructorUMethod.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinConstructorUMethod.kt
deleted file mode 100644
index 35fa764dd60..00000000000
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinConstructorUMethod.kt
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.PsiMethod
-import org.jetbrains.kotlin.asJava.elements.KtLightMethod
-import org.jetbrains.kotlin.psi.KtCallElement
-import org.jetbrains.kotlin.psi.KtClassOrObject
-import org.jetbrains.kotlin.psi.KtDeclaration
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
-import org.jetbrains.uast.UastEmptyExpression
-
-class FirKotlinConstructorUMethod(
-    ktClass: KtClassOrObject?,
-    psi: PsiMethod,
-    kotlinOrigin: KtDeclaration?,
-    givenParent: UElement?
-) : BaseKotlinConstructorUMethod(ktClass, psi, kotlinOrigin, givenParent) {
-    constructor(
-        ktClass: KtClassOrObject?,
-        psi: KtLightMethod,
-        givenParent: UElement?
-    ) : this(ktClass, psi, psi.kotlinOrigin, givenParent)
-
-    override fun buildDelegationCall(delegationCall: KtCallElement, uastParent: UElement): UExpression {
-        return UastEmptyExpression(uastParent)
-    }
-}
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinSecondaryConstructorWithInitializersUMethod.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinSecondaryConstructorWithInitializersUMethod.kt
deleted file mode 100644
index 241958cf135..00000000000
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinSecondaryConstructorWithInitializersUMethod.kt
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import org.jetbrains.kotlin.asJava.elements.KtLightMethod
-import org.jetbrains.kotlin.psi.KtCallElement
-import org.jetbrains.kotlin.psi.KtClassOrObject
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
-import org.jetbrains.uast.UastEmptyExpression
-
-class FirKotlinSecondaryConstructorWithInitializersUMethod(
-    ktClass: KtClassOrObject?,
-    psi: KtLightMethod,
-    givenParent: UElement?
-) : BaseKotlinSecondaryConstructorWithInitializersUMethod(ktClass, psi, givenParent) {
-
-    override fun buildDelegationCall(delegationCall: KtCallElement, uastParent: UElement): UExpression {
-        return UastEmptyExpression(uastParent)
-    }
-}
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUAnnotation.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUAnnotation.kt
deleted file mode 100644
index 084e2cb88b5..00000000000
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUAnnotation.kt
+++ /dev/null
@@ -1,48 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.PsiClass
-import com.intellij.psi.PsiElement
-import com.intellij.psi.ResolveResult
-import org.jetbrains.kotlin.asJava.toLightAnnotation
-import org.jetbrains.kotlin.psi.KtAnnotationEntry
-import org.jetbrains.uast.*
-
-class FirKotlinUAnnotation(
-    annotationEntry: KtAnnotationEntry,
-    givenParent: UElement?
-) : KotlinAbstractUElement(givenParent), UAnnotation, UAnchorOwner, UMultiResolvable {
-    override val javaPsi = annotationEntry.toLightAnnotation()
-
-    override val psi: PsiElement = annotationEntry
-
-    override val attributeValues: List<UNamedExpression>
-        get() = listOf() // TODO("Not yet implemented")
-
-    override val qualifiedName: String?
-        get() = "not-implemented-annotation"
-
-    override val uastAnchor: UIdentifier?
-        get() = TODO("Not yet implemented")
-
-    override fun findAttributeValue(name: String?): UExpression? {
-        // TODO("Not yet implemented")
-        return null
-    }
-
-    override fun findDeclaredAttributeValue(name: String?): UExpression? {
-        TODO("Not yet implemented")
-    }
-
-    override fun resolve(): PsiClass? {
-        TODO("Not yet implemented")
-    }
-
-    override fun multiResolve(): Iterable<ResolveResult> {
-        TODO("Not yet implemented")
-    }
-}
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUClass.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUClass.kt
deleted file mode 100644
index b51e80c878f..00000000000
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUClass.kt
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.PsiAnonymousClass
-import org.jetbrains.kotlin.asJava.classes.KtLightClass
-import org.jetbrains.kotlin.asJava.elements.KtLightMethod
-import org.jetbrains.kotlin.psi.KtClassOrObject
-import org.jetbrains.uast.*
-
-class FirKotlinUClass(
-    psi: KtLightClass,
-    givenParent: UElement?,
-) : BaseKotlinUClass(psi, givenParent) {
-    override fun buildPrimaryConstructorUMethod(ktClass: KtClassOrObject?, psi: KtLightMethod, givenParent: UElement?): UMethod {
-        return FirKotlinConstructorUMethod(ktClass, psi, givenParent)
-    }
-
-    override fun buildSecondaryConstructorUMethod(ktClass: KtClassOrObject?, psi: KtLightMethod, givenParent: UElement?): UMethod {
-        return FirKotlinSecondaryConstructorWithInitializersUMethod(ktClass, psi, givenParent)
-    }
-
-    companion object {
-        fun create(psi: KtLightClass, givenParent: UElement?): UClass {
-            return when (psi) {
-                is PsiAnonymousClass -> KotlinUAnonymousClass(psi, givenParent)
-                // TODO: Script
-                else ->
-                    FirKotlinUClass(psi, givenParent)
-            }
-        }
-    }
-}
-
-// TODO: FirKotlinScriptUClass
diff --git a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUMethod.kt b/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUMethod.kt
deleted file mode 100644
index 52e3821d8bd..00000000000
--- a/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/declarations/FirKotlinUMethod.kt
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.PsiMethod
-import org.jetbrains.kotlin.asJava.LightClassUtil
-import org.jetbrains.kotlin.asJava.elements.*
-import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.psi.psiUtil.containingClassOrObject
-import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
-import org.jetbrains.uast.*
-
-class FirKotlinUMethod(
-    psi: PsiMethod,
-    sourcePsi: KtDeclaration?,
-    givenParent: UElement?
-) : BaseKotlinUMethod(psi, sourcePsi, givenParent) {
-    constructor(
-        psi: KtLightMethod,
-        givenParent: UElement?
-    ) : this(psi, getKotlinMemberOrigin(psi), givenParent)
-
-    companion object {
-        fun create(
-            psi: KtLightMethod,
-            givenParent: UElement?
-        ): UMethod {
-            val kotlinOrigin = psi.kotlinOrigin
-            return when {
-                kotlinOrigin is KtConstructor<*> ->
-                    FirKotlinConstructorUMethod(kotlinOrigin.containingClassOrObject, psi, givenParent)
-                kotlinOrigin is KtParameter && kotlinOrigin.getParentOfType<KtClass>(true)?.isAnnotation() == true ->
-                    KotlinUAnnotationMethod(psi, givenParent)
-                else ->
-                    FirKotlinUMethod(psi, givenParent)
-            }
-        }
-
-        fun create(
-            sourcePsi: KtDeclaration?,
-            givenParent: UElement?
-        ): UMethod? {
-            val javaPsi = when (sourcePsi) {
-                is KtPropertyAccessor ->
-                    LightClassUtil.getLightClassAccessorMethod(sourcePsi)
-                is KtFunction ->
-                    LightClassUtil.getLightClassMethod(sourcePsi)
-                else -> null
-            } as? KtLightMethod ?: return null
-            return create(javaPsi, givenParent)
-        }
-    }
-}
diff --git a/uast/uast-kotlin-fir/test/org/jetbrains/kotlin/idea/fir/uast/AbstractFirLegacyUastIdentifiersTest.kt b/uast/uast-kotlin-fir/test/org/jetbrains/kotlin/idea/fir/uast/AbstractFirLegacyUastIdentifiersTest.kt
index e6c4a912bee..61adc52e174 100644
--- a/uast/uast-kotlin-fir/test/org/jetbrains/kotlin/idea/fir/uast/AbstractFirLegacyUastIdentifiersTest.kt
+++ b/uast/uast-kotlin-fir/test/org/jetbrains/kotlin/idea/fir/uast/AbstractFirLegacyUastIdentifiersTest.kt
@@ -14,21 +14,24 @@ import kotlin.io.path.absolute
 abstract class AbstractFirLegacyUastIdentifiersTest : AbstractFirUastIdentifiersTest(), LegacyUastIdentifiersTestBase {
     @OptIn(ExperimentalPathApi::class)
     private val whitelist : Set<String> = setOf(
-        // TODO: need a special handling of members in enum entries. See testEnumValueMembers in FirLegacyUastIdentifiersTestGenerated
-        //   Seems related to KT-45115: in FIR, enum entry init is an anonymous object, and thus members in it are regarded as _local_.
-        //   whereas FIR UAST conversion took a path to look up non-local FIR declaration for now.
-        "uast-kotlin/testData/EnumValueMembers.kt"
+        // TODO: Also failed with FE1.0 UAST
+        "uast-kotlin/testData/DestructuringDeclaration.kt",
+        "uast-kotlin/testData/LambdaReturn.kt",
+        "uast-kotlin/testData/WhenAndDestructing.kt",
+        // TODO: incorrect parent chain for annotations?
+        "uast-kotlin/testData/ParameterPropertyWithAnnotation.kt",
+        "uast-kotlin/testData/PropertyWithAnnotation.kt",
+        "uast-kotlin/testData/SimpleAnnotated.kt",
+        "uast-kotlin/testData/ReceiverFun.kt",
+        // TODO: remaining property accessor conversion in KotlinUSimpleReferenceExpression
+        "uast-kotlin/testData/PropertyInitializer.kt",
     ).mapTo(mutableSetOf()) { Paths.get("..").resolve(it).absolute().normalize().toString() }

     override fun isExpectedToFail(filePath: String): Boolean {
-        // TODO: Implement parent conversion in FIR UAST
-        return true
+        return filePath in whitelist
     }

     override fun check(filePath: String, file: UFile) {
-        if (filePath in whitelist) {
-            return
-        }
         super<LegacyUastIdentifiersTestBase>.check(filePath, file)
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/declaration/facade.comments.fir.txt b/uast/uast-kotlin-fir/testData/declaration/facade.comments.fir.txt
deleted file mode 100644
index 8f249082e74..00000000000
--- a/uast/uast-kotlin-fir/testData/declaration/facade.comments.fir.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-KotlinUFile(
-    FirKotlinUClass(
-        FirKotlinUMethod(
-            UComment(// Single-line comment bound to fun foo)
-        )
-        FirKotlinUMethod(
-            UComment(/*
-             * Multi-line comment bound to extension fun buzz
-             */)
-            KotlinReceiverUParameter(
-            )
-        )
-    )
-)
diff --git a/uast/uast-kotlin-fir/testData/declaration/facade.comments.fe10.txt b/uast/uast-kotlin-fir/testData/declaration/facade.comments.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/declaration/facade.comments.fe10.txt
rename to uast/uast-kotlin-fir/testData/declaration/facade.comments.txt
index 2596e99215b..5b00c9cf37c 100644
--- a/uast/uast-kotlin-fir/testData/declaration/facade.comments.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/facade.comments.txt
@@ -11,4 +11,4 @@ KotlinUFile(
             )
         )
     )
-)
+)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/declaration/facade.log.fir.txt b/uast/uast-kotlin-fir/testData/declaration/facade.log.fir.txt
deleted file mode 100644
index 1e4bf21b5c3..00000000000
--- a/uast/uast-kotlin-fir/testData/declaration/facade.log.fir.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-UFile (package = declaration)
-    UClass (name = Utils)
-        UMethod (name = foo)
-            UBlockExpression
-                UReturnExpression
-                    ULiteralExpression (value = 42)
-        UMethod (name = buzz)
-            UParameter (name = $this$buzz)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
-                UReturnExpression
-                    UPolyadicExpression (operator = +)
-                        UThisExpression (label = null)
-                        ULiteralExpression (value = "... zzz...")
diff --git a/uast/uast-kotlin-fir/testData/declaration/facade.log.fe10.txt b/uast/uast-kotlin-fir/testData/declaration/facade.log.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/declaration/facade.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/declaration/facade.log.txt
index 6fae02834b0..5a288990156 100644
--- a/uast/uast-kotlin-fir/testData/declaration/facade.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/facade.log.txt
@@ -15,4 +15,4 @@ UFile (package = declaration)
                 UReturnExpression
                     UPolyadicExpression (operator = +)
                         UThisExpression (label = null)
-                        ULiteralExpression (value = "... zzz...")
+                        ULiteralExpression (value = "... zzz...")
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/declaration/facade.render.fir.txt b/uast/uast-kotlin-fir/testData/declaration/facade.render.fir.txt
deleted file mode 100644
index 698f1e9fc73..00000000000
--- a/uast/uast-kotlin-fir/testData/declaration/facade.render.fir.txt
+++ /dev/null
@@ -1,10 +0,0 @@
-package declaration
-
-public final class Utils {
-    public static final fun foo() : int {
-        return 42
-    }
-    public static final fun buzz(@org.jetbrains.annotations.NotNull $this$buzz: java.lang.String) : java.lang.String {
-        return this + "... zzz..."
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/declaration/facade.render.fe10.txt b/uast/uast-kotlin-fir/testData/declaration/facade.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/declaration/facade.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/declaration/facade.render.txt
index 75f7f723894..ceefb3941dd 100644
--- a/uast/uast-kotlin-fir/testData/declaration/facade.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/facade.render.txt
@@ -9,4 +9,4 @@ public final class Utils {
     public static final fun buzz(@org.jetbrains.annotations.NotNull $this$buzz: java.lang.String) : java.lang.String {
         return this + "... zzz..."
     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/declaration/labeledExpression.log.fir.txt b/uast/uast-kotlin-fir/testData/declaration/labeledExpression.log.fir.txt
index 3fb04867295..122ed4834dc 100644
--- a/uast/uast-kotlin-fir/testData/declaration/labeledExpression.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/labeledExpression.log.fir.txt
@@ -17,9 +17,29 @@ UFile (package = )
             UParameter (name = other)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                    UIdentifier (Identifier (with))
+                    USimpleNameReferenceExpression (identifier = with, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = other)
+                    ULambdaExpression
+                        UBlockExpression
+                            UReturnExpression
+                                UQualifiedReferenceExpression
+                                    USuperExpression (label = Foo)
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                        UIdentifier (Identifier (foo))
+                                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
         UMethod (name = baz)
             UParameter (name = other)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                    UIdentifier (Identifier (with))
+                    USimpleNameReferenceExpression (identifier = with, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = other)
+                    ULambdaExpression
+                        UBlockExpression
+                            UReturnExpression
+                                UQualifiedReferenceExpression
+                                    UThisExpression (label = Foo)
+                                    USimpleNameReferenceExpression (identifier = p)
diff --git a/uast/uast-kotlin-fir/testData/declaration/labeledExpression.render.fir.txt b/uast/uast-kotlin-fir/testData/declaration/labeledExpression.render.fir.txt
index 1f9d57b34ea..49591caed00 100644
--- a/uast/uast-kotlin-fir/testData/declaration/labeledExpression.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/labeledExpression.render.fir.txt
@@ -14,9 +14,13 @@ public final class Foo : I, Base {
     public fun Foo() = UastEmptyExpression
     public final fun getP() : java.lang.String = UastEmptyExpression
     public final fun bar(@org.jetbrains.annotations.NotNull other: I) : int {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        with(other, {
+            return super.foo()
+        })
     }
     public final fun baz(@org.jetbrains.annotations.NotNull other: I) : java.lang.String {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        with(other, {
+            return this.p
+        })
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/declaration/objects.comments.fir.txt b/uast/uast-kotlin-fir/testData/declaration/objects.comments.fir.txt
index f8a4fdc6800..cca3a34e9ad 100644
--- a/uast/uast-kotlin-fir/testData/declaration/objects.comments.fir.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/objects.comments.fir.txt
@@ -1,35 +1,35 @@
 KotlinUFile(
     UComment(// file comment)
-    FirKotlinUClass(
+    KotlinUClass(
         KotlinUField(
             UComment(// Single-line comment bound to top-level property)
             KotlinUAnonymousClass(
-                FirKotlinUMethod(
+                KotlinUMethod(
                 )
             )
         )
-        FirKotlinUMethod(
+        KotlinUMethod(
             UComment(// Single-line comment bound to top-level property)
         )
-        FirKotlinUMethod(
+        KotlinUMethod(
         )
     )
-    FirKotlinUClass(
+    KotlinUClass(
         UComment(// Single-line comment bound to object)
         KotlinUField(
             UComment(// Single-line comment bound to object)
         )
         KotlinUField(
         )
-        FirKotlinConstructorUMethod(
+        KotlinConstructorUMethod(
         )
-        FirKotlinUMethod(
+        KotlinUMethod(
         )
-        FirKotlinUMethod(
+        KotlinUMethod(
             KotlinUParameter(
             )
         )
-        FirKotlinUMethod(
+        KotlinUMethod(
         )
     )
 )
diff --git a/uast/uast-kotlin-fir/testData/declaration/objects.log.fir.txt b/uast/uast-kotlin-fir/testData/declaration/objects.log.fir.txt
index 64bd80218ca..30551cd0f47 100644
--- a/uast/uast-kotlin-fir/testData/declaration/objects.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/objects.log.fir.txt
@@ -8,22 +8,32 @@ UFile (package = )
                 UClass (name = null)
                     UMethod (name = run)
                         UBlockExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (println))
+                                USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                                ULiteralExpression (value = "I'm running")
         UMethod (name = getTopRunnable)
         UMethod (name = main)
             UBlockExpression
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = RunnableManager)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (register))
+                        USimpleNameReferenceExpression (identifier = register, resolvesTo = null)
+                        USimpleNameReferenceExpression (identifier = topRunnable)
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = RunnableManager)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (runAll))
+                        USimpleNameReferenceExpression (identifier = runAll, resolvesTo = null)
     UClass (name = RunnableManager)
         UField (name = INSTANCE)
             UAnnotation (fqName = null)
         UField (name = tasks)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                UIdentifier (Identifier (mutableListOf))
+                USimpleNameReferenceExpression (identifier = mutableListOf, resolvesTo = null)
         UMethod (name = RunnableManager)
         UMethod (name = getTasks)
         UMethod (name = register)
@@ -32,12 +42,20 @@ UFile (package = )
             UBlockExpression
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = tasks)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (add))
+                        USimpleNameReferenceExpression (identifier = add, resolvesTo = null)
+                        USimpleNameReferenceExpression (identifier = runnable)
         UMethod (name = runAll)
             UBlockExpression
                 UForEachExpression
                     UastEmptyExpression
                     UBlockExpression
                         UQualifiedReferenceExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (Thread))
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                                USimpleNameReferenceExpression (identifier = t)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (start))
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/declaration/objects.render.fir.txt b/uast/uast-kotlin-fir/testData/declaration/objects.render.fir.txt
index 1f792f227f4..092375c0725 100644
--- a/uast/uast-kotlin-fir/testData/declaration/objects.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/declaration/objects.render.fir.txt
@@ -9,22 +9,22 @@ public final class ObjectsKt {
     }
     public static final fun getTopRunnable() : java.lang.Runnable = UastEmptyExpression
     public static final fun main() : void {
-        RunnableManager.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        RunnableManager.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        RunnableManager.register(topRunnable)
+        RunnableManager.runAll()
     }
 }

 public final class RunnableManager {
     @null public static final var INSTANCE: RunnableManager
-    @org.jetbrains.annotations.NotNull private final var tasks: java.util.List<java.lang.Runnable> = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    @org.jetbrains.annotations.NotNull private final var tasks: java.util.List<java.lang.Runnable> = mutableListOf()
     private fun RunnableManager() = UastEmptyExpression
     public final fun getTasks() : java.util.List<java.lang.Runnable> = UastEmptyExpression
     public final fun register(@org.jetbrains.annotations.NotNull runnable: java.lang.Runnable) : void {
-        tasks.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        tasks.add(runnable)
     }
     public final fun runAll() : void {
         for (t : UastEmptyExpression) {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
+            <anonymous class>(t).<anonymous class>()
         }
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.fir.txt
deleted file mode 100644
index 2c52d2d27cb..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.fir.txt
+++ /dev/null
@@ -1,30 +0,0 @@
-foo -> UMethod (name = foo)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-    a -> ULocalVariable (name = a)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-    b -> ULocalVariable (name = b)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-    b -> USimpleNameReferenceExpression (identifier = b)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    > -> USimpleNameReferenceExpression (identifier = >)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    b -> USimpleNameReferenceExpression (identifier = b)
-    c -> ULocalVariable (name = c)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    ?: -> USimpleNameReferenceExpression (identifier = ?:)
-    b -> USimpleNameReferenceExpression (identifier = b)
-annotatedSwitch -> UMethod (name = annotatedSwitch)
-str -> UParameter (name = str)
-String -> USimpleNameReferenceExpression (identifier = String)
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-str -> USimpleNameReferenceExpression (identifier = str)
-isBlank -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-str -> USimpleNameReferenceExpression (identifier = str)
-isNotEmpty -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-!= -> USimpleNameReferenceExpression (identifier = !=)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.txt
index 0bd1d302550..0040f509cd1 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.identifiers.txt
@@ -27,4 +27,4 @@ str -> USimpleNameReferenceExpression (identifier = str)
 isBlank -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 str -> USimpleNameReferenceExpression (identifier = str)
 isNotEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
-!= -> USimpleNameReferenceExpression (identifier = !=)
+!= -> USimpleNameReferenceExpression (identifier = !=)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.fir.txt
deleted file mode 100644
index 2f2ba8b9d20..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-isBlank() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-str -> USimpleNameReferenceExpression (identifier = str) from KtNameReferenceExpression
-isBlank -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-isNotEmpty() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-str -> USimpleNameReferenceExpression (identifier = str) from KtNameReferenceExpression
-isNotEmpty -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.txt
index e699bf04012..840f6c7ba7f 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotatedExpressions.refNames.txt
@@ -22,4 +22,4 @@ str -> USimpleNameReferenceExpression (identifier = str) from KtNameReferenceExp
 isBlank -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
 isNotEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtDotQualifiedExpression
 str -> USimpleNameReferenceExpression (identifier = str) from KtNameReferenceExpression
-isNotEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+isNotEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.identifiers.fir.txt
index 6c50bce7ff7..0687609d10b 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.identifiers.fir.txt
@@ -1,28 +1,28 @@
 Annotation -> UClass (name = Annotation)
 strings -> UAnnotationMethod (name = strings)
 String -> USimpleNameReferenceExpression (identifier = String)
-Annotation -> USimpleNameReferenceExpression (identifier = Annotation)
+Annotation -> UAnnotation (fqName = Annotation)
 A -> UClass (name = A)
 AnnotationInner -> UClass (name = AnnotationInner)
 value -> UAnnotationMethod (name = value)
 Annotation -> USimpleNameReferenceExpression (identifier = Annotation)
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray)
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+AnnotationArray -> UAnnotation (fqName = AnnotationArray)
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
 B1 -> UClass (name = B1)
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray)
+AnnotationArray -> UAnnotation (fqName = AnnotationArray)
 value -> USimpleNameReferenceExpression (identifier = value)
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2))
 B2 -> UClass (name = B2)
 AnnotationArray -> UClass (name = AnnotationArray)
 value -> UAnnotationMethod (name = value)
 Annotation -> USimpleNameReferenceExpression (identifier = Annotation)
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray)
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+AnnotationArray -> UAnnotation (fqName = AnnotationArray)
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
 strings -> USimpleNameReferenceExpression (identifier = strings)
-arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+arrayOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
 C -> UClass (name = C)
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray)
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+AnnotationArray -> UAnnotation (fqName = AnnotationArray)
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
 strings -> USimpleNameReferenceExpression (identifier = strings)
 [ -> UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 2))
 C2 -> UClass (name = C2)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.refNames.fir.txt
index eb8e320458c..427695e2ebe 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.refNames.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationComplex.refNames.fir.txt
@@ -1,16 +1,16 @@
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
+Annotation -> UAnnotation (fqName = Annotation) from KtNameReferenceExpression
 Annotation -> USimpleNameReferenceExpression (identifier = Annotation) from KtNameReferenceExpression
-Annotation -> USimpleNameReferenceExpression (identifier = Annotation) from KtNameReferenceExpression
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray) from KtNameReferenceExpression
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray) from KtNameReferenceExpression
+AnnotationArray -> UAnnotation (fqName = AnnotationArray) from KtNameReferenceExpression
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
+AnnotationArray -> UAnnotation (fqName = AnnotationArray) from KtNameReferenceExpression
 value -> USimpleNameReferenceExpression (identifier = value) from KtNameReferenceExpression
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) from KtNameReferenceExpression
 Annotation -> USimpleNameReferenceExpression (identifier = Annotation) from KtNameReferenceExpression
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray) from KtNameReferenceExpression
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
+AnnotationArray -> UAnnotation (fqName = AnnotationArray) from KtNameReferenceExpression
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
 strings -> USimpleNameReferenceExpression (identifier = strings) from KtNameReferenceExpression
-arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-AnnotationArray -> USimpleNameReferenceExpression (identifier = AnnotationArray) from KtNameReferenceExpression
-Annotation -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
+arrayOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) from KtNameReferenceExpression
+AnnotationArray -> UAnnotation (fqName = AnnotationArray) from KtNameReferenceExpression
+Annotation -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
 strings -> USimpleNameReferenceExpression (identifier = strings) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.identifiers.fir.txt
index 9647fe34f77..ab827d550a1 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.identifiers.fir.txt
@@ -16,26 +16,26 @@ Int -> USimpleNameReferenceExpression (identifier = Int)
 SuppressLint -> UClass (name = SuppressLint)
 value -> UAnnotationMethod (name = value)
 String -> USimpleNameReferenceExpression (identifier = String)
-RequiresPermission -> USimpleNameReferenceExpression (identifier = RequiresPermission)
+RequiresPermission -> UAnnotation (fqName = RequiresPermission)
 anyOf -> USimpleNameReferenceExpression (identifier = anyOf)
-intArrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-IntRange -> USimpleNameReferenceExpression (identifier = IntRange)
+intArrayOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))
+IntRange -> UAnnotation (fqName = IntRange)
 from -> USimpleNameReferenceExpression (identifier = from)
 to -> USimpleNameReferenceExpression (identifier = to)
-WithDefaultValue -> USimpleNameReferenceExpression (identifier = WithDefaultValue)
-SuppressLint -> USimpleNameReferenceExpression (identifier = SuppressLint)
+WithDefaultValue -> UAnnotation (fqName = WithDefaultValue)
+SuppressLint -> UAnnotation (fqName = SuppressLint)
 foo -> UMethod (name = foo)
 Int -> USimpleNameReferenceExpression (identifier = Int)
-IntRange -> USimpleNameReferenceExpression (identifier = IntRange)
-SuppressLint -> USimpleNameReferenceExpression (identifier = SuppressLint)
+IntRange -> UAnnotation (fqName = IntRange)
+SuppressLint -> UAnnotation (fqName = SuppressLint)
 bar -> UMethod (name = bar)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
-RequiresPermission -> USimpleNameReferenceExpression (identifier = RequiresPermission)
+RequiresPermission -> UAnnotation (fqName = RequiresPermission)
 anyOf -> USimpleNameReferenceExpression (identifier = anyOf)
 [ -> UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3))
 fooWithArrLiteral -> UMethod (name = fooWithArrLiteral)
 Int -> USimpleNameReferenceExpression (identifier = Int)
-RequiresStrPermission -> USimpleNameReferenceExpression (identifier = RequiresStrPermission)
+RequiresStrPermission -> UAnnotation (fqName = RequiresStrPermission)
 strs -> USimpleNameReferenceExpression (identifier = strs)
 [ -> UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3))
 fooWithStrArrLiteral -> UMethod (name = fooWithStrArrLiteral)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.refNames.fir.txt
index 876a29947ba..dda17356dc9 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.refNames.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/AnnotationParameters.refNames.fir.txt
@@ -5,21 +5,21 @@ Array -> USimpleNameReferenceExpression (identifier = Array) from KtNameReferenc
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-RequiresPermission -> USimpleNameReferenceExpression (identifier = RequiresPermission) from KtNameReferenceExpression
+RequiresPermission -> UAnnotation (fqName = RequiresPermission) from KtNameReferenceExpression
 anyOf -> USimpleNameReferenceExpression (identifier = anyOf) from KtNameReferenceExpression
-intArrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-IntRange -> USimpleNameReferenceExpression (identifier = IntRange) from KtNameReferenceExpression
+intArrayOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) from KtNameReferenceExpression
+IntRange -> UAnnotation (fqName = IntRange) from KtNameReferenceExpression
 from -> USimpleNameReferenceExpression (identifier = from) from KtNameReferenceExpression
 to -> USimpleNameReferenceExpression (identifier = to) from KtNameReferenceExpression
-WithDefaultValue -> USimpleNameReferenceExpression (identifier = WithDefaultValue) from KtNameReferenceExpression
-SuppressLint -> USimpleNameReferenceExpression (identifier = SuppressLint) from KtNameReferenceExpression
+WithDefaultValue -> UAnnotation (fqName = WithDefaultValue) from KtNameReferenceExpression
+SuppressLint -> UAnnotation (fqName = SuppressLint) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-IntRange -> USimpleNameReferenceExpression (identifier = IntRange) from KtNameReferenceExpression
-SuppressLint -> USimpleNameReferenceExpression (identifier = SuppressLint) from KtNameReferenceExpression
+IntRange -> UAnnotation (fqName = IntRange) from KtNameReferenceExpression
+SuppressLint -> UAnnotation (fqName = SuppressLint) from KtNameReferenceExpression
 Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-RequiresPermission -> USimpleNameReferenceExpression (identifier = RequiresPermission) from KtNameReferenceExpression
+RequiresPermission -> UAnnotation (fqName = RequiresPermission) from KtNameReferenceExpression
 anyOf -> USimpleNameReferenceExpression (identifier = anyOf) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-RequiresStrPermission -> USimpleNameReferenceExpression (identifier = RequiresStrPermission) from KtNameReferenceExpression
+RequiresStrPermission -> UAnnotation (fqName = RequiresStrPermission) from KtNameReferenceExpression
 strs -> USimpleNameReferenceExpression (identifier = strs) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.fir.txt
deleted file mode 100644
index ec6d66d2ef5..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.fir.txt
+++ /dev/null
@@ -1,35 +0,0 @@
-java -> USimpleNameReferenceExpression (identifier = java)
-io -> USimpleNameReferenceExpression (identifier = io)
-Closeable -> USimpleNameReferenceExpression (identifier = Closeable)
-java -> USimpleNameReferenceExpression (identifier = java)
-io -> USimpleNameReferenceExpression (identifier = io)
-InputStream -> USimpleNameReferenceExpression (identifier = InputStream)
-foo -> UMethod (name = foo)
-    runnable -> ULocalVariable (name = runnable)
-    object -> UClass (name = null)
-    Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-    run -> UMethod (name = run)
-    runnable -> USimpleNameReferenceExpression (identifier = runnable)
-    run -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    runnable2 -> ULocalVariable (name = runnable2)
-    Runnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    runnable2 -> USimpleNameReferenceExpression (identifier = runnable2)
-    run -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    closeableRunnable -> ULocalVariable (name = closeableRunnable)
-    object -> UClass (name = null)
-    Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-    Closeable -> USimpleNameReferenceExpression (identifier = Closeable)
-    close -> UMethod (name = close)
-    run -> UMethod (name = run)
-    runnableIs -> ULocalVariable (name = runnableIs)
-    object -> UClass (name = null)
-    InputStream -> USimpleNameReferenceExpression (identifier = InputStream)
-    Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-    read -> UMethod (name = read)
-    Int -> USimpleNameReferenceExpression (identifier = Int)
-    run -> UMethod (name = run)
-withErr -> UMethod (name = withErr)
-    runnable -> ULocalVariable (name = runnable)
-    object -> UastEmptyExpression
-    Runnable -> null
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.txt
index 3baab0d8d46..e8d14482bcc 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.identifiers.txt
@@ -32,4 +32,4 @@ foo -> UMethod (name = foo)
 withErr -> UMethod (name = withErr)
     runnable -> ULocalVariable (name = runnable)
     object -> UastEmptyExpression
-    Runnable -> null
+    Runnable -> null
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.fir.txt
deleted file mode 100644
index a150b8c8a1d..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.fir.txt
+++ /dev/null
@@ -1,25 +0,0 @@
-Closeable -> USimpleNameReferenceExpression (identifier = Closeable) from KtDotQualifiedExpression
-io -> USimpleNameReferenceExpression (identifier = io) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-io -> USimpleNameReferenceExpression (identifier = io) from KtNameReferenceExpression
-Closeable -> USimpleNameReferenceExpression (identifier = Closeable) from KtNameReferenceExpression
-InputStream -> USimpleNameReferenceExpression (identifier = InputStream) from KtDotQualifiedExpression
-io -> USimpleNameReferenceExpression (identifier = io) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-io -> USimpleNameReferenceExpression (identifier = io) from KtNameReferenceExpression
-InputStream -> USimpleNameReferenceExpression (identifier = InputStream) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-run() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-runnable -> USimpleNameReferenceExpression (identifier = runnable) from KtNameReferenceExpression
-run -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Runnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-run() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-runnable2 -> USimpleNameReferenceExpression (identifier = runnable2) from KtNameReferenceExpression
-run -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-Closeable -> USimpleNameReferenceExpression (identifier = Closeable) from KtNameReferenceExpression
-InputStream -> USimpleNameReferenceExpression (identifier = InputStream) from KtObjectLiteralExpression
-InputStream -> USimpleNameReferenceExpression (identifier = InputStream) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.txt
index 9667b912c45..caa1de3c94f 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Anonymous.refNames.txt
@@ -22,4 +22,4 @@ Closeable -> USimpleNameReferenceExpression (identifier = Closeable) from KtName
 InputStream -> USimpleNameReferenceExpression (identifier = InputStream) from KtObjectLiteralExpression
 InputStream -> UObjectLiteralExpression from KtNameReferenceExpression
 Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
+Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.fir.txt
deleted file mode 100644
index a2698bd3429..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.fir.txt
+++ /dev/null
@@ -1,15 +0,0 @@
-main -> UMethod (name = main)
-args -> UParameter (name = args)
-Array -> USimpleNameReferenceExpression (identifier = Array)
-String -> USimpleNameReferenceExpression (identifier = String)
-    TestUsed -> UClass (name = TestUsed)
-    parameter -> UParameter (name = parameter)
-    CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence)
-    Used -> UClass (name = Used)
-    parameter -> UParameter (name = parameter)
-    Any -> USimpleNameReferenceExpression (identifier = Any)
-    object -> UClass (name = Companion)
-    Any -> USimpleNameReferenceExpression (identifier = Any)
-    doStuff1 -> UMethod (name = doStuff1)
-    Used -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    this -> USimpleNameReferenceExpression (identifier = this)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.txt
similarity index 92%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.txt
index 533760a856e..b6a6696fcb6 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.identifiers.txt
@@ -12,4 +12,4 @@ String -> USimpleNameReferenceExpression (identifier = String)
     Any -> USimpleNameReferenceExpression (identifier = Any)
     doStuff1 -> UMethod (name = doStuff1)
     Used -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
-    this -> USimpleNameReferenceExpression (identifier = this)
+    this -> USimpleNameReferenceExpression (identifier = this)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.fir.txt
deleted file mode 100644
index 45572ab8ad3..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.fir.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-Array -> USimpleNameReferenceExpression (identifier = Array) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-Used -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.txt
similarity index 90%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.txt
index 33e11153a83..94e157555ad 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/BrokenMethod.refNames.txt
@@ -3,4 +3,4 @@ String -> USimpleNameReferenceExpression (identifier = String) from KtNameRefere
 CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
 Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
 Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-Used -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
+Used -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.fir.txt
deleted file mode 100644
index 0c9c67fd80c..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Test -> USimpleNameReferenceExpression (identifier = Test)
-A -> UClass (name = A)
-MyAnnotation -> UClass (name = MyAnnotation)
-text -> UAnnotationMethod (name = text)
-String -> USimpleNameReferenceExpression (identifier = String)
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation)
-B -> UClass (name = B)
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation)
-InB -> UClass (name = InB)
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation)
-object -> UClass (name = Companion)
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation)
-Obj -> UClass (name = Obj)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.txt
similarity index 94%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.txt
index 991b620ac1d..56051e30f1e 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.identifiers.txt
@@ -10,4 +10,4 @@ InB -> UClass (name = InB)
 MyAnnotation -> UAnnotation (fqName = MyAnnotation)
 object -> UClass (name = Companion)
 MyAnnotation -> UAnnotation (fqName = MyAnnotation)
-Obj -> UClass (name = Obj)
+Obj -> UClass (name = Obj)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.fir.txt
deleted file mode 100644
index a7c91e79682..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.fir.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-Test -> USimpleNameReferenceExpression (identifier = Test) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation) from KtNameReferenceExpression
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation) from KtNameReferenceExpression
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation) from KtNameReferenceExpression
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.txt
index 69653df4a9f..6342735b00b 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ClassAnnotation.refNames.txt
@@ -3,4 +3,4 @@ String -> USimpleNameReferenceExpression (identifier = String) from KtNameRefere
 MyAnnotation -> UAnnotation (fqName = MyAnnotation) from KtNameReferenceExpression
 MyAnnotation -> UAnnotation (fqName = MyAnnotation) from KtNameReferenceExpression
 MyAnnotation -> UAnnotation (fqName = MyAnnotation) from KtNameReferenceExpression
-MyAnnotation -> UAnnotation (fqName = MyAnnotation) from KtNameReferenceExpression
+MyAnnotation -> UAnnotation (fqName = MyAnnotation) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.identifiers.fir.txt
index c59a156fff7..3ec4b3c9ff8 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.identifiers.fir.txt
@@ -2,7 +2,7 @@ topLevelProperty -> UField (name = topLevelProperty)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 topLevelFun -> UMethod (name = topLevelFun)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 TopLevelClass -> UClass (name = TopLevelClass)
 constructor -> UMethod (name = TopLevelClass)
 t -> UParameter (name = t)
@@ -11,23 +11,23 @@ classLevelProperty -> UField (name = classLevelProperty)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 classLevelMethod -> UMethod (name = classLevelMethod)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 NestedClass -> UClass (name = NestedClass)
 funPlainCall -> UMethod (name = funPlainCall)
 a -> UParameter (name = a)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 funNamedArgumentsCall -> UMethod (name = funNamedArgumentsCall)
 a -> UParameter (name = a)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 func -> UMethod (name = func)
 a -> UParameter (name = a)
 Int -> USimpleNameReferenceExpression (identifier = Int)
-    funPlainCall -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    funNamedArgumentsCall -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    funPlainCall -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    funNamedArgumentsCall -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     a -> USimpleNameReferenceExpression (identifier = a)
     localValueDefinition -> ULocalVariable (name = localValueDefinition)
 MyBooleanEnum -> UClass (name = MyBooleanEnum)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.fir.txt
deleted file mode 100644
index d61bf84ee51..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.fir.txt
+++ /dev/null
@@ -1,17 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-funPlainCall -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-funNamedArgumentsCall -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.txt
index 2f82ae7bdf1..e9f72386183 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/CommentOwners.refNames.txt
@@ -14,4 +14,4 @@ TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 funPlainCall -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 funNamedArgumentsCall -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
+a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.fir.txt
deleted file mode 100644
index 29d6a7b4239..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.fir.txt
+++ /dev/null
@@ -1,78 +0,0 @@
-Margherita -> USimpleNameReferenceExpression (identifier = Margherita)
-Pizza -> UClass (name = Pizza)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-size -> UMethod (name = getSize)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-String -> USimpleNameReferenceExpression (identifier = String)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-IllegalStateException -> USimpleNameReferenceExpression (identifier = IllegalStateException)
-ClassCastException -> USimpleNameReferenceExpression (identifier = ClassCastException)
-getName -> UMethod (name = getName)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-String -> USimpleNameReferenceExpression (identifier = String)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-ingredient -> USimpleNameReferenceExpression (identifier = ingredient)
-kotlin -> USimpleNameReferenceExpression (identifier = kotlin)
-NotImplementedError -> USimpleNameReferenceExpression (identifier = NotImplementedError)
-Margherita -> USimpleNameReferenceExpression (identifier = Margherita)
-contains -> USimpleNameReferenceExpression (identifier = contains)
-contains -> UMethod (name = contains)
-ingredient -> UParameter (name = ingredient)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> UClass (name = Ingredient)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-P -> USimpleNameReferenceExpression (identifier = P)
-self -> USimpleNameReferenceExpression (identifier = self)
-Builder -> UClass (name = Builder)
-P -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Builder -> USimpleNameReferenceExpression (identifier = Builder)
-P -> USimpleNameReferenceExpression (identifier = P)
-ingredients -> UField (name = ingredients)
-MutableSet -> USimpleNameReferenceExpression (identifier = MutableSet)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-mutableSetOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-ingredient -> USimpleNameReferenceExpression (identifier = ingredient)
-ingredients -> USimpleNameReferenceExpression (identifier = ingredients)
-P -> USimpleNameReferenceExpression (identifier = P)
-addIngredient -> UMethod (name = addIngredient)
-ingredient -> UParameter (name = ingredient)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-P -> USimpleNameReferenceExpression (identifier = P)
-build -> UMethod (name = build)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-self -> UMethod (name = self)
-P -> USimpleNameReferenceExpression (identifier = P)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-size -> USimpleNameReferenceExpression (identifier = size)
-Margherita -> USimpleNameReferenceExpression (identifier = Margherita)
-Margherita -> UClass (name = Margherita)
-size -> UParameter (name = size)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-getName -> UMethod (name = getName)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-String -> USimpleNameReferenceExpression (identifier = String)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-String -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-ingredient -> USimpleNameReferenceExpression (identifier = ingredient)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-contains -> UMethod (name = contains)
-ingredient -> UParameter (name = ingredient)
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.txt
index ab3b4127f07..4b91ed36a86 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.identifiers.txt
@@ -75,4 +75,4 @@ contains -> UMethod (name = contains)
 ingredient -> UParameter (name = ingredient)
 Pizza -> USimpleNameReferenceExpression (identifier = Pizza)
 Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient)
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean)
+Boolean -> USimpleNameReferenceExpression (identifier = Boolean)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.fir.txt
deleted file mode 100644
index f9a68706f1a..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.fir.txt
+++ /dev/null
@@ -1,40 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> UQualifiedReferenceExpression from KDocName
-lang -> UQualifiedReferenceExpression from KDocName
-IllegalStateException -> UQualifiedReferenceExpression from KDocName
-lang -> UQualifiedReferenceExpression from KDocName
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Ingredient -> UQualifiedReferenceExpression from KDocName
-NotImplementedError -> UQualifiedReferenceExpression from KDocName
-contains -> UQualifiedReferenceExpression from KDocName
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient) from KtNameReferenceExpression
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean) from KtNameReferenceExpression
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
-Builder -> USimpleNameReferenceExpression (identifier = Builder) from KtNameReferenceExpression
-P -> USimpleNameReferenceExpression (identifier = P) from KtNameReferenceExpression
-MutableSet -> USimpleNameReferenceExpression (identifier = MutableSet) from KtNameReferenceExpression
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient) from KtNameReferenceExpression
-mutableSetOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient) from KtNameReferenceExpression
-P -> USimpleNameReferenceExpression (identifier = P) from KtNameReferenceExpression
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
-P -> USimpleNameReferenceExpression (identifier = P) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String("Margherita") -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Ingredient -> UQualifiedReferenceExpression from KDocName
-Ingredient -> UQualifiedReferenceExpression from KDocName
-Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
-Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient) from KtNameReferenceExpression
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.txt
index 9c53f650b6a..4e43220b3d8 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Comments.refNames.txt
@@ -37,4 +37,4 @@ Ingredient -> UQualifiedReferenceExpression from KDocName
 Ingredient -> UQualifiedReferenceExpression from KDocName
 Pizza -> USimpleNameReferenceExpression (identifier = Pizza) from KtNameReferenceExpression
 Ingredient -> USimpleNameReferenceExpression (identifier = Ingredient) from KtNameReferenceExpression
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean) from KtNameReferenceExpression
+Boolean -> USimpleNameReferenceExpression (identifier = Boolean) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.fir.txt
deleted file mode 100644
index bb59f02fbd0..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.fir.txt
+++ /dev/null
@@ -1,21 +0,0 @@
-Base -> UClass (name = Base)
-print -> UMethod (name = print)
-BaseImpl -> UClass (name = BaseImpl)
-x -> UParameter (name = x)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-Base -> USimpleNameReferenceExpression (identifier = Base)
-print -> UMethod (name = print)
-    print -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    x -> USimpleNameReferenceExpression (identifier = x)
-Derived -> UClass (name = Derived)
-b -> UParameter (name = b)
-Base -> USimpleNameReferenceExpression (identifier = Base)
-Base -> USimpleNameReferenceExpression (identifier = Base)
-createBase -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence)
-createBase -> UMethod (name = createBase)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-Base -> USimpleNameReferenceExpression (identifier = Base)
-    BaseImpl -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    i -> USimpleNameReferenceExpression (identifier = i)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.txt
similarity index 94%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.txt
index ce7b546a0d4..9bee0ac7378 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.identifiers.txt
@@ -18,4 +18,4 @@ i -> UParameter (name = i)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Base -> USimpleNameReferenceExpression (identifier = Base)
     BaseImpl -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
-    i -> USimpleNameReferenceExpression (identifier = i)
+    i -> USimpleNameReferenceExpression (identifier = i)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.fir.txt
deleted file mode 100644
index 6e8dc79583f..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.fir.txt
+++ /dev/null
@@ -1,12 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Base -> USimpleNameReferenceExpression (identifier = Base) from KtNameReferenceExpression
-print -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
-Base -> USimpleNameReferenceExpression (identifier = Base) from KtNameReferenceExpression
-Base -> USimpleNameReferenceExpression (identifier = Base) from KtNameReferenceExpression
-createBase -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Base -> USimpleNameReferenceExpression (identifier = Base) from KtNameReferenceExpression
-BaseImpl -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.txt
index 032043a9c95..a3f9fdd3ee7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ConstructorDelegate.refNames.txt
@@ -9,4 +9,4 @@ CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 Base -> USimpleNameReferenceExpression (identifier = Base) from KtNameReferenceExpression
 BaseImpl -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
+i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.fir.txt
deleted file mode 100644
index f7d406e487e..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.fir.txt
+++ /dev/null
@@ -1,80 +0,0 @@
-A -> UClass (name = A)
-str -> UParameter (name = str)
-String -> USimpleNameReferenceExpression (identifier = String)
-constructor -> UMethod (name = A)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-this -> [!] UnknownKotlinExpression (CONSTRUCTOR_DELEGATION_REFERENCE)
-i -> USimpleNameReferenceExpression (identifier = i)
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-AWithInit -> UClass (name = AWithInit)
-str -> UParameter (name = str)
-String -> USimpleNameReferenceExpression (identifier = String)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-constructor -> UMethod (name = AWithInit)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-this -> [!] UnknownKotlinExpression (CONSTRUCTOR_DELEGATION_REFERENCE)
-i -> USimpleNameReferenceExpression (identifier = i)
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-AWith2Init -> UClass (name = AWith2Init)
-str -> UParameter (name = str)
-String -> USimpleNameReferenceExpression (identifier = String)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-constructor -> UMethod (name = AWith2Init)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-this -> [!] UnknownKotlinExpression (CONSTRUCTOR_DELEGATION_REFERENCE)
-i -> USimpleNameReferenceExpression (identifier = i)
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-AOnlyInit -> UClass (name = AOnlyInit)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-AWithSecondary -> UClass (name = AWithSecondary)
-a -> UField (name = a)
-String -> USimpleNameReferenceExpression (identifier = String)
-constructor -> UMethod (name = AWithSecondary)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    i -> USimpleNameReferenceExpression (identifier = i)
-    toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-constructor -> UMethod (name = AWithSecondary)
-s -> UParameter (name = s)
-String -> USimpleNameReferenceExpression (identifier = String)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    s -> USimpleNameReferenceExpression (identifier = s)
-AWithSecondaryInit -> UClass (name = AWithSecondaryInit)
-a -> UField (name = a)
-String -> USimpleNameReferenceExpression (identifier = String)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-constructor -> UMethod (name = AWithSecondaryInit)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    i -> USimpleNameReferenceExpression (identifier = i)
-    toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-constructor -> UMethod (name = AWithSecondaryInit)
-s -> UParameter (name = s)
-String -> USimpleNameReferenceExpression (identifier = String)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    s -> USimpleNameReferenceExpression (identifier = s)
-    local -> ULocalVariable (name = local)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    s -> USimpleNameReferenceExpression (identifier = s)
-    local -> USimpleNameReferenceExpression (identifier = local)
-    toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-AWithFieldInit -> UClass (name = AWithFieldInit)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-a -> UField (name = a)
-String -> USimpleNameReferenceExpression (identifier = String)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    i -> USimpleNameReferenceExpression (identifier = i)
-    toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.txt
index 0685e7136d3..e273fa09e2f 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.identifiers.txt
@@ -77,4 +77,4 @@ String -> USimpleNameReferenceExpression (identifier = String)
     a -> USimpleNameReferenceExpression (identifier = a)
     = -> USimpleNameReferenceExpression (identifier = =)
     i -> USimpleNameReferenceExpression (identifier = i)
-    toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.fir.txt
deleted file mode 100644
index 3078763ebcc..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.fir.txt
+++ /dev/null
@@ -1,50 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-s -> USimpleNameReferenceExpression (identifier = s) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-s -> USimpleNameReferenceExpression (identifier = s) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-s -> USimpleNameReferenceExpression (identifier = s) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-local -> USimpleNameReferenceExpression (identifier = local) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.txt
index debcfaa0f7f..aa2b57f7179 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Constructors.refNames.txt
@@ -47,4 +47,4 @@ String -> USimpleNameReferenceExpression (identifier = String) from KtNameRefere
 a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
 toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtDotQualifiedExpression
 i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.identifiers.fir.txt
index eb272ae8f4f..b3ce5db25bd 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.identifiers.fir.txt
@@ -7,10 +7,10 @@ z -> UParameter (name = z)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Some -> UClass (name = Some)
 delegate -> UMethod (name = getDelegate)
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    MyColor -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3))
 lambda -> UField (name = lambda)
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    MyColor -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3))
 nonLazy -> UField (name = nonLazy)
-MyColor -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3))
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.fir.txt
deleted file mode 100644
index 95f0396e8b2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.fir.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-MyColor -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-MyColor -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-MyColor -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.txt
similarity index 93%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.txt
index 52d0a353385..8c49333f630 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Delegate.refNames.txt
@@ -5,4 +5,4 @@ lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) from KtNameReferenceExpression
 lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) from KtNameReferenceExpression
-MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) from KtNameReferenceExpression
+MyColor -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.identifiers.fir.txt
index 39551bd8be4..ce759200c76 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.identifiers.fir.txt
@@ -2,7 +2,7 @@ test -> USimpleNameReferenceExpression (identifier = test)
 pkg -> USimpleNameReferenceExpression (identifier = pkg)
 Test -> UClass (name = Test)
 test1 -> UMethod (name = test1)
-Deprecated -> USimpleNameReferenceExpression (identifier = Deprecated)
+Deprecated -> UAnnotation (fqName = kotlin.Deprecated)
 level -> USimpleNameReferenceExpression (identifier = level)
 DeprecationLevel -> USimpleNameReferenceExpression (identifier = DeprecationLevel)
 HIDDEN -> USimpleNameReferenceExpression (identifier = HIDDEN)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.fir.txt
deleted file mode 100644
index 044c3fe608b..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.fir.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-pkg -> USimpleNameReferenceExpression (identifier = pkg) from KtDotQualifiedExpression
-test -> USimpleNameReferenceExpression (identifier = test) from KtNameReferenceExpression
-pkg -> USimpleNameReferenceExpression (identifier = pkg) from KtNameReferenceExpression
-Deprecated -> USimpleNameReferenceExpression (identifier = Deprecated) from KtNameReferenceExpression
-level -> USimpleNameReferenceExpression (identifier = level) from KtNameReferenceExpression
-HIDDEN -> USimpleNameReferenceExpression (identifier = HIDDEN) from KtDotQualifiedExpression
-DeprecationLevel -> USimpleNameReferenceExpression (identifier = DeprecationLevel) from KtNameReferenceExpression
-HIDDEN -> USimpleNameReferenceExpression (identifier = HIDDEN) from KtNameReferenceExpression
-message -> USimpleNameReferenceExpression (identifier = message) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.txt
index 82902af0e52..b8aeb8bcb08 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DeprecatedHidden.refNames.txt
@@ -6,4 +6,4 @@ level -> USimpleNameReferenceExpression (identifier = level) from KtNameReferenc
 HIDDEN -> USimpleNameReferenceExpression (identifier = HIDDEN) from KtDotQualifiedExpression
 DeprecationLevel -> USimpleNameReferenceExpression (identifier = DeprecationLevel) from KtNameReferenceExpression
 HIDDEN -> USimpleNameReferenceExpression (identifier = HIDDEN) from KtNameReferenceExpression
-message -> USimpleNameReferenceExpression (identifier = message) from KtNameReferenceExpression
+message -> USimpleNameReferenceExpression (identifier = message) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.identifiers.fir.txt
index 2f912619361..13d7fa17eee 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.identifiers.fir.txt
@@ -4,7 +4,7 @@ Any -> USimpleNameReferenceExpression (identifier = Any)
     a -> ULocalVariable (name = a)
     b -> ULocalVariable (name = b)
     to -> USimpleNameReferenceExpression (identifier = to)
-    Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
+    Suppress -> UAnnotation (fqName = null)
     k -> ULocalVariable (name = k)
     v -> ULocalVariable (name = v)
     data -> USimpleNameReferenceExpression (identifier = data)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.refNames.fir.txt
index ec71a270213..1d54ea6bfdf 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.refNames.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/DestructuringDeclaration.refNames.fir.txt
@@ -1,6 +1,6 @@
 Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
 to -> USimpleNameReferenceExpression (identifier = to) from KtOperationReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
+Suppress -> UAnnotation (fqName = null) from KtNameReferenceExpression
 data -> USimpleNameReferenceExpression (identifier = data) from KtNameReferenceExpression
 Pair -> USimpleNameReferenceExpression (identifier = Pair) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.fir.txt
deleted file mode 100644
index 46c3fc1e2e2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-foo -> UMethod (name = foo)
-bar -> UParameter (name = bar)
-String -> USimpleNameReferenceExpression (identifier = String)
-String -> USimpleNameReferenceExpression (identifier = String)
-bar -> UMethod (name = bar)
-baz -> UMethod (name = baz)
-String -> USimpleNameReferenceExpression (identifier = String)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    ?: -> USimpleNameReferenceExpression (identifier = ?:)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    ?: -> USimpleNameReferenceExpression (identifier = ?:)
-    bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.txt
index 84b8c0bc711..3b23e8159ac 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.identifiers.txt
@@ -10,4 +10,4 @@ String -> USimpleNameReferenceExpression (identifier = String)
     foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     ?: -> USimpleNameReferenceExpression (identifier = ?:)
     bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
-    toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.fir.txt
deleted file mode 100644
index fcdcce69053..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.fir.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.txt
similarity index 93%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.txt
index 5bc813b795b..fd13c5e01a7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Elvis.refNames.txt
@@ -5,4 +5,4 @@ foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtDotQualifiedExpression
 bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.fir.txt
deleted file mode 100644
index 230691b3cc8..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.fir.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-foo -> UMethod (name = foo)
-text -> UParameter (name = text)
-String -> USimpleNameReferenceExpression (identifier = String)
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-text -> USimpleNameReferenceExpression (identifier = text)
-?: -> USimpleNameReferenceExpression (identifier = ?:)
-bar -> UMethod (name = bar)
-o -> UParameter (name = o)
-Any -> USimpleNameReferenceExpression (identifier = Any)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.txt
similarity index 86%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.txt
index cfbd80f0296..f00f584b802 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.identifiers.txt
@@ -6,4 +6,4 @@ text -> USimpleNameReferenceExpression (identifier = text)
 ?: -> USimpleNameReferenceExpression (identifier = ?:)
 bar -> UMethod (name = bar)
 o -> UParameter (name = o)
-Any -> USimpleNameReferenceExpression (identifier = Any)
+Any -> USimpleNameReferenceExpression (identifier = Any)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.fir.txt
deleted file mode 100644
index 8bced053ab8..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.fir.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-text -> USimpleNameReferenceExpression (identifier = text) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.txt
similarity index 93%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.txt
index d470b705e0f..43c1bfcd158 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ElvisType.refNames.txt
@@ -1,4 +1,4 @@
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
 bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 text -> USimpleNameReferenceExpression (identifier = text) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
+Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/EnumValueMembers.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/EnumValueMembers.identifiers.fir.txt
index 41ddd241313..493d0407eb8 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/EnumValueMembers.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/EnumValueMembers.identifiers.fir.txt
@@ -2,7 +2,7 @@ Style -> UClass (name = Style)
 value -> UParameter (name = value)
 String -> USimpleNameReferenceExpression (identifier = String)
 SHEET -> UClass (name = SHEET)
-exitAnimation -> [!] UnknownKotlinExpression (PROPERTY)
+exitAnimation -> null
 String -> USimpleNameReferenceExpression (identifier = String)
 get -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
 exitAnimation -> UMethod (name = getExitAnimation)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.identifiers.fir.txt
index 749906ddaec..7ea35a1252c 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.identifiers.fir.txt
@@ -1,8 +1,8 @@
 bar -> null
 Any -> USimpleNameReferenceExpression (identifier = Any)
 get -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
-Unresolved -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-id -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+Unresolved -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+id -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 id -> UMethod (name = id)
 x -> UParameter (name = x)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.fir.txt
deleted file mode 100644
index 844a6925068..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.fir.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-Unresolved -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-id -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.txt
index 57764291aa5..c61177d7c81 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InferenceInsideUnresolvedConstructor.refNames.txt
@@ -3,4 +3,4 @@ Unresolved -> UCallExpression (kind = UastCallKind(name='method_call'), argCount
 id -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
+x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.fir.txt
deleted file mode 100644
index c384e5d9d5a..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Some -> UClass (name = Some)
-T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
-Some -> USimpleNameReferenceExpression (identifier = Some)
-T -> USimpleNameReferenceExpression (identifier = T)
-test -> UMethod (name = test)
-list -> UParameter (name = list)
-List -> USimpleNameReferenceExpression (identifier = List)
-Any -> USimpleNameReferenceExpression (identifier = Any)
-    list -> USimpleNameReferenceExpression (identifier = list)
-    filterIsInstance -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Some -> USimpleNameReferenceExpression (identifier = Some)
-    mapTo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    mutableSetOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.txt
index 9243d2c4ad4..13ce983b1fb 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.identifiers.txt
@@ -10,4 +10,4 @@ Any -> USimpleNameReferenceExpression (identifier = Any)
     filterIsInstance -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     Some -> USimpleNameReferenceExpression (identifier = Some)
     mapTo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
-    mutableSetOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    mutableSetOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.fir.txt
deleted file mode 100644
index 2b04a5cd816..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Some -> USimpleNameReferenceExpression (identifier = Some) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-mapTo(mutableSetOf()) {
-
-    } -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-filterIsInstance<Some>() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-list -> USimpleNameReferenceExpression (identifier = list) from KtNameReferenceExpression
-filterIsInstance -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Some -> USimpleNameReferenceExpression (identifier = Some) from KtNameReferenceExpression
-mapTo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-mutableSetOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.txt
index f185316ba98..e46d504889a 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/InnerNonFixedTypeVariable.refNames.txt
@@ -8,4 +8,4 @@ list -> USimpleNameReferenceExpression (identifier = list) from KtNameReferenceE
 filterIsInstance -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
 Some -> USimpleNameReferenceExpression (identifier = Some) from KtNameReferenceExpression
 mapTo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) from KtNameReferenceExpression
-mutableSetOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+mutableSetOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.identifiers.fir.txt
index b94144fbe52..a27a4c9de84 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.identifiers.fir.txt
@@ -44,7 +44,7 @@ foo -> UMethod (name = foo)
     Int -> USimpleNameReferenceExpression (identifier = Int)
     + -> USimpleNameReferenceExpression (identifier = +)
     a -> USimpleNameReferenceExpression (identifier = a)
-    bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
         it -> USimpleNameReferenceExpression (identifier = it)
         > -> USimpleNameReferenceExpression (identifier = >)
         b -> ULocalVariable (name = b)
@@ -55,12 +55,12 @@ foo -> UMethod (name = foo)
     Unit -> USimpleNameReferenceExpression (identifier = Unit)
         a -> ULocalVariable (name = a)
         b -> ULocalVariable (name = b)
-        listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
     y -> ULocalVariable (name = y)
     Unit -> USimpleNameReferenceExpression (identifier = Unit)
-        listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 bar -> UDeclarationsExpression
 lmbd -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Int -> USimpleNameReferenceExpression (identifier = Int)
-    lmbd -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    lmbd -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.fir.txt
deleted file mode 100644
index 9416edb98e1..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.fir.txt
+++ /dev/null
@@ -1,38 +0,0 @@
-kotlin -> USimpleNameReferenceExpression (identifier = kotlin) from KtDotQualifiedExpression
-uast -> USimpleNameReferenceExpression (identifier = uast) from KtDotQualifiedExpression
-jetbrains -> USimpleNameReferenceExpression (identifier = jetbrains) from KtDotQualifiedExpression
-org -> USimpleNameReferenceExpression (identifier = org) from KtNameReferenceExpression
-jetbrains -> USimpleNameReferenceExpression (identifier = jetbrains) from KtNameReferenceExpression
-uast -> USimpleNameReferenceExpression (identifier = uast) from KtNameReferenceExpression
-kotlin -> USimpleNameReferenceExpression (identifier = kotlin) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-c -> USimpleNameReferenceExpression (identifier = c) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-c -> USimpleNameReferenceExpression (identifier = c) from KtNameReferenceExpression
-lbd -> USimpleNameReferenceExpression (identifier = lbd) from KtLabelReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-lbd -> USimpleNameReferenceExpression (identifier = lbd) from KtLabelReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-d -> USimpleNameReferenceExpression (identifier = d) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-it -> USimpleNameReferenceExpression (identifier = it) from KtNameReferenceExpression
-it -> USimpleNameReferenceExpression (identifier = it) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-lmbd -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.txt
index 317bf6e4afe..f57bbf66734 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LambdaReturn.refNames.txt
@@ -35,4 +35,4 @@ Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceE
 listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-lmbd -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
+lmbd -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.fir.txt
deleted file mode 100644
index b9189dc5814..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.fir.txt
+++ /dev/null
@@ -1,19 +0,0 @@
-java -> USimpleNameReferenceExpression (identifier = java)
-util -> USimpleNameReferenceExpression (identifier = util)
-stream -> USimpleNameReferenceExpression (identifier = stream)
-Stream -> USimpleNameReferenceExpression (identifier = Stream)
-foo -> UMethod (name = foo)
-    Stream -> USimpleNameReferenceExpression (identifier = Stream)
-    empty -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    filter -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        it -> USimpleNameReferenceExpression (identifier = it)
-        isEmpty -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-doSelectItem -> UMethod (name = doSelectItem)
-selectItemFunction -> UParameter (name = selectItemFunction)
-Unit -> USimpleNameReferenceExpression (identifier = Unit)
-    selectItemFunction -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    baz -> ULocalVariable (name = baz)
-        Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    baz -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-lambdaInPlaceCall -> UMethod (name = lambdaInPlaceCall)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.txt
index 49184986b8f..48bfadde316 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.identifiers.txt
@@ -16,4 +16,4 @@ Unit -> USimpleNameReferenceExpression (identifier = Unit)
     baz -> ULocalVariable (name = baz)
         Local -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     baz -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
-lambdaInPlaceCall -> UMethod (name = lambdaInPlaceCall)
+lambdaInPlaceCall -> UMethod (name = lambdaInPlaceCall)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.fir.txt
deleted file mode 100644
index b4e599eeddd..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.fir.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-Stream -> USimpleNameReferenceExpression (identifier = Stream) from KtDotQualifiedExpression
-stream -> USimpleNameReferenceExpression (identifier = stream) from KtDotQualifiedExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtNameReferenceExpression
-stream -> USimpleNameReferenceExpression (identifier = stream) from KtNameReferenceExpression
-Stream -> USimpleNameReferenceExpression (identifier = Stream) from KtNameReferenceExpression
-filter { it.isEmpty() } -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-empty<String>() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-Stream -> USimpleNameReferenceExpression (identifier = Stream) from KtNameReferenceExpression
-empty -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-filter -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-isEmpty() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-it -> USimpleNameReferenceExpression (identifier = it) from KtNameReferenceExpression
-isEmpty -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-selectItemFunction -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-baz -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.txt
index 351a2c5c322..48a419e9e93 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Lambdas.refNames.txt
@@ -17,4 +17,4 @@ isEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount =
 Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
 selectItemFunction -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
 Local -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-baz -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+baz -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.fir.txt
deleted file mode 100644
index e56d93d1dde..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.fir.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-foo -> UMethod (name = foo)
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean)
-    Local -> UClass (name = Local)
-    bar -> ULambdaExpression
-    Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    baz -> ULocalVariable (name = baz)
-        Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Int -> USimpleNameReferenceExpression (identifier = Int)
-    someLocalFun -> ULambdaExpression
-    text -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    == -> USimpleNameReferenceExpression (identifier = ==)
-    Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.txt
index 225753ccb59..3b8f5f90db9 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.identifiers.txt
@@ -11,4 +11,4 @@ Boolean -> USimpleNameReferenceExpression (identifier = Boolean)
     String -> USimpleNameReferenceExpression (identifier = String)
     bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     == -> USimpleNameReferenceExpression (identifier = ==)
-    Local -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+    Local -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.fir.txt
deleted file mode 100644
index cc0b68d2f89..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.fir.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-Boolean -> USimpleNameReferenceExpression (identifier = Boolean) from KtNameReferenceExpression
-Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Local -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.txt
similarity index 92%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.txt
index 877e89ede2e..962d0524ef2 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalDeclarations.refNames.txt
@@ -4,4 +4,4 @@ Local -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
 bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-Local -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
+Local -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.fir.txt
deleted file mode 100644
index a91ba19529d..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.fir.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-TestAnnotation -> UClass (name = TestAnnotation)
-foo -> UMethod (name = foo)
-    TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation)
-    bar -> ULocalVariable (name = bar)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.txt
similarity index 77%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.txt
index a4d4aab0270..1ed8a4f67a7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.identifiers.txt
@@ -1,4 +1,4 @@
 TestAnnotation -> UClass (name = TestAnnotation)
 foo -> UMethod (name = foo)
     TestAnnotation -> UAnnotation (fqName = TestAnnotation)
-    bar -> ULocalVariable (name = bar)
+    bar -> ULocalVariable (name = bar)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.fir.txt
deleted file mode 100644
index 3fd7757013b..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.fir.txt
+++ /dev/null
@@ -1 +0,0 @@
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.txt
similarity index 73%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.txt
index d3b7e1fa9fc..ee358e6bdb5 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/LocalVariableWithAnnotation.refNames.txt
@@ -1 +1 @@
-TestAnnotation -> UAnnotation (fqName = TestAnnotation) from KtNameReferenceExpression
+TestAnnotation -> UAnnotation (fqName = TestAnnotation) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.fir.txt
deleted file mode 100644
index 28671a3dfc9..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.fir.txt
+++ /dev/null
@@ -1,17 +0,0 @@
-A -> UClass (name = A)
-invoke -> UMethod (name = invoke)
-    this -> USimpleNameReferenceExpression (identifier = this)
-invoke -> UMethod (name = invoke)
-f -> UParameter (name = f)
-Unit -> USimpleNameReferenceExpression (identifier = Unit)
-main -> UMethod (name = main)
-a -> UParameter (name = a)
-A -> USimpleNameReferenceExpression (identifier = A)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    !! -> USimpleNameReferenceExpression (identifier = !!)
-    p -> ULocalVariable (name = p)
-    A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    !! -> USimpleNameReferenceExpression (identifier = !!)
-        p -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-            A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.txt
index 896be53a3ca..750462c8e22 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.identifiers.txt
@@ -14,4 +14,4 @@ A -> USimpleNameReferenceExpression (identifier = A)
     a -> USimpleNameReferenceExpression (identifier = a)
     !! -> USimpleNameReferenceExpression (identifier = !!)
         p -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
-            A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+            A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.fir.txt
deleted file mode 100644
index d2355700146..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.fir.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-p -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.txt
similarity index 92%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.txt
index c97e29327e0..a3391b531a3 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/NonTrivialIdentifiers.refNames.txt
@@ -4,4 +4,4 @@ a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpress
 A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
 a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
 p -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
-A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
+A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.fir.txt
deleted file mode 100644
index fdee03def6f..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.fir.txt
+++ /dev/null
@@ -1,19 +0,0 @@
-MyAnnotation -> UClass (name = MyAnnotation)
-MyAnnotation2 -> UClass (name = MyAnnotation2)
-MyAnnotation3 -> UClass (name = MyAnnotation3)
-MyAnnotation4 -> UClass (name = MyAnnotation4)
-MyAnnotation5 -> UClass (name = MyAnnotation5)
-Test1 -> UClass (name = Test1)
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation)
-bar -> UParameter (name = bar)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-Test2 -> UClass (name = Test2)
-get -> null
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation)
-set -> null
-MyAnnotation2 -> USimpleNameReferenceExpression (identifier = MyAnnotation2)
-MyAnnotation3 -> USimpleNameReferenceExpression (identifier = MyAnnotation3)
-MyAnnotation4 -> USimpleNameReferenceExpression (identifier = MyAnnotation4)
-MyAnnotation5 -> USimpleNameReferenceExpression (identifier = MyAnnotation5)
-bar -> UParameter (name = bar)
-Int -> USimpleNameReferenceExpression (identifier = Int)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.txt
similarity index 93%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.txt
index 2c193c1fc62..73b643cd5b0 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.identifiers.txt
@@ -16,4 +16,4 @@ MyAnnotation3 -> UAnnotation (fqName = MyAnnotation3)
 MyAnnotation4 -> UAnnotation (fqName = MyAnnotation4)
 MyAnnotation5 -> UAnnotation (fqName = MyAnnotation5)
 bar -> UParameter (name = bar)
-Int -> USimpleNameReferenceExpression (identifier = Int)
+Int -> USimpleNameReferenceExpression (identifier = Int)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.fir.txt
deleted file mode 100644
index 2ae35aad3d6..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.fir.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-MyAnnotation -> USimpleNameReferenceExpression (identifier = MyAnnotation) from KtNameReferenceExpression
-MyAnnotation2 -> USimpleNameReferenceExpression (identifier = MyAnnotation2) from KtNameReferenceExpression
-MyAnnotation3 -> USimpleNameReferenceExpression (identifier = MyAnnotation3) from KtNameReferenceExpression
-MyAnnotation4 -> USimpleNameReferenceExpression (identifier = MyAnnotation4) from KtNameReferenceExpression
-MyAnnotation5 -> USimpleNameReferenceExpression (identifier = MyAnnotation5) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.txt
index d74897c400f..9672ce871b0 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParameterPropertyWithAnnotation.refNames.txt
@@ -5,4 +5,4 @@ MyAnnotation2 -> UAnnotation (fqName = MyAnnotation2) from KtNameReferenceExpres
 MyAnnotation3 -> UAnnotation (fqName = MyAnnotation3) from KtNameReferenceExpression
 MyAnnotation4 -> UAnnotation (fqName = MyAnnotation4) from KtNameReferenceExpression
 MyAnnotation5 -> UAnnotation (fqName = MyAnnotation5) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
+Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.fir.txt
deleted file mode 100644
index 9078b941db4..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.fir.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-global -> UMethod (name = global)
-a -> UParameter (name = a)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-b -> UParameter (name = b)
-Float -> USimpleNameReferenceExpression (identifier = Float)
-withDefault -> UMethod (name = withDefault)
-c -> UParameter (name = c)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-d -> UParameter (name = d)
-String -> USimpleNameReferenceExpression (identifier = String)
-String -> USimpleNameReferenceExpression (identifier = String)
-withReceiver -> UMethod (name = withReceiver)
-a -> UParameter (name = a)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-b -> UParameter (name = b)
-Float -> USimpleNameReferenceExpression (identifier = Float)
-call -> UMethod (name = call)
-    global -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    b -> USimpleNameReferenceExpression (identifier = b)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    withDefault -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    d -> USimpleNameReferenceExpression (identifier = d)
-    withReceiver -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Math -> USimpleNameReferenceExpression (identifier = Math)
-    atan2 -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    unresolvedMethod -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    java -> USimpleNameReferenceExpression (identifier = java)
-    lang -> USimpleNameReferenceExpression (identifier = lang)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    format -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    java -> USimpleNameReferenceExpression (identifier = java)
-    lang -> USimpleNameReferenceExpression (identifier = lang)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    format -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    java -> USimpleNameReferenceExpression (identifier = java)
-    lang -> USimpleNameReferenceExpression (identifier = lang)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    format -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    java -> USimpleNameReferenceExpression (identifier = java)
-    lang -> USimpleNameReferenceExpression (identifier = lang)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    format -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    chunked -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    toTypedArray -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    with -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        with2Receivers -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-A -> UClass (name = A)
-String -> USimpleNameReferenceExpression (identifier = String)
-with2Receivers -> UMethod (name = with2Receivers)
-a -> UParameter (name = a)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-b -> UParameter (name = b)
-Float -> USimpleNameReferenceExpression (identifier = Float)
-Parent -> UClass (name = Parent)
-a -> UParameter (name = a)
-String -> USimpleNameReferenceExpression (identifier = String)
-b -> UParameter (name = b)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-objectLiteral -> UMethod (name = objectLiteral)
-    object -> UClass (name = null)
-    Parent -> USimpleNameReferenceExpression (identifier = Parent)
-    b -> USimpleNameReferenceExpression (identifier = b)
-    a -> USimpleNameReferenceExpression (identifier = a)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.txt
index adf972d086b..b8ba8ad4f87 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.identifiers.txt
@@ -64,4 +64,4 @@ objectLiteral -> UMethod (name = objectLiteral)
     object -> UClass (name = null)
     Parent -> UObjectLiteralExpression
     b -> USimpleNameReferenceExpression (identifier = b)
-    a -> USimpleNameReferenceExpression (identifier = a)
+    a -> USimpleNameReferenceExpression (identifier = a)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.fir.txt
deleted file mode 100644
index 143ff114105..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.fir.txt
+++ /dev/null
@@ -1,66 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Float -> USimpleNameReferenceExpression (identifier = Float) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Float -> USimpleNameReferenceExpression (identifier = Float) from KtNameReferenceExpression
-global -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-withDefault -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-d -> USimpleNameReferenceExpression (identifier = d) from KtNameReferenceExpression
-withReceiver(1, 1.2F) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-withReceiver -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-atan2(1.3, 3.4) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-Math -> USimpleNameReferenceExpression (identifier = Math) from KtNameReferenceExpression
-atan2 -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-unresolvedMethod -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-format("%i %i %i", 1, 2, 3) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-format -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-format("%i %i %i", arrayOf(1, 2, 3)) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-format -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6)) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-format -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-arrayOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-format("%i %i %i", *"".chunked(2).toTypedArray()) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-format -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-toTypedArray() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-chunked(2) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-chunked -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-toTypedArray -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-with -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-with2Receivers(8, 7.0F) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-with2Receivers -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Float -> USimpleNameReferenceExpression (identifier = Float) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Parent -> USimpleNameReferenceExpression (identifier = Parent) from KtObjectLiteralExpression
-Parent -> USimpleNameReferenceExpression (identifier = Parent) from KtNameReferenceExpression
-b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.txt
index 7c2060e3d76..1670f3927d2 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ParametersDisorder.refNames.txt
@@ -63,4 +63,4 @@ Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExp
 Parent -> USimpleNameReferenceExpression (identifier = Parent) from KtObjectLiteralExpression
 Parent -> UObjectLiteralExpression from KtNameReferenceExpression
 b -> USimpleNameReferenceExpression (identifier = b) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
+a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.identifiers.fir.txt
index 14afff8890a..7eabc6e6208 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.identifiers.fir.txt
@@ -3,10 +3,10 @@ stringRepresentation -> null
 String -> USimpleNameReferenceExpression (identifier = String)
 get -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
 this -> USimpleNameReferenceExpression (identifier = this)
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 set -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
 value -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
-    setDataFromString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    setDataFromString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     value -> USimpleNameReferenceExpression (identifier = value)
 setDataFromString -> UMethod (name = setDataFromString)
 data -> UParameter (name = data)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.fir.txt
deleted file mode 100644
index d9a6d4dd9c4..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.fir.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-setDataFromString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-value -> USimpleNameReferenceExpression (identifier = value) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.txt
index 3e717eb7bf0..4752127cc88 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyAccessors.refNames.txt
@@ -3,4 +3,4 @@ toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount =
 toString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
 setDataFromString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 value -> USimpleNameReferenceExpression (identifier = value) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
+String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.identifiers.fir.txt
index bacecc3024e..6b67468b3bd 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.identifiers.fir.txt
@@ -1,9 +1,9 @@
 sdCardPath -> UMethod (name = getSdCardPath)
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 localPropertyTest -> UMethod (name = localPropertyTest)
     sdCardPathLocal -> ULocalVariable (name = sdCardPathLocal)
-    lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
+    lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+Suppress -> UAnnotation (fqName = kotlin.Suppress)
 annotatedDelegate -> UMethod (name = getAnnotatedDelegate)
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     + -> USimpleNameReferenceExpression (identifier = +)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.fir.txt
deleted file mode 100644
index 0e46a215fd9..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.fir.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-lazy -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.txt
similarity index 88%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.txt
index ca7289aa680..177fb53b83f 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyDelegate.refNames.txt
@@ -1,4 +1,4 @@
 lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 Suppress -> UAnnotation (fqName = kotlin.Suppress) from KtNameReferenceExpression
-lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
+lazy -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.fir.txt
deleted file mode 100644
index d994c9b3154..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.fir.txt
+++ /dev/null
@@ -1,53 +0,0 @@
-A -> UClass (name = A)
-init -> UParameter (name = init)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-privateProp -> UField (name = privateProp)
-mutableProp -> UField (name = mutableProp)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    init -> USimpleNameReferenceExpression (identifier = init)
-add -> UMethod (name = add)
-x -> UParameter (name = x)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-    result -> ULocalVariable (name = result)
-    privateProp -> USimpleNameReferenceExpression (identifier = privateProp)
-    privateProp -> USimpleNameReferenceExpression (identifier = privateProp)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    x -> USimpleNameReferenceExpression (identifier = x)
-    privateProp -> USimpleNameReferenceExpression (identifier = privateProp)
-properties -> UMethod (name = properties)
-    a -> ULocalVariable (name = a)
-    A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    x -> ULocalVariable (name = x)
-    - -> USimpleNameReferenceExpression (identifier = -)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    += -> USimpleNameReferenceExpression (identifier = +=)
-    x -> USimpleNameReferenceExpression (identifier = x)
-    ++ -> USimpleNameReferenceExpression (identifier = ++)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    a -> USimpleNameReferenceExpression (identifier = a)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    -- -> USimpleNameReferenceExpression (identifier = --)
-A -> USimpleNameReferenceExpression (identifier = A)
-ext -> UMethod (name = ext)
-    x -> ULocalVariable (name = x)
-    - -> USimpleNameReferenceExpression (identifier = -)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    += -> USimpleNameReferenceExpression (identifier = +=)
-    x -> USimpleNameReferenceExpression (identifier = x)
-    ++ -> USimpleNameReferenceExpression (identifier = ++)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    -- -> USimpleNameReferenceExpression (identifier = --)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.txt
index 035afcd4097..b04aaee10d5 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.identifiers.txt
@@ -50,4 +50,4 @@ ext -> UMethod (name = ext)
     ++ -> USimpleNameReferenceExpression (identifier = ++)
     mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
     mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp)
-    -- -> USimpleNameReferenceExpression (identifier = --)
+    -- -> USimpleNameReferenceExpression (identifier = --)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.fir.txt
deleted file mode 100644
index b5a90705e09..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.fir.txt
+++ /dev/null
@@ -1,34 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-init -> USimpleNameReferenceExpression (identifier = init) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-privateProp -> USimpleNameReferenceExpression (identifier = privateProp) from KtNameReferenceExpression
-privateProp -> USimpleNameReferenceExpression (identifier = privateProp) from KtNameReferenceExpression
-x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
-privateProp -> USimpleNameReferenceExpression (identifier = privateProp) from KtNameReferenceExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtDotQualifiedExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtDotQualifiedExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtDotQualifiedExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtDotQualifiedExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtDotQualifiedExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.txt
index 85f7e35a5f9..98b29d1abb6 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyReferences.refNames.txt
@@ -31,4 +31,4 @@ mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from Kt
 mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
 x -> USimpleNameReferenceExpression (identifier = x) from KtNameReferenceExpression
 mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
-mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
+mutableProp -> USimpleNameReferenceExpression (identifier = mutableProp) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.identifiers.fir.txt
index 17ff16b1155..89e3cef0c18 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.identifiers.fir.txt
@@ -1,14 +1,14 @@
 TestAnnotation -> UClass (name = TestAnnotation)
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation)
+TestAnnotation -> UAnnotation (fqName = TestAnnotation)
 prop1 -> UField (name = prop1)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 get -> null
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation)
+TestAnnotation -> UAnnotation (fqName = TestAnnotation)
 prop2 -> null
 Int -> USimpleNameReferenceExpression (identifier = Int)
 get -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
 set -> null
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation)
+TestAnnotation -> UAnnotation (fqName = TestAnnotation)
 prop3 -> null
 Int -> USimpleNameReferenceExpression (identifier = Int)
 get -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.fir.txt
deleted file mode 100644
index ba3d83d1062..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.fir.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-TestAnnotation -> USimpleNameReferenceExpression (identifier = TestAnnotation) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-field -> USimpleNameReferenceExpression (identifier = field) from KtNameReferenceExpression
-value -> USimpleNameReferenceExpression (identifier = value) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.txt
index f7a225dc185..adb1d4aca74 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/PropertyWithAnnotation.refNames.txt
@@ -5,4 +5,4 @@ Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExp
 TestAnnotation -> UAnnotation (fqName = TestAnnotation) from KtNameReferenceExpression
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 field -> USimpleNameReferenceExpression (identifier = field) from KtNameReferenceExpression
-value -> USimpleNameReferenceExpression (identifier = value) from KtNameReferenceExpression
+value -> USimpleNameReferenceExpression (identifier = value) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.fir.txt
deleted file mode 100644
index bf8cbb19dd0..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.fir.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-A -> USimpleNameReferenceExpression (identifier = A)
-B -> USimpleNameReferenceExpression (identifier = B)
-C -> USimpleNameReferenceExpression (identifier = C)
-Foo -> UClass (name = Foo)
-Bar -> UClass (name = Bar)
-getFoo -> UMethod (name = getFoo)
-Foo -> USimpleNameReferenceExpression (identifier = Foo)
-    A -> USimpleNameReferenceExpression (identifier = A)
-    B -> USimpleNameReferenceExpression (identifier = B)
-    C -> USimpleNameReferenceExpression (identifier = C)
-    Foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.txt
index 5df9db77261..443c29010f4 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.identifiers.txt
@@ -8,4 +8,4 @@ Foo -> USimpleNameReferenceExpression (identifier = Foo)
     A -> USimpleNameReferenceExpression (identifier = A)
     B -> USimpleNameReferenceExpression (identifier = B)
     C -> USimpleNameReferenceExpression (identifier = C)
-    Foo -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+    Foo -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.fir.txt
deleted file mode 100644
index cd90d514af1..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-C -> USimpleNameReferenceExpression (identifier = C) from KtDotQualifiedExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtDotQualifiedExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-C -> USimpleNameReferenceExpression (identifier = C) from KtNameReferenceExpression
-Foo -> USimpleNameReferenceExpression (identifier = Foo) from KtNameReferenceExpression
-Foo() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-C -> USimpleNameReferenceExpression (identifier = C) from KtDotQualifiedExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtDotQualifiedExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-C -> USimpleNameReferenceExpression (identifier = C) from KtNameReferenceExpression
-Foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.txt
index 0a21bc5650d..7ae6ba4cf7e 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/QualifiedConstructorCall.refNames.txt
@@ -10,4 +10,4 @@ B -> USimpleNameReferenceExpression (identifier = B) from KtDotQualifiedExpressi
 A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
 B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
 C -> USimpleNameReferenceExpression (identifier = C) from KtNameReferenceExpression
-Foo -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
+Foo -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.identifiers.fir.txt
index 8182040ecdc..27ebb515819 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.identifiers.fir.txt
@@ -1,14 +1,14 @@
 MyReceiverAnnotation -> UClass (name = MyReceiverAnnotation)
 name -> UAnnotationMethod (name = name)
 String -> USimpleNameReferenceExpression (identifier = String)
-MyReceiverAnnotation -> USimpleNameReferenceExpression (identifier = MyReceiverAnnotation)
+MyReceiverAnnotation -> UAnnotation (fqName = MyReceiverAnnotation)
 String -> USimpleNameReferenceExpression (identifier = String)
 foo -> UMethod (name = foo)
 this -> USimpleNameReferenceExpression (identifier = this)
 length -> USimpleNameReferenceExpression (identifier = length)
-MyReceiverAnnotation -> USimpleNameReferenceExpression (identifier = MyReceiverAnnotation)
+MyReceiverAnnotation -> UAnnotation (fqName = MyReceiverAnnotation)
 String -> USimpleNameReferenceExpression (identifier = String)
 rx -> null
 Regex -> USimpleNameReferenceExpression (identifier = Regex)
 get -> [!] UnknownKotlinExpression (PROPERTY_ACCESSOR)
-    toRegex -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    toRegex -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.fir.txt
deleted file mode 100644
index 291fc0666fe..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.fir.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-MyReceiverAnnotation -> USimpleNameReferenceExpression (identifier = MyReceiverAnnotation) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-length -> USimpleNameReferenceExpression (identifier = length) from KtDotQualifiedExpression
-length -> USimpleNameReferenceExpression (identifier = length) from KtNameReferenceExpression
-MyReceiverAnnotation -> USimpleNameReferenceExpression (identifier = MyReceiverAnnotation) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Regex -> USimpleNameReferenceExpression (identifier = Regex) from KtNameReferenceExpression
-toRegex -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.txt
similarity index 94%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.txt
index 36d6f3b83e2..5769a955a60 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReceiverFun.refNames.txt
@@ -6,4 +6,4 @@ length -> USimpleNameReferenceExpression (identifier = length) from KtNameRefere
 MyReceiverAnnotation -> UAnnotation (fqName = MyReceiverAnnotation) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
 Regex -> USimpleNameReferenceExpression (identifier = Regex) from KtNameReferenceExpression
-toRegex -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+toRegex -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.identifiers.fir.txt
index 9a2d2643bd4..088ff9e4e68 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.identifiers.fir.txt
@@ -3,21 +3,21 @@ pkg -> USimpleNameReferenceExpression (identifier = pkg)
 Context -> UClass (name = Context)
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 ownSystemService1 -> UDeclarationsExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+getSystemService -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 T -> USimpleNameReferenceExpression (identifier = T)
 java -> USimpleNameReferenceExpression (identifier = java)
 ownSystemService2 -> UDeclarationsExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+getSystemService -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 String -> USimpleNameReferenceExpression (identifier = String)
 java -> USimpleNameReferenceExpression (identifier = java)
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 Context -> USimpleNameReferenceExpression (identifier = Context)
 systemService1 -> UDeclarationsExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+getSystemService -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 T -> USimpleNameReferenceExpression (identifier = T)
 java -> USimpleNameReferenceExpression (identifier = java)
 Context -> USimpleNameReferenceExpression (identifier = Context)
 systemService2 -> UDeclarationsExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+getSystemService -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 String -> USimpleNameReferenceExpression (identifier = String)
 java -> USimpleNameReferenceExpression (identifier = java)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.fir.txt
deleted file mode 100644
index c5b049dce39..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.fir.txt
+++ /dev/null
@@ -1,21 +0,0 @@
-pkg -> USimpleNameReferenceExpression (identifier = pkg) from KtDotQualifiedExpression
-test -> USimpleNameReferenceExpression (identifier = test) from KtNameReferenceExpression
-pkg -> USimpleNameReferenceExpression (identifier = pkg) from KtNameReferenceExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtDotQualifiedExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtDotQualifiedExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-Context -> USimpleNameReferenceExpression (identifier = Context) from KtNameReferenceExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtDotQualifiedExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-Context -> USimpleNameReferenceExpression (identifier = Context) from KtNameReferenceExpression
-getSystemService -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtDotQualifiedExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.txt
index 84d13e09411..e952f453cb6 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Reified.refNames.txt
@@ -18,4 +18,4 @@ Context -> USimpleNameReferenceExpression (identifier = Context) from KtNameRefe
 getSystemService -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 java -> USimpleNameReferenceExpression (identifier = java) from KtDotQualifiedExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
+java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.identifiers.fir.txt
index a90849d9951..dc653be3cf7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.identifiers.fir.txt
@@ -6,7 +6,7 @@ process -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
 T -> USimpleNameReferenceExpression (identifier = T)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Int -> USimpleNameReferenceExpression (identifier = Int)
-process -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+process -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 t -> USimpleNameReferenceExpression (identifier = t)
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 functionWithVararg -> UDeclarationsExpression
@@ -32,14 +32,14 @@ T -> USimpleNameReferenceExpression (identifier = T)
 this -> USimpleNameReferenceExpression (identifier = this)
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 functionWithParamAnnotation -> UDeclarationsExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
+Suppress -> UAnnotation (fqName = kotlin.Suppress)
 t -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
 T -> USimpleNameReferenceExpression (identifier = T)
 T -> USimpleNameReferenceExpression (identifier = T)
 t -> USimpleNameReferenceExpression (identifier = t)
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 functionUnresolved -> UDeclarationsExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
+Suppress -> UAnnotation (fqName = kotlin.Suppress)
 t -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
 Unresolved -> USimpleNameReferenceExpression (identifier = Unresolved)
 T -> USimpleNameReferenceExpression (identifier = T)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.fir.txt
deleted file mode 100644
index 3e0de703bf1..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.fir.txt
+++ /dev/null
@@ -1,25 +0,0 @@
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-process -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-Unresolved -> USimpleNameReferenceExpression (identifier = Unresolved) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.txt
index 2457a2b4cb0..7d6f071c187 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedParameters.refNames.txt
@@ -22,4 +22,4 @@ Suppress -> UAnnotation (fqName = kotlin.Suppress) from KtNameReferenceExpressio
 Unresolved -> USimpleNameReferenceExpression (identifier = Unresolved) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
+t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.identifiers.fir.txt
index 7cef807a544..df3aa313fee 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.identifiers.fir.txt
@@ -5,7 +5,7 @@ init -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
 T -> USimpleNameReferenceExpression (identifier = T)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
 T -> USimpleNameReferenceExpression (identifier = T)
-    TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 Any -> USimpleNameReferenceExpression (identifier = Any)
 bar -> UDeclarationsExpression
@@ -13,19 +13,19 @@ init -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
 T -> USimpleNameReferenceExpression (identifier = T)
 Unit -> USimpleNameReferenceExpression (identifier = Unit)
 T -> USimpleNameReferenceExpression (identifier = T)
-    TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 resolve -> UMethod (name = resolve)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     String -> USimpleNameReferenceExpression (identifier = String)
     x -> ULocalVariable (name = x)
     String -> USimpleNameReferenceExpression (identifier = String)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     String -> USimpleNameReferenceExpression (identifier = String)
     y -> ULocalVariable (name = y)
     String -> USimpleNameReferenceExpression (identifier = String)
-    bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     z -> ULocalVariable (name = z)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    filterIsInstance -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    filterIsInstance -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     String -> USimpleNameReferenceExpression (identifier = String)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.fir.txt
deleted file mode 100644
index daef7946abf..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Unit -> USimpleNameReferenceExpression (identifier = Unit) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-filterIsInstance<String>() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-filterIsInstance -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.txt
index 3f54584dfaf..394f265d805 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedResolve.refNames.txt
@@ -19,4 +19,4 @@ bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 filterIsInstance -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtDotQualifiedExpression
 listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 filterIsInstance -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
+String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.identifiers.fir.txt
index 28215638d17..2762c99e068 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.identifiers.fir.txt
@@ -168,4 +168,4 @@ Z -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 T -> USimpleNameReferenceExpression (identifier = T)
 foo -> UDeclarationsExpression
 Z -> USimpleNameReferenceExpression (identifier = Z)
-    TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.fir.txt
deleted file mode 100644
index a3b080cdb9f..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.fir.txt
+++ /dev/null
@@ -1,90 +0,0 @@
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-Activity -> USimpleNameReferenceExpression (identifier = Activity) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-CharSequence -> USimpleNameReferenceExpression (identifier = CharSequence) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Comparable -> USimpleNameReferenceExpression (identifier = Comparable) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-B -> USimpleNameReferenceExpression (identifier = B) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-threshold2 -> USimpleNameReferenceExpression (identifier = threshold2) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-Z -> USimpleNameReferenceExpression (identifier = Z) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.txt
index b9a6181fbb6..b3548aa57d7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ReifiedReturnType.refNames.txt
@@ -87,4 +87,4 @@ T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpress
 threshold2 -> USimpleNameReferenceExpression (identifier = threshold2) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
 Z -> USimpleNameReferenceExpression (identifier = Z) from KtNameReferenceExpression
-TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.identifiers.fir.txt
index 78b67a320fa..367ba0168c7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.identifiers.fir.txt
@@ -2,20 +2,20 @@ A -> UClass (name = A)
 foo -> UMethod (name = foo)
 inlineFoo -> UDeclarationsExpression
 bar -> UMethod (name = bar)
-    A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    inlineFoo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    A -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    forEach -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+    foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+    inlineFoo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+    forEach -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+        println -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
         it -> USimpleNameReferenceExpression (identifier = it)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    joinToString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    joinToString -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     size -> USimpleNameReferenceExpression (identifier = size)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     indices -> USimpleNameReferenceExpression (identifier = indices)
     date -> ULocalVariable (name = date)
     java -> USimpleNameReferenceExpression (identifier = java)
@@ -23,31 +23,31 @@ bar -> UMethod (name = bar)
     Date -> USimpleNameReferenceExpression (identifier = Date)
     java -> USimpleNameReferenceExpression (identifier = java)
     util -> USimpleNameReferenceExpression (identifier = util)
-    Date -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    Date -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
     date -> USimpleNameReferenceExpression (identifier = date)
     time -> USimpleNameReferenceExpression (identifier = time)
     = -> USimpleNameReferenceExpression (identifier = =)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    last -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    mutableMapOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+    last -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    mutableMapOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     to -> USimpleNameReferenceExpression (identifier = to)
     entries -> USimpleNameReferenceExpression (identifier = entries)
-    first -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    setValue -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    first -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    setValue -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     intRange -> ULocalVariable (name = intRange)
     .. -> USimpleNameReferenceExpression (identifier = ..)
     intRange -> USimpleNameReferenceExpression (identifier = intRange)
-    contains -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    contains -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     as -> USimpleNameReferenceExpression (identifier = as)
     Int -> USimpleNameReferenceExpression (identifier = Int)
-    IntRange -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    IntRange -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2))
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 A -> USimpleNameReferenceExpression (identifier = A)
 barT -> UMethod (name = barT)
 t -> UParameter (name = t)
 T -> USimpleNameReferenceExpression (identifier = T)
     t -> USimpleNameReferenceExpression (identifier = t)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
 List -> USimpleNameReferenceExpression (identifier = List)
 A -> USimpleNameReferenceExpression (identifier = A)
@@ -55,8 +55,8 @@ barTL -> UMethod (name = barTL)
 listT -> UParameter (name = listT)
 T -> USimpleNameReferenceExpression (identifier = T)
     listT -> USimpleNameReferenceExpression (identifier = listT)
-    isEmpty -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    isEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     a -> [!] UnknownKotlinExpression (VALUE_PARAMETER)
     listT -> USimpleNameReferenceExpression (identifier = listT)
         a -> USimpleNameReferenceExpression (identifier = a)
-        foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.fir.txt
deleted file mode 100644
index 6b3cb9d5628..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.fir.txt
+++ /dev/null
@@ -1,63 +0,0 @@
-foo() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-inlineFoo() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-inlineFoo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-forEach { println(it) } -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-A -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-forEach -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-it -> USimpleNameReferenceExpression (identifier = it) from KtNameReferenceExpression
-joinToString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-joinToString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-size -> USimpleNameReferenceExpression (identifier = size) from KtDotQualifiedExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-size -> USimpleNameReferenceExpression (identifier = size) from KtNameReferenceExpression
-indices -> USimpleNameReferenceExpression (identifier = indices) from KtDotQualifiedExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-indices -> USimpleNameReferenceExpression (identifier = indices) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtNameReferenceExpression
-Date -> USimpleNameReferenceExpression (identifier = Date) from KtNameReferenceExpression
-Date() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtNameReferenceExpression
-Date -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-time -> USimpleNameReferenceExpression (identifier = time) from KtDotQualifiedExpression
-date -> USimpleNameReferenceExpression (identifier = date) from KtNameReferenceExpression
-time -> USimpleNameReferenceExpression (identifier = time) from KtNameReferenceExpression
-last() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-last -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-setValue("123") -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-first() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-entries -> USimpleNameReferenceExpression (identifier = entries) from KtDotQualifiedExpression
-mutableMapOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-to -> USimpleNameReferenceExpression (identifier = to) from KtOperationReferenceExpression
-entries -> USimpleNameReferenceExpression (identifier = entries) from KtNameReferenceExpression
-first -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-setValue -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-contains(2 as Int) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-intRange -> USimpleNameReferenceExpression (identifier = intRange) from KtNameReferenceExpression
-contains -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-IntRange -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-foo() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-t -> USimpleNameReferenceExpression (identifier = t) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-isEmpty() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-listT -> USimpleNameReferenceExpression (identifier = listT) from KtNameReferenceExpression
-isEmpty -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-listT -> USimpleNameReferenceExpression (identifier = listT) from KtNameReferenceExpression
-foo() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.txt
index ccac7654cd8..5054dbf51ea 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Resolve.refNames.txt
@@ -60,4 +60,4 @@ isEmpty -> UCallExpression (kind = UastCallKind(name='method_call'), argCount =
 listT -> USimpleNameReferenceExpression (identifier = listT) from KtNameReferenceExpression
 foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtDotQualifiedExpression
 a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+foo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.fir.txt
deleted file mode 100644
index 9834557e29e..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.fir.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-Thread -> USimpleNameReferenceExpression (identifier = Thread)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-java -> USimpleNameReferenceExpression (identifier = java)
-util -> USimpleNameReferenceExpression (identifier = util)
-concurrent -> USimpleNameReferenceExpression (identifier = concurrent)
-Callable -> USimpleNameReferenceExpression (identifier = Callable)
-java -> USimpleNameReferenceExpression (identifier = java)
-util -> USimpleNameReferenceExpression (identifier = util)
-function -> USimpleNameReferenceExpression (identifier = function)
-Supplier -> USimpleNameReferenceExpression (identifier = Supplier)
-notSam -> UField (name = notSam)
-foo -> UField (name = foo)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-bar -> UMethod (name = bar)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-    foo -> USimpleNameReferenceExpression (identifier = foo)
-    = -> USimpleNameReferenceExpression (identifier = =)
-    a -> ULocalVariable (name = a)
-    as -> USimpleNameReferenceExpression (identifier = as)
-    java -> USimpleNameReferenceExpression (identifier = java)
-    lang -> USimpleNameReferenceExpression (identifier = lang)
-    Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-    runRunnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-baz -> UField (name = baz)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-Runnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-runRunnable -> UMethod (name = runRunnable)
-r -> UParameter (name = r)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable)
-r -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-test1 -> UMethod (name = test1)
-    thread1 -> ULocalVariable (name = thread1)
-    Thread -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-test2 -> UMethod (name = test2)
-    thread2 -> ULocalVariable (name = thread2)
-    Thread -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Runnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-test3 -> UMethod (name = test3)
-    ambiguousSamAcceptor -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Supplier -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    ambiguousSamAcceptor -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Callable -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-ambiguousSamAcceptor -> UMethod (name = ambiguousSamAcceptor)
-s -> UParameter (name = s)
-Supplier -> USimpleNameReferenceExpression (identifier = Supplier)
-String -> USimpleNameReferenceExpression (identifier = String)
-String -> USimpleNameReferenceExpression (identifier = String)
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-ambiguousSamAcceptor -> UMethod (name = ambiguousSamAcceptor)
-s -> UParameter (name = s)
-Callable -> USimpleNameReferenceExpression (identifier = Callable)
-String -> USimpleNameReferenceExpression (identifier = String)
-String -> USimpleNameReferenceExpression (identifier = String)
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.txt
index cfc3adcc68a..e62f531c24a 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.identifiers.txt
@@ -64,4 +64,4 @@ s -> UParameter (name = s)
 Callable -> USimpleNameReferenceExpression (identifier = Callable)
 String -> USimpleNameReferenceExpression (identifier = String)
 String -> USimpleNameReferenceExpression (identifier = String)
-TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.fir.txt
deleted file mode 100644
index 197321584fe..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.fir.txt
+++ /dev/null
@@ -1,61 +0,0 @@
-Thread -> USimpleNameReferenceExpression (identifier = Thread) from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Thread -> USimpleNameReferenceExpression (identifier = Thread) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-Callable -> USimpleNameReferenceExpression (identifier = Callable) from KtDotQualifiedExpression
-concurrent -> USimpleNameReferenceExpression (identifier = concurrent) from KtDotQualifiedExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtNameReferenceExpression
-concurrent -> USimpleNameReferenceExpression (identifier = concurrent) from KtNameReferenceExpression
-Callable -> USimpleNameReferenceExpression (identifier = Callable) from KtNameReferenceExpression
-Supplier -> USimpleNameReferenceExpression (identifier = Supplier) from KtDotQualifiedExpression
-function -> USimpleNameReferenceExpression (identifier = function) from KtDotQualifiedExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-util -> USimpleNameReferenceExpression (identifier = util) from KtNameReferenceExpression
-function -> USimpleNameReferenceExpression (identifier = function) from KtNameReferenceExpression
-Supplier -> USimpleNameReferenceExpression (identifier = Supplier) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-foo -> USimpleNameReferenceExpression (identifier = foo) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-runRunnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Runnable { /* SAM */ } -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtDotQualifiedExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Runnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-Runnable -> USimpleNameReferenceExpression (identifier = Runnable) from KtNameReferenceExpression
-r -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Thread -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Thread -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Runnable -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-ambiguousSamAcceptor -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Supplier -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-ambiguousSamAcceptor -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Callable -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Supplier -> USimpleNameReferenceExpression (identifier = Supplier) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Callable -> USimpleNameReferenceExpression (identifier = Callable) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-TODO -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.txt
index 34879de5b81..6fa5025e844 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SAM.refNames.txt
@@ -58,4 +58,4 @@ TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 Callable -> USimpleNameReferenceExpression (identifier = Callable) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+TODO -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.fir.txt
deleted file mode 100644
index 0225db25af2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.fir.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-Simple -> UClass (name = Simple)
-method -> UMethod (name = method)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-property -> UField (name = property)
-String -> USimpleNameReferenceExpression (identifier = String)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.txt
similarity index 75%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.txt
index 98a5971b637..8c0c2345fe3 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.identifiers.txt
@@ -2,4 +2,4 @@ Simple -> UClass (name = Simple)
 method -> UMethod (name = method)
     println -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 property -> UField (name = property)
-String -> USimpleNameReferenceExpression (identifier = String)
+String -> USimpleNameReferenceExpression (identifier = String)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.fir.txt
deleted file mode 100644
index b71c8182d25..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.fir.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.txt
similarity index 85%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.txt
index c3e51ce575d..153f2374537 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Simple.refNames.txt
@@ -1,2 +1,2 @@
 println -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
+String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.fir.txt
deleted file mode 100644
index a653b6537cf..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.fir.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-SimpleAnnotated -> UClass (name = SimpleAnnotated)
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress)
-method -> UMethod (name = method)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-kotlin -> USimpleNameReferenceExpression (identifier = kotlin)
-SinceKotlin -> USimpleNameReferenceExpression (identifier = SinceKotlin)
-property -> UField (name = property)
-String -> USimpleNameReferenceExpression (identifier = String)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.txt
similarity index 85%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.txt
index 797287d42a4..16685f6a308 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.identifiers.txt
@@ -5,4 +5,4 @@ method -> UMethod (name = method)
 kotlin -> USimpleNameReferenceExpression (identifier = kotlin)
 SinceKotlin -> UAnnotation (fqName = kotlin.SinceKotlin)
 property -> UField (name = property)
-String -> USimpleNameReferenceExpression (identifier = String)
+String -> USimpleNameReferenceExpression (identifier = String)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.fir.txt
deleted file mode 100644
index 5fd0a920e3b..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.fir.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-Suppress -> USimpleNameReferenceExpression (identifier = Suppress) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-kotlin -> USimpleNameReferenceExpression (identifier = kotlin) from KtNameReferenceExpression
-SinceKotlin -> USimpleNameReferenceExpression (identifier = SinceKotlin) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.txt
similarity index 93%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.txt
index 48be29b7c7b..f32491a135a 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SimpleAnnotated.refNames.txt
@@ -2,4 +2,4 @@ Suppress -> UAnnotation (fqName = kotlin.Suppress) from KtNameReferenceExpressio
 println -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 kotlin -> USimpleNameReferenceExpression (identifier = kotlin) from KtNameReferenceExpression
 SinceKotlin -> UAnnotation (fqName = kotlin.SinceKotlin) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
+String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.fir.txt
deleted file mode 100644
index 20fc98f34e6..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.fir.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-muchRecur -> UField (name = muchRecur)
-case4 -> UField (name = case4)
-case5 -> UField (name = case5)
-literalInLiteral -> UField (name = literalInLiteral)
-case4 -> USimpleNameReferenceExpression (identifier = case4)
-literalInLiteral2 -> UField (name = literalInLiteral2)
-case4 -> USimpleNameReferenceExpression (identifier = case4)
-repeat -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-empty -> UField (name = empty)
-simpleForTemplate -> UMethod (name = simpleForTemplate)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-i -> USimpleNameReferenceExpression (identifier = i)
-foo -> UMethod (name = foo)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    baz -> USimpleNameReferenceExpression (identifier = baz)
-    template1 -> ULocalVariable (name = template1)
-    simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    template2 -> ULocalVariable (name = template2)
-    simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.txt
index 54a0876273f..50268e6f4e1 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.identifiers.txt
@@ -17,4 +17,4 @@ foo -> UMethod (name = foo)
     template1 -> ULocalVariable (name = template1)
     simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     template2 -> ULocalVariable (name = template2)
-    simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.fir.txt
deleted file mode 100644
index 5deee345445..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.fir.txt
+++ /dev/null
@@ -1,15 +0,0 @@
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtSimpleNameStringTemplateEntry
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtNameReferenceExpression
-repeat(4) -> UQualifiedReferenceExpression from KtBlockStringTemplateEntry
-repeat(4) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtSimpleNameStringTemplateEntry
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtNameReferenceExpression
-repeat -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtSimpleNameStringTemplateEntry
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-baz -> USimpleNameReferenceExpression (identifier = baz) from KtSimpleNameStringTemplateEntry
-baz -> USimpleNameReferenceExpression (identifier = baz) from KtNameReferenceExpression
-simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.txt
index cc2942c041c..11a13a30d0a 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplex.refNames.txt
@@ -12,4 +12,4 @@ println -> UCallExpression (kind = UastCallKind(name='method_call'), argCount =
 baz -> USimpleNameReferenceExpression (identifier = baz) from KtSimpleNameStringTemplateEntry
 baz -> USimpleNameReferenceExpression (identifier = baz) from KtNameReferenceExpression
 simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.fir.txt
deleted file mode 100644
index 20fc98f34e6..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.fir.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-muchRecur -> UField (name = muchRecur)
-case4 -> UField (name = case4)
-case5 -> UField (name = case5)
-literalInLiteral -> UField (name = literalInLiteral)
-case4 -> USimpleNameReferenceExpression (identifier = case4)
-literalInLiteral2 -> UField (name = literalInLiteral2)
-case4 -> USimpleNameReferenceExpression (identifier = case4)
-repeat -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-empty -> UField (name = empty)
-simpleForTemplate -> UMethod (name = simpleForTemplate)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-i -> USimpleNameReferenceExpression (identifier = i)
-foo -> UMethod (name = foo)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    baz -> USimpleNameReferenceExpression (identifier = baz)
-    template1 -> ULocalVariable (name = template1)
-    simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    template2 -> ULocalVariable (name = template2)
-    simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.txt
index 54a0876273f..50268e6f4e1 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.identifiers.txt
@@ -17,4 +17,4 @@ foo -> UMethod (name = foo)
     template1 -> ULocalVariable (name = template1)
     simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
     template2 -> ULocalVariable (name = template2)
-    simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.fir.txt
deleted file mode 100644
index 5deee345445..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.fir.txt
+++ /dev/null
@@ -1,15 +0,0 @@
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtSimpleNameStringTemplateEntry
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtNameReferenceExpression
-repeat(4) -> UQualifiedReferenceExpression from KtBlockStringTemplateEntry
-repeat(4) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtSimpleNameStringTemplateEntry
-case4 -> USimpleNameReferenceExpression (identifier = case4) from KtNameReferenceExpression
-repeat -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtSimpleNameStringTemplateEntry
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-baz -> USimpleNameReferenceExpression (identifier = baz) from KtSimpleNameStringTemplateEntry
-baz -> USimpleNameReferenceExpression (identifier = baz) from KtNameReferenceExpression
-simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-simpleForTemplate -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.txt
index cc2942c041c..11a13a30d0a 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateComplexForUInjectionHost.refNames.txt
@@ -12,4 +12,4 @@ println -> UCallExpression (kind = UastCallKind(name='method_call'), argCount =
 baz -> USimpleNameReferenceExpression (identifier = baz) from KtSimpleNameStringTemplateEntry
 baz -> USimpleNameReferenceExpression (identifier = baz) from KtNameReferenceExpression
 simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+simpleForTemplate -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.fir.txt
deleted file mode 100644
index 096f1a49464..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.fir.txt
+++ /dev/null
@@ -1,4 +0,0 @@
-Demo -> UClass (name = Demo)
-foo -> UField (name = foo)
-X -> USimpleNameReferenceExpression (identifier = X)
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.txt
similarity index 91%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.txt
index f46a50f20f0..dc4487ca18f 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.identifiers.txt
@@ -1,4 +1,4 @@
 Demo -> UClass (name = Demo)
 foo -> UField (name = foo)
 X -> USimpleNameReferenceExpression (identifier = X)
-bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.fir.txt
deleted file mode 100644
index 7c99930213e..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.fir.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-bar("lorem") -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-X -> USimpleNameReferenceExpression (identifier = X) from KtNameReferenceExpression
-bar -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.txt
similarity index 84%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.txt
index 0e3e6da5fd8..cb951fbf073 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/StringTemplateInClass.refNames.txt
@@ -1,3 +1,3 @@
 bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtDotQualifiedExpression
 X -> USimpleNameReferenceExpression (identifier = X) from KtNameReferenceExpression
-bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
+bar -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.fir.txt
deleted file mode 100644
index dddb9b92f7c..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.fir.txt
+++ /dev/null
@@ -1,50 +0,0 @@
-A -> UClass (name = A)
-str -> UParameter (name = str)
-String -> USimpleNameReferenceExpression (identifier = String)
-constructor -> UMethod (name = A)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-this -> [!] UnknownKotlinExpression (CONSTRUCTOR_DELEGATION_REFERENCE)
-i -> USimpleNameReferenceExpression (identifier = i)
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-foo -> UMethod (name = foo)
-a -> UParameter (name = a)
-Long -> USimpleNameReferenceExpression (identifier = Long)
-B -> UClass (name = B)
-param -> UParameter (name = param)
-String -> USimpleNameReferenceExpression (identifier = String)
-A -> USimpleNameReferenceExpression (identifier = A)
-param -> USimpleNameReferenceExpression (identifier = param)
-C -> UClass (name = C)
-A -> USimpleNameReferenceExpression (identifier = A)
-constructor -> UMethod (name = C)
-p -> UParameter (name = p)
-String -> USimpleNameReferenceExpression (identifier = String)
-super -> [!] UnknownKotlinExpression (CONSTRUCTOR_DELEGATION_REFERENCE)
-p -> USimpleNameReferenceExpression (identifier = p)
-constructor -> UMethod (name = C)
-i -> UParameter (name = i)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-super -> [!] UnknownKotlinExpression (CONSTRUCTOR_DELEGATION_REFERENCE)
-i -> USimpleNameReferenceExpression (identifier = i)
-    println -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-foo -> UMethod (name = foo)
-a -> UParameter (name = a)
-Long -> USimpleNameReferenceExpression (identifier = Long)
-    super -> USimpleNameReferenceExpression (identifier = super)
-    foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    a -> USimpleNameReferenceExpression (identifier = a)
-O -> UClass (name = O)
-A -> USimpleNameReferenceExpression (identifier = A)
-anon -> UField (name = anon)
-object -> UClass (name = null)
-A -> USimpleNameReferenceExpression (identifier = A)
-bar -> UMethod (name = bar)
-    cons -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    object -> UClass (name = null)
-    A -> USimpleNameReferenceExpression (identifier = A)
-InnerClass -> UClass (name = InnerClass)
-A -> USimpleNameReferenceExpression (identifier = A)
-cons -> UMethod (name = cons)
-a -> UParameter (name = a)
-A -> USimpleNameReferenceExpression (identifier = A)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.txt
index 6a41fa53569..8fc4d78a1bc 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.identifiers.txt
@@ -47,4 +47,4 @@ InnerClass -> UClass (name = InnerClass)
 A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
 cons -> UMethod (name = cons)
 a -> UParameter (name = a)
-A -> USimpleNameReferenceExpression (identifier = A)
+A -> USimpleNameReferenceExpression (identifier = A)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.fir.txt
deleted file mode 100644
index 85b7592ac87..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.fir.txt
+++ /dev/null
@@ -1,27 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Long -> USimpleNameReferenceExpression (identifier = Long) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-param -> USimpleNameReferenceExpression (identifier = param) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-p -> USimpleNameReferenceExpression (identifier = p) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-i -> USimpleNameReferenceExpression (identifier = i) from KtNameReferenceExpression
-println -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Long -> USimpleNameReferenceExpression (identifier = Long) from KtNameReferenceExpression
-foo(a) -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-foo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtObjectLiteralExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-cons -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtObjectLiteralExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.txt
index e7d112f48e0..a742b2bf75d 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/SuperCalls.refNames.txt
@@ -24,4 +24,4 @@ cons -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
 A -> USimpleNameReferenceExpression (identifier = A) from KtObjectLiteralExpression
 A -> UObjectLiteralExpression from KtNameReferenceExpression
 A -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
-A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
+A -> USimpleNameReferenceExpression (identifier = A) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.fir.txt
deleted file mode 100644
index f170dac5a74..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-test -> USimpleNameReferenceExpression (identifier = test)
-pkg -> USimpleNameReferenceExpression (identifier = pkg)
-Context -> UClass (name = Context)
-inner -> UMethod (name = inner)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-suspendPrivate -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-suspendPrivate -> UMethod (name = suspendPrivate)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-inner -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-top -> UMethod (name = top)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-Context -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-inner -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.txt
index b8593ab5861..d7b2da021c7 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.identifiers.txt
@@ -10,4 +10,4 @@ inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)
 top -> UMethod (name = top)
 Int -> USimpleNameReferenceExpression (identifier = Int)
 Context -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
-inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.fir.txt
deleted file mode 100644
index 0f994709cd8..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.fir.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-pkg -> USimpleNameReferenceExpression (identifier = pkg) from KtDotQualifiedExpression
-test -> USimpleNameReferenceExpression (identifier = test) from KtNameReferenceExpression
-pkg -> USimpleNameReferenceExpression (identifier = pkg) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-suspendPrivate -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-inner -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-inner() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-Context -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-inner -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.txt
index 037d02aaba9..8cd26493713 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/Suspend.refNames.txt
@@ -8,4 +8,4 @@ inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)
 Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
 inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtDotQualifiedExpression
 Context -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
-inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+inner -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.fir.txt
deleted file mode 100644
index 2638ffb7071..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.fir.txt
+++ /dev/null
@@ -1,26 +0,0 @@
-TryCatch -> UClass (name = TryCatch)
-catches -> UMethod (name = catches)
-        body -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    e -> UParameter (name = e)
-    Throwable -> USimpleNameReferenceExpression (identifier = Throwable)
-        catcher -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        finalizer -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-body -> UMethod (name = body)
-catcher -> UMethod (name = catcher)
-finalizer -> UMethod (name = finalizer)
-TryCatchAnnotations -> UClass (name = TryCatchAnnotations)
-java -> USimpleNameReferenceExpression (identifier = java)
-lang -> USimpleNameReferenceExpression (identifier = lang)
-SuppressWarnings -> USimpleNameReferenceExpression (identifier = SuppressWarnings)
-catches -> UMethod (name = catches)
-        body -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    java -> USimpleNameReferenceExpression (identifier = java)
-    lang -> USimpleNameReferenceExpression (identifier = lang)
-    SuppressWarnings -> USimpleNameReferenceExpression (identifier = SuppressWarnings)
-    e -> UParameter (name = e)
-    Throwable -> USimpleNameReferenceExpression (identifier = Throwable)
-        catcher -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        finalizer -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-body -> UMethod (name = body)
-catcher -> UMethod (name = catcher)
-finalizer -> UMethod (name = finalizer)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.txt
index 44a3f798223..955b637f30d 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.identifiers.txt
@@ -23,4 +23,4 @@ catches -> UMethod (name = catches)
         finalizer -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
 body -> UMethod (name = body)
 catcher -> UMethod (name = catcher)
-finalizer -> UMethod (name = finalizer)
+finalizer -> UMethod (name = finalizer)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.fir.txt
deleted file mode 100644
index 83e967d9403..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.fir.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-body -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Throwable -> USimpleNameReferenceExpression (identifier = Throwable) from KtNameReferenceExpression
-catcher -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-finalizer -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-SuppressWarnings -> USimpleNameReferenceExpression (identifier = SuppressWarnings) from KtNameReferenceExpression
-body -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceExpression
-SuppressWarnings -> USimpleNameReferenceExpression (identifier = SuppressWarnings) from KtNameReferenceExpression
-Throwable -> USimpleNameReferenceExpression (identifier = Throwable) from KtNameReferenceExpression
-catcher -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-finalizer -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.txt
index bf64560cd5b..97d5243d609 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TryCatch.refNames.txt
@@ -11,4 +11,4 @@ lang -> USimpleNameReferenceExpression (identifier = lang) from KtNameReferenceE
 SuppressWarnings -> UAnnotation (fqName = java.lang.SuppressWarnings) from KtNameReferenceExpression
 Throwable -> USimpleNameReferenceExpression (identifier = Throwable) from KtNameReferenceExpression
 catcher -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-finalizer -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+finalizer -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.fir.txt
deleted file mode 100644
index feaedccc3d6..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.fir.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-C -> UClass (name = C)
-Test -> USimpleNameReferenceExpression (identifier = Test)
-foo -> UMethod (name = foo)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.txt
similarity index 67%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.txt
index fa24de7e3a5..8134afc629f 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.identifiers.txt
@@ -1,3 +1,3 @@
 C -> UClass (name = C)
 Test -> UAnnotation (fqName = null)
-foo -> UMethod (name = foo)
+foo -> UMethod (name = foo)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.fir.txt
deleted file mode 100644
index 8c6e179d49b..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.fir.txt
+++ /dev/null
@@ -1 +0,0 @@
-Test -> USimpleNameReferenceExpression (identifier = Test) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.txt
similarity index 95%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.txt
index 7a0f6237bba..900eaed9032 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeInAnnotation.refNames.txt
@@ -1 +1 @@
-Test -> UAnnotation (fqName = null) from KtNameReferenceExpression
+Test -> UAnnotation (fqName = null) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.fir.txt
deleted file mode 100644
index 9ecba2060b2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.fir.txt
+++ /dev/null
@@ -1,52 +0,0 @@
-foo -> UMethod (name = foo)
-parameter -> UParameter (name = parameter)
-Int -> USimpleNameReferenceExpression (identifier = Int)
-String -> USimpleNameReferenceExpression (identifier = String)
-    varWithType -> ULocalVariable (name = varWithType)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    varWithoutType -> ULocalVariable (name = varWithoutType)
-    result -> ULocalVariable (name = result)
-    varWithType -> USimpleNameReferenceExpression (identifier = varWithType)
-    + -> USimpleNameReferenceExpression (identifier = +)
-    varWithoutType -> USimpleNameReferenceExpression (identifier = varWithoutType)
-    result -> USimpleNameReferenceExpression (identifier = result)
-ListOfLists -> [!] UnknownKotlinExpression (TYPEALIAS)
-List -> USimpleNameReferenceExpression (identifier = List)
-List -> USimpleNameReferenceExpression (identifier = List)
-String -> USimpleNameReferenceExpression (identifier = String)
-T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
-parameterizedFoo -> UMethod (name = parameterizedFoo)
-arg -> UParameter (name = arg)
-T -> USimpleNameReferenceExpression (identifier = T)
-    a -> ULocalVariable (name = a)
-    arg -> USimpleNameReferenceExpression (identifier = arg)
-    at -> ULocalVariable (name = at)
-    T -> USimpleNameReferenceExpression (identifier = T)
-    arg -> USimpleNameReferenceExpression (identifier = arg)
-    ?: -> USimpleNameReferenceExpression (identifier = ?:)
-    tl -> ULocalVariable (name = tl)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    T -> USimpleNameReferenceExpression (identifier = T)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    at -> USimpleNameReferenceExpression (identifier = at)
-    tsl -> ULocalVariable (name = tsl)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    tl -> USimpleNameReferenceExpression (identifier = tl)
-    map -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        it -> USimpleNameReferenceExpression (identifier = it)
-        toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    lls -> ULocalVariable (name = lls)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    llsAliased -> ULocalVariable (name = llsAliased)
-    ListOfLists -> USimpleNameReferenceExpression (identifier = ListOfLists)
-    llt -> ULocalVariable (name = llt)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    T -> USimpleNameReferenceExpression (identifier = T)
-    parameterizedFoo -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    List -> USimpleNameReferenceExpression (identifier = List)
-    String -> USimpleNameReferenceExpression (identifier = String)
-    emptyList -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.txt
index 5cb1cb44969..cceaa98c6d5 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.identifiers.txt
@@ -49,4 +49,4 @@ T -> USimpleNameReferenceExpression (identifier = T)
     parameterizedFoo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
     List -> USimpleNameReferenceExpression (identifier = List)
     String -> USimpleNameReferenceExpression (identifier = String)
-    emptyList -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+    emptyList -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.fir.txt
deleted file mode 100644
index 392a1ba52d1..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.fir.txt
+++ /dev/null
@@ -1,36 +0,0 @@
-Int -> USimpleNameReferenceExpression (identifier = Int) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-varWithType -> USimpleNameReferenceExpression (identifier = varWithType) from KtNameReferenceExpression
-varWithoutType -> USimpleNameReferenceExpression (identifier = varWithoutType) from KtNameReferenceExpression
-result -> USimpleNameReferenceExpression (identifier = result) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-arg -> USimpleNameReferenceExpression (identifier = arg) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-arg -> USimpleNameReferenceExpression (identifier = arg) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-at -> USimpleNameReferenceExpression (identifier = at) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-map { it.toString() } -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-tl -> USimpleNameReferenceExpression (identifier = tl) from KtNameReferenceExpression
-map -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-toString() -> UQualifiedReferenceExpression from KtDotQualifiedExpression
-it -> USimpleNameReferenceExpression (identifier = it) from KtNameReferenceExpression
-toString -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-ListOfLists -> USimpleNameReferenceExpression (identifier = ListOfLists) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-parameterizedFoo -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-emptyList -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.txt
index 752c83d2b5e..3803173868b 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/TypeReferences.refNames.txt
@@ -33,4 +33,4 @@ T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpress
 parameterizedFoo -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) from KtNameReferenceExpression
 List -> USimpleNameReferenceExpression (identifier = List) from KtNameReferenceExpression
 String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-emptyList -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
+emptyList -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.fir.txt
deleted file mode 100644
index bb07ba7926a..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.fir.txt
+++ /dev/null
@@ -1,23 +0,0 @@
-Callback -> UClass (name = Callback)
-onError -> UMethod (name = onError)
-throwable -> UParameter (name = throwable)
-Throwable -> USimpleNameReferenceExpression (identifier = Throwable)
-Model -> UClass (name = Model)
-    crashMe -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    Callback -> USimpleNameReferenceExpression (identifier = Callback)
-    java -> USimpleNameReferenceExpression (identifier = java)
-        object -> UClass (name = null)
-        Callback -> USimpleNameReferenceExpression (identifier = Callback)
-        onError -> UMethod (name = onError)
-        throwable -> UParameter (name = throwable)
-        Throwable -> USimpleNameReferenceExpression (identifier = Throwable)
-            UnsupportedOperationException -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-T -> [!] UnknownKotlinExpression (TYPE_PARAMETER)
-Any -> USimpleNameReferenceExpression (identifier = Any)
-crashMe -> UMethod (name = crashMe)
-clazz -> UParameter (name = clazz)
-Class -> USimpleNameReferenceExpression (identifier = Class)
-T -> USimpleNameReferenceExpression (identifier = T)
-factory -> UParameter (name = factory)
-T -> USimpleNameReferenceExpression (identifier = T)
-    UnsupportedOperationException -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.txt
index 7aa3b2b6e78..df556ad4d01 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.identifiers.txt
@@ -20,4 +20,4 @@ Class -> USimpleNameReferenceExpression (identifier = Class)
 T -> USimpleNameReferenceExpression (identifier = T)
 factory -> UParameter (name = factory)
 T -> USimpleNameReferenceExpression (identifier = T)
-    UnsupportedOperationException -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+    UnsupportedOperationException -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.fir.txt
deleted file mode 100644
index 2d396493624..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.fir.txt
+++ /dev/null
@@ -1,13 +0,0 @@
-Throwable -> USimpleNameReferenceExpression (identifier = Throwable) from KtNameReferenceExpression
-crashMe -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtDotQualifiedExpression
-Callback -> USimpleNameReferenceExpression (identifier = Callback) from KtNameReferenceExpression
-java -> USimpleNameReferenceExpression (identifier = java) from KtNameReferenceExpression
-Callback -> USimpleNameReferenceExpression (identifier = Callback) from KtNameReferenceExpression
-Throwable -> USimpleNameReferenceExpression (identifier = Throwable) from KtNameReferenceExpression
-UnsupportedOperationException -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExpression
-Class -> USimpleNameReferenceExpression (identifier = Class) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-UnsupportedOperationException -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.txt
index a83a503d572..2459cb6446d 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/UnexpectedContainerException.refNames.txt
@@ -10,4 +10,4 @@ Any -> USimpleNameReferenceExpression (identifier = Any) from KtNameReferenceExp
 Class -> USimpleNameReferenceExpression (identifier = Class) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
 T -> USimpleNameReferenceExpression (identifier = T) from KtNameReferenceExpression
-UnsupportedOperationException -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
+UnsupportedOperationException -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.fir.txt
deleted file mode 100644
index 95ad28b2bae..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.fir.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-getElementsAdditionalResolve -> UMethod (name = getElementsAdditionalResolve)
-string -> UParameter (name = string)
-String -> USimpleNameReferenceExpression (identifier = String)
-String -> USimpleNameReferenceExpression (identifier = String)
-    arr -> ULocalVariable (name = arr)
-    listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    string -> USimpleNameReferenceExpression (identifier = string)
-        bindingContext -> ULocalVariable (name = bindingContext)
-        statementFilter -> ULocalVariable (name = statementFilter)
-        arr -> USimpleNameReferenceExpression (identifier = arr)
-        bindingContext -> USimpleNameReferenceExpression (identifier = bindingContext)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.txt
index 0f165bc1c29..4ab9538f771 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.identifiers.txt
@@ -8,4 +8,4 @@ String -> USimpleNameReferenceExpression (identifier = String)
         bindingContext -> ULocalVariable (name = bindingContext)
         statementFilter -> ULocalVariable (name = statementFilter)
         arr -> USimpleNameReferenceExpression (identifier = arr)
-        bindingContext -> USimpleNameReferenceExpression (identifier = bindingContext)
+        bindingContext -> USimpleNameReferenceExpression (identifier = bindingContext)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.fir.txt
deleted file mode 100644
index 8be932e2199..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.fir.txt
+++ /dev/null
@@ -1,6 +0,0 @@
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-String -> USimpleNameReferenceExpression (identifier = String) from KtNameReferenceExpression
-listOf -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-string -> USimpleNameReferenceExpression (identifier = string) from KtNameReferenceExpression
-arr -> USimpleNameReferenceExpression (identifier = arr) from KtNameReferenceExpression
-bindingContext -> USimpleNameReferenceExpression (identifier = bindingContext) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.txt
similarity index 92%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.txt
index 3e37d15b62f..4bb50660d06 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenAndDestructing.refNames.txt
@@ -3,4 +3,4 @@ String -> USimpleNameReferenceExpression (identifier = String) from KtNameRefere
 listOf -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) from KtNameReferenceExpression
 string -> USimpleNameReferenceExpression (identifier = string) from KtNameReferenceExpression
 arr -> USimpleNameReferenceExpression (identifier = arr) from KtNameReferenceExpression
-bindingContext -> USimpleNameReferenceExpression (identifier = bindingContext) from KtNameReferenceExpression
+bindingContext -> USimpleNameReferenceExpression (identifier = bindingContext) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.fir.txt
deleted file mode 100644
index 35f8bd52bc2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.fir.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-a -> UField (name = a)
-readLine -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
-b -> UField (name = b)
-a -> USimpleNameReferenceExpression (identifier = a)
-a -> null
-    println -> null
-    println -> null
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.txt
similarity index 91%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.txt
index 57e33c5c48c..d4b602e2637 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.identifiers.txt
@@ -4,4 +4,4 @@ b -> UField (name = b)
 a -> USimpleNameReferenceExpression (identifier = a)
 a -> null
     println -> null
-    println -> null
+    println -> null
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.fir.txt
deleted file mode 100644
index bae9fa6a627..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.fir.txt
+++ /dev/null
@@ -1,2 +0,0 @@
-readLine -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.fe10.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.txt
similarity index 90%
rename from uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.txt
index 60cca22d375..ce183135988 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/WhenStringLiteral.refNames.txt
@@ -1,2 +1,2 @@
 readLine -> UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) from KtNameReferenceExpression
-a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
+a -> USimpleNameReferenceExpression (identifier = a) from KtNameReferenceExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.identifiers.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.identifiers.fir.txt
index bc22caef15f..e8ad5a4d3e6 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.identifiers.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.identifiers.fir.txt
@@ -1,4 +1,4 @@
 a -> UMethod (name = a)
     a -> ULocalVariable (name = a)
-    Obj -> [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    Obj -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
 Obj -> UClass (name = Obj)
diff --git a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.refNames.fir.txt b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.refNames.fir.txt
index 7da2e580e43..0f995b9229d 100644
--- a/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.refNames.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyIdentifiers/ea101715.refNames.fir.txt
@@ -1 +1 @@
-Obj -> [!] UnknownKotlinExpression (CALL_EXPRESSION) from KtNameReferenceExpression
+Obj -> UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) from KtNameReferenceExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.fir.txt
deleted file mode 100644
index 01fb540c5ce..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.fir.txt
+++ /dev/null
@@ -1,52 +0,0 @@
-UFile (package = )
-    UClass (name = AnnotatedExpressionsKt)
-        UMethod (name = foo)
-            UBlockExpression
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = a)
-                        UAnnotation (fqName = not-implemented-annotation)
-                        ULiteralExpression (value = 1)
-                UDeclarationsExpression
-                    ULocalVariable (name = b)
-                        UAnnotation (fqName = not-implemented-annotation)
-                        ULiteralExpression (value = 2)
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = c)
-                        UExpressionList (elvis)
-                            UDeclarationsExpression
-                                ULocalVariable (name = varae507364)
-                                    [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-                            UIfExpression
-                                UBinaryExpression (operator = !=)
-                                    USimpleNameReferenceExpression (identifier = varae507364)
-                                    ULiteralExpression (value = null)
-                                USimpleNameReferenceExpression (identifier = varae507364)
-                                USimpleNameReferenceExpression (identifier = b)
-        UMethod (name = annotatedSwitch)
-            UParameter (name = str)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
-                UReturnExpression
-                    USwitchExpression
-                        UExpressionList (when)
-                            USwitchClauseExpressionWithBody
-                                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-                                UExpressionList (when_entry)
-                                    UYieldExpression
-                                        ULiteralExpression (value = null)
-                            USwitchClauseExpressionWithBody
-                                UBinaryExpression (operator = !=)
-                                    UQualifiedReferenceExpression
-                                        USimpleNameReferenceExpression (identifier = str)
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                                    ULiteralExpression (value = null)
-                                UExpressionList (when_entry)
-                                    UYieldExpression
-                                        ULiteralExpression (value = null)
-                            USwitchClauseExpressionWithBody
-                                UExpressionList (when_entry)
-                                    UYieldExpression
-                                        ULiteralExpression (value = 1)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.txt
index 0efcd06420a..6f1edeac8f5 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.log.txt
@@ -71,4 +71,4 @@ UFile (package = )
                             USwitchClauseExpressionWithBody
                                 UExpressionList (when_entry)
                                     UYieldExpression
-                                        ULiteralExpression (value = 1)
+                                        ULiteralExpression (value = 1)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.fir.txt
deleted file mode 100644
index 5acd196bf96..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.fir.txt
+++ /dev/null
@@ -1,30 +0,0 @@
-public final class AnnotatedExpressionsKt {
-    public static final fun foo() : void {
-        [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-        @not-implemented-annotation var a: int = 1
-        @not-implemented-annotation var b: int = 2
-        [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-        [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-        var c: int = elvis {
-            var varae507364: int = [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)
-            if (varae507364 != null) varae507364 else b
-        }
-    }
-    public static final fun annotatedSwitch(@org.jetbrains.annotations.NotNull str: java.lang.String) : java.lang.Integer {
-        return switch  {
-            [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) -> {
-                yield null
-            }
-
-            str.[!] UnknownKotlinExpression (CALL_EXPRESSION) != null -> {
-                yield null
-            }
-
-             -> {
-                yield 1
-            }
-
-        }
-
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.txt
index 6ff5390c33f..42e271bd056 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotatedExpressions.render.txt
@@ -27,4 +27,4 @@ public final class AnnotatedExpressionsKt {
         }

     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationComplex.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationComplex.log.fir.txt
index 60e8f6a98f7..1f8848f48bc 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationComplex.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationComplex.log.fir.txt
@@ -2,21 +2,48 @@ UFile (package = )
     UClass (name = Annotation)
         UAnnotationMethod (name = strings)
     UClass (name = A)
-        UAnnotation (fqName = not-implemented-annotation)
+        UAnnotation (fqName = Annotation)
         UMethod (name = A)
     UClass (name = AnnotationInner)
         UAnnotationMethod (name = value)
     UClass (name = B1)
-        UAnnotation (fqName = not-implemented-annotation)
+        UAnnotation (fqName = AnnotationArray)
+            UNamedExpression (name = value)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                    UIdentifier (Identifier (Annotation))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
         UMethod (name = B1)
     UClass (name = B2)
-        UAnnotation (fqName = not-implemented-annotation)
+        UAnnotation (fqName = AnnotationArray)
+            UNamedExpression (name = value)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2))
+                    UIdentifier (Identifier (Annotation))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    ULiteralExpression (value = "sv1")
+                    ULiteralExpression (value = "sv2")
         UMethod (name = B2)
     UClass (name = AnnotationArray)
         UAnnotationMethod (name = value)
     UClass (name = C)
-        UAnnotation (fqName = not-implemented-annotation)
+        UAnnotation (fqName = AnnotationArray)
+            UNamedExpression (name = value)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (Annotation))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                        UIdentifier (Identifier (arrayOf))
+                        USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null)
+                        ULiteralExpression (value = "sar1")
+                        ULiteralExpression (value = "sar2")
         UMethod (name = C)
     UClass (name = C2)
-        UAnnotation (fqName = not-implemented-annotation)
+        UAnnotation (fqName = AnnotationArray)
+            UNamedExpression (name = value)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (Annotation))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 2))
+                        UIdentifier (Identifier ([))
+                        ULiteralExpression (value = "[sar]1")
+                        ULiteralExpression (value = "[sar]2")
         UMethod (name = C2)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.log.fir.txt
index ed3dadbbafc..2ea41833b51 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.log.fir.txt
@@ -1,18 +1,61 @@
 UFile (package = )
     UClass (name = AnnotationParametersKt)
         UMethod (name = foo)
+            UAnnotation (fqName = RequiresPermission)
+                UNamedExpression (name = anyOf)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))
+                        UIdentifier (Identifier (intArrayOf))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                        ULiteralExpression (value = 1)
+                        ULiteralExpression (value = 2)
+                        ULiteralExpression (value = 3)
+            UAnnotation (fqName = IntRange)
+                UNamedExpression (name = from)
+                    ULiteralExpression (value = 10)
+                UNamedExpression (name = to)
+                    ULiteralExpression (value = 0)
+            UAnnotation (fqName = WithDefaultValue)
+            UAnnotation (fqName = SuppressLint)
+                UNamedExpression (name = value)
+                    ULiteralExpression (value = "Lorem")
             UBlockExpression
                 UReturnExpression
                     ULiteralExpression (value = 5)
         UMethod (name = bar)
+            UAnnotation (fqName = IntRange)
+                UNamedExpression (name = from)
+                    ULiteralExpression (value = 0)
+                UNamedExpression (name = to)
+                    ULiteralExpression (value = 100)
+            UAnnotation (fqName = SuppressLint)
+                UNamedExpression (name = value)
+                    ULiteralExpression (value = "Lorem")
+                UNamedExpression (name = value)
+                    ULiteralExpression (value = "Ipsum")
+                UNamedExpression (name = value)
+                    ULiteralExpression (value = "Dolor")
             UBlockExpression
                 UReturnExpression
                     USimpleNameReferenceExpression (identifier = Unit)
         UMethod (name = fooWithArrLiteral)
+            UAnnotation (fqName = RequiresPermission)
+                UNamedExpression (name = anyOf)
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3))
+                        UIdentifier (Identifier ([))
+                        ULiteralExpression (value = 1)
+                        ULiteralExpression (value = 2)
+                        ULiteralExpression (value = 3)
             UBlockExpression
                 UReturnExpression
                     ULiteralExpression (value = 5)
         UMethod (name = fooWithStrArrLiteral)
+            UAnnotation (fqName = RequiresStrPermission)
+                UNamedExpression (name = strs)
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3))
+                        UIdentifier (Identifier ([))
+                        ULiteralExpression (value = "a")
+                        ULiteralExpression (value = "b")
+                        ULiteralExpression (value = "c")
             UBlockExpression
                 UReturnExpression
                     ULiteralExpression (value = 3)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.render.fir.txt
index ea601d529b3..1c243b8721e 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/AnnotationParameters.render.fir.txt
@@ -1,13 +1,21 @@
 public final class AnnotationParametersKt {
+    @RequiresPermission(anyOf = <anonymous class>(1, 2, 3))
+    @IntRange(from = 10, to = 0)
+    @WithDefaultValue
+    @SuppressLint(value = "Lorem")
     public static final fun foo() : int {
         return 5
     }
+    @IntRange(from = 0, to = 100)
+    @SuppressLint(value = "Lorem", value = "Ipsum", value = "Dolor")
     public static final fun bar() : void {
         return Unit
     }
+    @RequiresPermission(anyOf = collectionLiteral[1, 2, 3])
     public static final fun fooWithArrLiteral() : int {
         return 5
     }
+    @RequiresStrPermission(strs = collectionLiteral["a", "b", "c"])
     public static final fun fooWithStrArrLiteral() : int {
         return 3
     }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.log.fir.txt
index c930f5acdaa..628039dfe24 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.log.fir.txt
@@ -12,13 +12,24 @@ UFile (package = )
                                     UBlockExpression
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = runnable)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (run))
+                        USimpleNameReferenceExpression (identifier = run, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = runnable2)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                            UIdentifier (Identifier (Runnable))
+                            USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null)
+                            ULambdaExpression
+                                UBlockExpression
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                        UIdentifier (Identifier (println))
+                                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = runnable2)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (run))
+                        USimpleNameReferenceExpression (identifier = run, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = closeableRunnable)
                         UObjectLiteralExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.render.fir.txt
index 8e8b6f77d39..84a1ee397cf 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Anonymous.render.fir.txt
@@ -4,9 +4,11 @@ import java.io.InputStream
 public final class AnonymousKt {
     public static final fun foo() : void {
         var runnable: java.lang.Object = anonymous object : Runnable { override fun run() {} }
-        runnable.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var runnable2: java.lang.Runnable = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        runnable2.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        runnable.run()
+        var runnable2: java.lang.Runnable = Runnable({
+            println()
+        })
+        runnable2.run()
         var closeableRunnable: java.lang.Object = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }
         var runnableIs: java.io.InputStream = anonymous object : InputStream(), Runnable { override fun read(): Int = 0; override fun run() {} }
     }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.log.fir.txt
index fb3f8521060..3176697c815 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.log.fir.txt
@@ -36,4 +36,7 @@ UFile (package = )
                                         UAnnotation (fqName = org.jetbrains.annotations.NotNull)
                                     UBlockExpression
                                         UReturnExpression
-                                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                                                UIdentifier (Identifier (Used))
+                                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                                                UThisExpression (label = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.render.fir.txt
index e624aab9e62..16c93fc5ffa 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/BrokenMethod.render.fir.txt
@@ -16,7 +16,7 @@ public final class BrokenMethodKt {
                 public static final class Companion {
                     private fun Companion() = UastEmptyExpression
                     public final fun doStuff1(@org.jetbrains.annotations.NotNull $this$doStuff1: java.lang.Object) : TestUsed.Used {
-                        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        return <anonymous class>(this)
                     }
                 }
             }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.fir.txt
deleted file mode 100644
index ac80ad3e333..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-UFile (package = )
-    UClass (name = A)
-        UAnnotation (fqName = not-implemented-annotation)
-        UMethod (name = A)
-    UClass (name = MyAnnotation)
-        UAnnotationMethod (name = text)
-    UClass (name = B)
-        UAnnotation (fqName = not-implemented-annotation)
-        UField (name = Companion)
-            UAnnotation (fqName = null)
-        UMethod (name = B)
-        UClass (name = InB)
-            UAnnotation (fqName = not-implemented-annotation)
-            UMethod (name = InB)
-        UClass (name = Companion)
-            UAnnotation (fqName = not-implemented-annotation)
-            UMethod (name = Companion)
-    UClass (name = Obj)
-        UAnnotation (fqName = not-implemented-annotation)
-        UField (name = INSTANCE)
-            UAnnotation (fqName = null)
-        UMethod (name = Obj)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.txt
index fce8469ccd1..0f720693fc5 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ClassAnnotation.log.txt
@@ -27,4 +27,4 @@ UFile (package = )
                 ULiteralExpression (value = "object")
         UField (name = INSTANCE)
             UAnnotation (fqName = null)
-        UMethod (name = Obj)
+        UMethod (name = Obj)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.log.fir.txt
index c00d70e5e2d..ac0a3a12c76 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.log.fir.txt
@@ -7,25 +7,37 @@ UFile (package = )
         UMethod (name = topLevelFun)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (TODO))
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null)
         UMethod (name = funPlainCall)
             UParameter (name = a)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (TODO))
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null)
         UMethod (name = funNamedArgumentsCall)
             UParameter (name = a)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (TODO))
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null)
         UMethod (name = func)
             UParameter (name = a)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (funPlainCall))
+                    USimpleNameReferenceExpression (identifier = funPlainCall, resolvesTo = null)
+                    ULiteralExpression (value = 42)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (funNamedArgumentsCall))
+                    USimpleNameReferenceExpression (identifier = funNamedArgumentsCall, resolvesTo = null)
+                    ULiteralExpression (value = 42)
                 UWhileExpression
                     ULiteralExpression (value = true)
                     UBlockExpression
@@ -45,17 +57,23 @@ UFile (package = )
             UParameter (name = t)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier ())
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
         UMethod (name = getClassLevelProperty)
         UMethod (name = classLevelMethod)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (TODO))
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null)
         UClass (name = NestedClass)
             UMethod (name = NestedClass)
     UClass (name = MyBooleanEnum)
-        UField (name = TRUE)
+        UEnumConstant (name = TRUE)
             UAnnotation (fqName = null)
-        UField (name = FALSE)
+            USimpleNameReferenceExpression (identifier = MyBooleanEnum)
+        UEnumConstant (name = FALSE)
             UAnnotation (fqName = null)
+            USimpleNameReferenceExpression (identifier = MyBooleanEnum)
         UMethod (name = MyBooleanEnum)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.render.fir.txt
index 18111eb1dc5..3f5ed344777 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/CommentOwners.render.fir.txt
@@ -2,17 +2,17 @@ public final class CommentOwnersKt {
     @org.jetbrains.annotations.NotNull private static final var topLevelProperty: int = 42
     public static final fun getTopLevelProperty() : int = UastEmptyExpression
     public static final fun topLevelFun() : void {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return TODO()
     }
     public static final fun funPlainCall(@org.jetbrains.annotations.NotNull a: int) : void {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return TODO()
     }
     public static final fun funNamedArgumentsCall(@org.jetbrains.annotations.NotNull a: int) : void {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return TODO()
     }
     public static final fun func(@org.jetbrains.annotations.NotNull a: int) : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        funPlainCall(42)
+        funNamedArgumentsCall(42)
         while (true) {
             break
         }
@@ -26,11 +26,11 @@ public final class CommentOwnersKt {
 public final class TopLevelClass {
     @org.jetbrains.annotations.NotNull private final var classLevelProperty: int = 42
     public fun TopLevelClass(@org.jetbrains.annotations.NotNull t: int) {
-        UastEmptyExpression
+        <anonymous class>()
     }
     public final fun getClassLevelProperty() : int = UastEmptyExpression
     public final fun classLevelMethod() : void {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return TODO()
     }
     public static final class NestedClass {
         public fun NestedClass() = UastEmptyExpression
@@ -38,7 +38,7 @@ public final class TopLevelClass {
 }

 public final enum MyBooleanEnum {
-    @null public static final var TRUE: MyBooleanEnum
-    @null public static final var FALSE: MyBooleanEnum
+    @null TRUE
+    @null FALSE
     private fun MyBooleanEnum() = UastEmptyExpression
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.log.fir.txt
index 867f9133aca..89c2e3a689a 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.log.fir.txt
@@ -21,7 +21,10 @@ UFile (package = )
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = java)
                             USimpleNameReferenceExpression (identifier = lang)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                            UIdentifier (Identifier (String))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                            ULiteralExpression (value = "Margherita")
         UMethod (name = contains)
             UParameter (name = ingredient)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.render.fir.txt
index 81beffc7112..bc6bf52acda 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Comments.render.fir.txt
@@ -9,7 +9,7 @@ public final class Margherita : Pizza {
     public fun Margherita(@org.jetbrains.annotations.NotNull size: int) = UastEmptyExpression
     public fun getSize() : int = UastEmptyExpression
     public fun getName() : java.lang.String {
-        return java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return java.lang.<anonymous class>("Margherita")
     }
     public fun contains(@org.jetbrains.annotations.NotNull ingredient: Pizza.Ingredient) : boolean {
         return false
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.log.fir.txt
index d88068fc3b5..28dcd962a9a 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.log.fir.txt
@@ -5,7 +5,10 @@ UFile (package = )
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                        UIdentifier (Identifier (BaseImpl))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                        USimpleNameReferenceExpression (identifier = i)
     UClass (name = Base)
         UMethod (name = print)
     UClass (name = BaseImpl)
@@ -17,11 +20,17 @@ UFile (package = )
         UMethod (name = getX)
         UMethod (name = print)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (print))
+                    USimpleNameReferenceExpression (identifier = print, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = x)
     UClass (name = Derived)
         UExpressionList (super_delegation)
             UTypeReferenceExpression (name = Base)
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                UIdentifier (Identifier (createBase))
+                USimpleNameReferenceExpression (identifier = createBase, resolvesTo = null)
+                ULiteralExpression (value = 10)
         UExpressionList (super_delegation)
             UTypeReferenceExpression (name = java.lang.CharSequence)
             ULiteralExpression (value = "abc")
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.render.fir.txt
index ac31348d63a..e85b983b892 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ConstructorDelegate.render.fir.txt
@@ -1,6 +1,6 @@
 public final class ConstructorDelegateKt {
     public static final fun createBase(@org.jetbrains.annotations.NotNull i: int) : Base {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return <anonymous class>(i)
     }
 }

@@ -13,7 +13,7 @@ public final class BaseImpl : Base {
     public fun BaseImpl(@org.jetbrains.annotations.NotNull x: int) = UastEmptyExpression
     public final fun getX() : int = UastEmptyExpression
     public fun print() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        print(x)
     }
 }

diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.log.fir.txt
index 46538a86b5c..ae621e57385 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.log.fir.txt
@@ -9,7 +9,14 @@ UFile (package = )
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (this))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UQualifiedReferenceExpression
+                        USimpleNameReferenceExpression (identifier = i)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = getStr)
     UClass (name = AWithInit)
         UField (name = str)
@@ -19,12 +26,21 @@ UFile (package = )
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UBlockExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (println))
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
         UMethod (name = AWithInit)
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (this))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UQualifiedReferenceExpression
+                        USimpleNameReferenceExpression (identifier = i)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = getStr)
     UClass (name = AWith2Init)
         UField (name = str)
@@ -34,14 +50,27 @@ UFile (package = )
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UBlockExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (println))
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                        ULiteralExpression (value = 1)
                 UBlockExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (println))
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                        ULiteralExpression (value = 2)
         UMethod (name = AWith2Init)
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (this))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UQualifiedReferenceExpression
+                        USimpleNameReferenceExpression (identifier = i)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = getStr)
     UClass (name = AOnlyInit)
         UMethod (name = AOnlyInit)
@@ -52,17 +81,23 @@ UFile (package = )
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier ())
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UBinaryExpression (operator = =)
                     USimpleNameReferenceExpression (identifier = a)
                     UQualifiedReferenceExpression
                         USimpleNameReferenceExpression (identifier = i)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = AWithSecondary)
             UParameter (name = s)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier ())
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UBinaryExpression (operator = =)
                     USimpleNameReferenceExpression (identifier = a)
                     USimpleNameReferenceExpression (identifier = s)
@@ -77,19 +112,27 @@ UFile (package = )
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier ())
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UBlockExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (println))
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
                 UBinaryExpression (operator = =)
                     USimpleNameReferenceExpression (identifier = a)
                     UQualifiedReferenceExpression
                         USimpleNameReferenceExpression (identifier = i)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = AWithSecondaryInit)
             UParameter (name = s)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier ())
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UBinaryExpression (operator = =)
                     USimpleNameReferenceExpression (identifier = a)
                     USimpleNameReferenceExpression (identifier = s)
@@ -98,7 +141,9 @@ UFile (package = )
                         USimpleNameReferenceExpression (identifier = s)
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = local)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (toString))
+                        USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = getA)
         UMethod (name = setA)
             UParameter (name = value)
@@ -115,5 +160,7 @@ UFile (package = )
                         USimpleNameReferenceExpression (identifier = a)
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = i)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (toString))
+                                USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = getA)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.render.fir.txt
index f149ff09366..6e424962de4 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Constructors.render.fir.txt
@@ -2,7 +2,7 @@ public final class A {
     @org.jetbrains.annotations.NotNull private final var str: java.lang.String
     public fun A(@org.jetbrains.annotations.NotNull str: java.lang.String) = UastEmptyExpression
     public fun A(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
+        <anonymous class>(i.toString())
     }
     public final fun getStr() : java.lang.String = UastEmptyExpression
 }
@@ -11,11 +11,11 @@ public final class AWithInit {
     @org.jetbrains.annotations.NotNull private final var str: java.lang.String
     public fun AWithInit(@org.jetbrains.annotations.NotNull str: java.lang.String) {
         {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            println()
         }
     }
     public fun AWithInit(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
+        <anonymous class>(i.toString())
     }
     public final fun getStr() : java.lang.String = UastEmptyExpression
 }
@@ -24,14 +24,14 @@ public final class AWith2Init {
     @org.jetbrains.annotations.NotNull private final var str: java.lang.String
     public fun AWith2Init(@org.jetbrains.annotations.NotNull str: java.lang.String) {
         {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            println(1)
         }
         {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            println(2)
         }
     }
     public fun AWith2Init(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
+        <anonymous class>(i.toString())
     }
     public final fun getStr() : java.lang.String = UastEmptyExpression
 }
@@ -43,11 +43,11 @@ public final class AOnlyInit {
 public final class AWithSecondary {
     @org.jetbrains.annotations.NotNull private var a: java.lang.String
     public fun AWithSecondary(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
-        a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        <anonymous class>()
+        a = i.toString()
     }
     public fun AWithSecondary(@org.jetbrains.annotations.NotNull s: java.lang.String) {
-        UastEmptyExpression
+        <anonymous class>()
         a = s
     }
     public final fun getA() : java.lang.String = UastEmptyExpression
@@ -57,17 +57,17 @@ public final class AWithSecondary {
 public final class AWithSecondaryInit {
     @org.jetbrains.annotations.NotNull private var a: java.lang.String
     public fun AWithSecondaryInit(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
+        <anonymous class>()
         {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            println()
         }
-        a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        a = i.toString()
     }
     public fun AWithSecondaryInit(@org.jetbrains.annotations.NotNull s: java.lang.String) {
-        UastEmptyExpression
+        <anonymous class>()
         a = s
         var local: java.lang.String = s
-        local.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        local.toString()
     }
     public final fun getA() : java.lang.String = UastEmptyExpression
     public final fun setA(@org.jetbrains.annotations.NotNull value: java.lang.String) : void = UastEmptyExpression
@@ -77,7 +77,7 @@ public final class AWithFieldInit {
     @org.jetbrains.annotations.NotNull private final var a: java.lang.String
     public fun AWithFieldInit(@org.jetbrains.annotations.NotNull i: int) {
         {
-            a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+            a = i.toString()
         }
     }
     public final fun getA() : java.lang.String = UastEmptyExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.log.fir.txt
index 94628b38555..4dba24754a6 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.log.fir.txt
@@ -19,10 +19,26 @@ UFile (package = )
     UClass (name = Some)
         UField (name = lambda)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                UIdentifier (Identifier (lazy))
+                USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null)
+                ULambdaExpression
+                    UBlockExpression
+                        UReturnExpression
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3))
+                                UIdentifier (Identifier (MyColor))
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                                ULiteralExpression (value = 1)
+                                ULiteralExpression (value = 2)
+                                ULiteralExpression (value = 3)
         UField (name = nonLazy)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3))
+                UIdentifier (Identifier (MyColor))
+                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                ULiteralExpression (value = 1)
+                ULiteralExpression (value = 2)
+                ULiteralExpression (value = 3)
         UMethod (name = Some)
         UMethod (name = getDelegate)
         UMethod (name = getLambda)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.render.fir.txt
index b08e4c7a820..2528cb6f798 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Delegate.render.fir.txt
@@ -9,8 +9,10 @@ public final class MyColor {
 }

 public final class Some {
-    @org.jetbrains.annotations.NotNull private final var lambda: kotlin.Lazy<? extends MyColor> = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    @org.jetbrains.annotations.NotNull private final var nonLazy: MyColor = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    @org.jetbrains.annotations.NotNull private final var lambda: kotlin.Lazy<? extends MyColor> = lazy({
+        return <anonymous class>(1, 2, 3)
+    })
+    @org.jetbrains.annotations.NotNull private final var nonLazy: MyColor = <anonymous class>(1, 2, 3)
     public fun Some() = UastEmptyExpression
     public final fun getDelegate() : MyColor = UastEmptyExpression
     public final fun getLambda() : kotlin.Lazy<? extends MyColor> = UastEmptyExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.log.fir.txt
index 5433b446579..2e54839a0da 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.log.fir.txt
@@ -13,7 +13,7 @@ UFile (package = )
                 UDeclarationsExpression
                     ULocalVariable (name = var465978a0)
                         UAnnotation (fqName = null)
-                        UAnnotation (fqName = not-implemented-annotation)
+                        UAnnotation (fqName = null)
                         UBinaryExpressionWithType
                             USimpleNameReferenceExpression (identifier = data)
                             UTypeReferenceExpression (name = kotlin.Pair<? extends java.lang.String,? extends java.lang.String>)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.render.fir.txt
index 5a7fa2285ed..ece449fcbb3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/DestructuringDeclaration.render.fir.txt
@@ -1,6 +1,6 @@
 public final class DestructuringDeclarationKt {
     public static final fun foo(@org.jetbrains.annotations.NotNull data: java.lang.Object) : void {
         @null var var268d41a5: kotlin.Pair<? extends java.lang.String,? extends java.lang.Integer> = "foo" <other> 1
-        @null @not-implemented-annotation var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>
+        @null @null var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.fir.txt
deleted file mode 100644
index 325ec950b19..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.fir.txt
+++ /dev/null
@@ -1,36 +0,0 @@
-UFile (package = )
-    UClass (name = ElvisKt)
-        UMethod (name = foo)
-            UParameter (name = bar)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
-                UReturnExpression
-                    ULiteralExpression (value = null)
-        UMethod (name = bar)
-            UBlockExpression
-                UReturnExpression
-                    ULiteralExpression (value = 42)
-        UMethod (name = baz)
-            UBlockExpression
-                UReturnExpression
-                    UExpressionList (elvis)
-                        UDeclarationsExpression
-                            ULocalVariable (name = var243c51a0)
-                                UExpressionList (elvis)
-                                    UDeclarationsExpression
-                                        ULocalVariable (name = varc4aef569)
-                                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                                    UIfExpression
-                                        UBinaryExpression (operator = !=)
-                                            USimpleNameReferenceExpression (identifier = varc4aef569)
-                                            ULiteralExpression (value = null)
-                                        USimpleNameReferenceExpression (identifier = varc4aef569)
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                        UIfExpression
-                            UBinaryExpression (operator = !=)
-                                USimpleNameReferenceExpression (identifier = var243c51a0)
-                                ULiteralExpression (value = null)
-                            USimpleNameReferenceExpression (identifier = var243c51a0)
-                            UQualifiedReferenceExpression
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.txt
index 33160a30513..d789f5f6c4c 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.log.txt
@@ -43,4 +43,4 @@ UFile (package = )
                                     USimpleNameReferenceExpression (identifier = bar, resolvesTo = null)
                                 UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
                                     UIdentifier (Identifier (toString))
-                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
+                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.fir.txt
deleted file mode 100644
index 974a2afe1ab..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.fir.txt
+++ /dev/null
@@ -1,17 +0,0 @@
-public final class ElvisKt {
-    public static final fun foo(@org.jetbrains.annotations.NotNull bar: java.lang.String) : java.lang.String {
-        return null
-    }
-    public static final fun bar() : int {
-        return 42
-    }
-    public static final fun baz() : java.lang.String {
-        return elvis {
-            var var243c51a0: java.lang.String = elvis {
-                var varc4aef569: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                if (varc4aef569 != null) varc4aef569 else [!] UnknownKotlinExpression (CALL_EXPRESSION)
-            }
-            if (var243c51a0 != null) var243c51a0 else [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        }
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.txt
index 2554f7d42fa..16aeef6c9f3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Elvis.render.txt
@@ -14,4 +14,4 @@ public final class ElvisKt {
             if (var243c51a0 != null) var243c51a0 else bar().toString()
         }
     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.fir.txt
deleted file mode 100644
index aceabfb149e..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.fir.txt
+++ /dev/null
@@ -1,12 +0,0 @@
-UFile (package = )
-    UClass (name = ElvisTypeKt)
-        UMethod (name = foo)
-            UParameter (name = text)
-                UAnnotation (fqName = org.jetbrains.annotations.Nullable)
-            UBlockExpression
-                UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        UMethod (name = bar)
-            UParameter (name = o)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.txt
index 59e001e1ed5..fa614453c34 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.log.txt
@@ -21,4 +21,4 @@ UFile (package = )
         UMethod (name = bar)
             UParameter (name = o)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
+            UBlockExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.fir.txt
deleted file mode 100644
index 6a166f18dae..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.fir.txt
+++ /dev/null
@@ -1,7 +0,0 @@
-public final class ElvisTypeKt {
-    public static final fun foo(@org.jetbrains.annotations.Nullable text: java.lang.String) : void {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    }
-    public static final fun bar(@org.jetbrains.annotations.NotNull o: java.lang.Object) : void {
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.txt
index 5e7d951df0b..f11ff4d167a 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ElvisType.render.txt
@@ -7,4 +7,4 @@ public final class ElvisTypeKt {
     }
     public static final fun bar(@org.jetbrains.annotations.NotNull o: java.lang.Object) : void {
     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.log.fir.txt
index 6e71a2670e0..4718da810bd 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.log.fir.txt
@@ -2,8 +2,15 @@ UFile (package = )
     UClass (name = Style)
         UField (name = value)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-        UField (name = SHEET)
+        UEnumConstant (name = SHEET)
             UAnnotation (fqName = null)
+            USimpleNameReferenceExpression (identifier = Style)
+            ULiteralExpression (value = "foo")
+            UClass (name = SHEET)
+                UMethod (name = getExitAnimation)
+                    UBlockExpression
+                        UReturnExpression
+                            ULiteralExpression (value = "bar")
         UMethod (name = Style)
             UParameter (name = value)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.render.fir.txt
index 4e5f89851a7..9a48db83f9e 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValueMembers.render.fir.txt
@@ -1,6 +1,10 @@
 public final enum Style {
     @org.jetbrains.annotations.NotNull private final var value: java.lang.String
-    @null public static final var SHEET: Style
+    @null SHEET("foo") {
+        public fun getExitAnimation() : java.lang.String {
+            return "bar"
+        }
+    }
     private fun Style(@org.jetbrains.annotations.NotNull value: java.lang.String) = UastEmptyExpression
     public final fun getValue() : java.lang.String = UastEmptyExpression
     public abstract fun getExitAnimation() : java.lang.String = UastEmptyExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.log.fir.txt
index 583d74dbec5..b8f9524cb38 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.log.fir.txt
@@ -2,14 +2,22 @@ UFile (package = )
     UClass (name = Style)
         UField (name = value)
             UAnnotation (fqName = org.jetbrains.annotations.Nullable)
-        UField (name = SYSTEM)
+        UEnumConstant (name = SYSTEM)
             UAnnotation (fqName = null)
-        UField (name = USER)
+            USimpleNameReferenceExpression (identifier = Style)
+            ULiteralExpression (value = "system")
+        UEnumConstant (name = USER)
             UAnnotation (fqName = null)
-        UField (name = INTERNAL)
+            USimpleNameReferenceExpression (identifier = Style)
+            ULiteralExpression (value = "user")
+        UEnumConstant (name = INTERNAL)
             UAnnotation (fqName = null)
-        UField (name = UNKNOWN)
+            USimpleNameReferenceExpression (identifier = Style)
+            ULiteralExpression (value = "internal")
+        UEnumConstant (name = UNKNOWN)
             UAnnotation (fqName = null)
+            USimpleNameReferenceExpression (identifier = Style)
+            ULiteralExpression (value = null)
         UMethod (name = Style)
             UParameter (name = value)
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.render.fir.txt
index 494b2d1bf87..d6335425eb3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/EnumValuesConstructors.render.fir.txt
@@ -1,9 +1,9 @@
 public final enum Style {
     @org.jetbrains.annotations.Nullable private final var value: java.lang.String
-    @null public static final var SYSTEM: Style
-    @null public static final var USER: Style
-    @null public static final var INTERNAL: Style
-    @null public static final var UNKNOWN: Style
+    @null SYSTEM("system")
+    @null USER("user")
+    @null INTERNAL("internal")
+    @null UNKNOWN(null)
     private fun Style(@org.jetbrains.annotations.Nullable value: java.lang.String) = UastEmptyExpression
     public final fun getValue() : java.lang.String = UastEmptyExpression
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.log.fir.txt
index ce69fd2690d..4beffa78fd4 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.log.fir.txt
@@ -3,7 +3,13 @@ UFile (package = )
         UMethod (name = getBar)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (Unresolved))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                            UIdentifier (Identifier (id))
+                            USimpleNameReferenceExpression (identifier = id, resolvesTo = null)
+                            ULiteralExpression (value = 42)
         UMethod (name = id)
             UParameter (name = x)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.render.fir.txt
index 0d4a34d5b26..e6d6b72c2c7 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/InferenceInsideUnresolvedConstructor.render.fir.txt
@@ -1,6 +1,6 @@
 public final class InferenceInsideUnresolvedConstructorKt {
     public static final fun getBar() : java.lang.Object {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return <anonymous class>(id(42))
     }
     public static final fun id(@org.jetbrains.annotations.NotNull x: T) : T {
         return x
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.log.fir.txt
index a5ad2d63d1e..2ffb3823735 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.log.fir.txt
@@ -7,7 +7,17 @@ UFile (package = )
                 UQualifiedReferenceExpression
                     UQualifiedReferenceExpression
                         USimpleNameReferenceExpression (identifier = list)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (filterIsInstance))
+                            USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                        UIdentifier (Identifier (mapTo))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (mutableSetOf))
+                            USimpleNameReferenceExpression (identifier = mutableSetOf, resolvesTo = null)
+                        ULambdaExpression
+                            UParameter (name = it)
+                            UBlockExpression
     UClass (name = Some)
         UMethod (name = Some)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.render.fir.txt
index 9f42125a139..b24fd699140 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/InnerNonFixedTypeVariable.render.fir.txt
@@ -1,6 +1,9 @@
 public final class InnerNonFixedTypeVariableKt {
     public static final fun test(@org.jetbrains.annotations.NotNull list: java.util.List<? extends java.lang.Object>) : void {
-        list.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        list.filterIsInstance().<anonymous class>(mutableSetOf(), { var it: <ErrorType> ->
+
+
+        })
     }
 }

diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.log.fir.txt
index a1389058eae..d52509c4989 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.log.fir.txt
@@ -79,7 +79,24 @@ UFile (package = org.jetbrains.uast.kotlin)
                                     UBinaryExpression (operator = +)
                                         ULiteralExpression (value = "a")
                                         USimpleNameReferenceExpression (identifier = a)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (bar))
+                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null)
+                    ULambdaExpression
+                        UParameter (name = it)
+                        UBlockExpression
+                            UIfExpression
+                                UBinaryExpression (operator = >)
+                                    USimpleNameReferenceExpression (identifier = it)
+                                    ULiteralExpression (value = 5)
+                                UReturnExpression
+                            UDeclarationsExpression
+                                ULocalVariable (name = b)
+                                    ULiteralExpression (value = 1)
+                            UReturnExpression
+                                UBinaryExpression (operator = +)
+                                    USimpleNameReferenceExpression (identifier = it)
+                                    USimpleNameReferenceExpression (identifier = b)
                 UDeclarationsExpression
                     ULocalVariable (name = x)
                         ULambdaExpression
@@ -87,10 +104,17 @@ UFile (package = org.jetbrains.uast.kotlin)
                                 UDeclarationsExpression
                                     ULocalVariable (name = vardbcd0724)
                                         UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                                            UIdentifier (Identifier (listOf))
+                                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                                            ULiteralExpression (value = 1)
+                                            ULiteralExpression (value = 2)
                 UDeclarationsExpression
                     ULocalVariable (name = y)
                         ULambdaExpression
                             UBlockExpression
                                 UReturnExpression
-                                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                        UIdentifier (Identifier (listOf))
+                                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                                        ULiteralExpression (value = 1)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.render.fir.txt
index 1419f455400..bedb8d187d3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/LambdaReturn.render.fir.txt
@@ -24,12 +24,17 @@ public final class LambdaReturnKt {
         var lam5: kotlin.jvm.functions.Function1<? super java.lang.Integer,? extends java.lang.String> = fun (@org.jetbrains.annotations.NotNull var a: int) {
                 return "a" + a
         }
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        bar({ var it: <ErrorType> ->
+
+            if (it > 5) return
+            var b: int = 1
+            return it + b
+        })
         var x: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = {
-            @org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            @org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = listOf(1, 2)
         }
         var y: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = {
-            return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            return listOf(1)
         }
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.fir.txt
deleted file mode 100644
index cf7a61e0a45..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.fir.txt
+++ /dev/null
@@ -1,26 +0,0 @@
-UFile (package = )
-    UImportStatement (isOnDemand = false)
-    UClass (name = LambdasKt)
-        UMethod (name = foo)
-            UBlockExpression
-                UQualifiedReferenceExpression
-                    UQualifiedReferenceExpression
-                        USimpleNameReferenceExpression (identifier = Stream)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        UMethod (name = doSelectItem)
-            UParameter (name = selectItemFunction)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = baz)
-                        ULambdaExpression
-                            UBlockExpression
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        UMethod (name = lambdaInPlaceCall)
-            UBlockExpression
-                UWhileExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    UBlockExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.txt
index aec871539f3..cafc29ffe92 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.log.txt
@@ -44,4 +44,4 @@ UFile (package = )
                     UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
                         UIdentifier (Identifier ({))
                         USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null)
-                    UBlockExpression
+                    UBlockExpression
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.render.fir.txt
index bdcb819dc40..88b04119ecf 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Lambdas.render.fir.txt
@@ -2,17 +2,20 @@ import java.util.stream.Stream

 public final class LambdasKt {
     public static final fun foo() : void {
-        Stream.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        Stream.empty().filter({ var it: <ErrorType> ->
+
+            return it.isEmpty()
+        })
     }
     public static final fun doSelectItem(@org.jetbrains.annotations.NotNull selectItemFunction: kotlin.jvm.functions.Function0<? extends kotlin.Unit>) : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        invoke()
         var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                <anonymous class>()
         }
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        invoke()
     }
     public static final fun lambdaInPlaceCall() : void {
-        while ([!] UnknownKotlinExpression (CALL_EXPRESSION)) {
+        while (invoke()) {
         }
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.log.fir.txt
index df5a6254f81..24f0aa0274d 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.log.fir.txt
@@ -10,12 +10,16 @@ UFile (package = )
                         ULambdaExpression
                             UBlockExpression
                                 UReturnExpression
-                                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                                        UIdentifier (Identifier (Local))
+                                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = baz)
                         ULambdaExpression
                             UBlockExpression
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                                    UIdentifier (Identifier (Local))
+                                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UDeclarationsExpression
                     UVariable (name = someLocalFun)
                         ULambdaExpression
@@ -26,5 +30,9 @@ UFile (package = )
                                     ULiteralExpression (value = 42)
                 UReturnExpression
                     UBinaryExpression (operator = ==)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (bar))
+                            USimpleNameReferenceExpression (identifier = bar, resolvesTo = null)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                            UIdentifier (Identifier (Local))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.render.fir.txt
index 9bc87c6dd4f..59469c8c04f 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalDeclarations.render.fir.txt
@@ -4,14 +4,14 @@ public final class LocalDeclarationsKt {
             public fun Local() = UastEmptyExpression
         }
         var bar: kotlin.jvm.functions.Function0<? extends Local> = fun () {
-                return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                return <anonymous class>()
         }
         var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                <anonymous class>()
         }
         var someLocalFun: kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.String,? extends java.lang.Integer> = fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {
                 return 42
         }
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION) == [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return bar() == <anonymous class>()
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.fir.txt
deleted file mode 100644
index 6a9f3107824..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.fir.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-UFile (package = )
-    UClass (name = LocalVariableWithAnnotationKt)
-        UMethod (name = foo)
-            UBlockExpression
-                UDeclarationsExpression
-                    ULocalVariable (name = bar)
-                        UAnnotation (fqName = not-implemented-annotation)
-                        ULiteralExpression (value = "lorem ipsum")
-    UClass (name = TestAnnotation)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.txt
similarity index 90%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.txt
index 0576c834e75..7371a55216e 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.log.txt
@@ -6,4 +6,4 @@ UFile (package = )
                     ULocalVariable (name = bar)
                         UAnnotation (fqName = TestAnnotation)
                         ULiteralExpression (value = "lorem ipsum")
-    UClass (name = TestAnnotation)
+    UClass (name = TestAnnotation)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.fir.txt
deleted file mode 100644
index b05b30f2a58..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.fir.txt
+++ /dev/null
@@ -1,8 +0,0 @@
-public final class LocalVariableWithAnnotationKt {
-    public static final fun foo() : void {
-        @not-implemented-annotation var bar: java.lang.String = "lorem ipsum"
-    }
-}
-
-public abstract annotation TestAnnotation {
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.txt
index 40973f0b6dc..d812b7e9ee1 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/LocalVariableWithAnnotation.render.txt
@@ -5,4 +5,4 @@ public final class LocalVariableWithAnnotationKt {
 }

 public abstract annotation TestAnnotation {
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.log.fir.txt
index 9ee1546f85e..8adcbdc8c00 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.log.fir.txt
@@ -4,16 +4,34 @@ UFile (package = )
             UParameter (name = a)
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier (())
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = p)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                            UIdentifier (Identifier (A))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier ({))
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null)
+                    ULambdaExpression
+                        UBlockExpression
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (p))
+                                USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null)
+                                ULambdaExpression
+                                    UBlockExpression
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                            UIdentifier (Identifier (())
+                                            USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null)
     UClass (name = A)
         UMethod (name = A)
         UMethod (name = invoke)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier (())
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null)
         UMethod (name = invoke)
             UParameter (name = f)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.render.fir.txt
index 264f022c377..82e341d6427 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/NonTrivialIdentifiers.render.fir.txt
@@ -1,15 +1,19 @@
 public final class NonTrivialIdentifiersKt {
     public static final fun main(@org.jetbrains.annotations.Nullable a: A) : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var p: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        invoke()
+        var p: A = <anonymous class>()
+        invoke({
+            invoke({
+                invoke()
+            })
+        })
     }
 }

 public final class A {
     public fun A() = UastEmptyExpression
     public final fun invoke() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        invoke()
     }
     public final fun invoke(@org.jetbrains.annotations.NotNull f: kotlin.jvm.functions.Function0<? extends kotlin.Unit>) : void {
     }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.log.fir.txt
index 132b6b02eb0..6b613123017 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.log.fir.txt
@@ -10,18 +10,22 @@ UFile (package = )
         UMethod (name = Test1)
             UParameter (name = bar)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
+                UAnnotation (fqName = MyAnnotation)
         UMethod (name = getBar)
+            UAnnotation (fqName = MyAnnotation)
         UMethod (name = setBar)
+            UAnnotation (fqName = MyAnnotation)
             UParameter (name = value)
     UClass (name = Test2)
         UField (name = bar)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UAnnotation (fqName = not-implemented-annotation)
+            UAnnotation (fqName = MyAnnotation5)
         UMethod (name = Test2)
             UParameter (name = bar)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-                UAnnotation (fqName = not-implemented-annotation)
         UMethod (name = getBar)
+            UAnnotation (fqName = MyAnnotation)
         UMethod (name = setBar)
+            UAnnotation (fqName = MyAnnotation2)
             UParameter (name = value)
                 UAnnotation (fqName = MyAnnotation3)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.render.fir.txt
index 3932d2b592a..5b95ceba7b8 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParameterPropertyWithAnnotation.render.fir.txt
@@ -15,14 +15,18 @@ public abstract annotation MyAnnotation5 {

 public final class Test1 {
     @org.jetbrains.annotations.NotNull private var bar: int
-    public fun Test1(@org.jetbrains.annotations.NotNull bar: int) = UastEmptyExpression
+    public fun Test1(@org.jetbrains.annotations.NotNull @MyAnnotation bar: int) = UastEmptyExpression
+    @MyAnnotation
     public final fun getBar() : int = UastEmptyExpression
+    @MyAnnotation
     public final fun setBar(value: int) : void = UastEmptyExpression
 }

 public final class Test2 {
-    @org.jetbrains.annotations.NotNull @not-implemented-annotation private var bar: int
-    public fun Test2(@org.jetbrains.annotations.NotNull @not-implemented-annotation bar: int) = UastEmptyExpression
+    @org.jetbrains.annotations.NotNull @MyAnnotation5 private var bar: int
+    public fun Test2(@org.jetbrains.annotations.NotNull bar: int) = UastEmptyExpression
+    @MyAnnotation
     public final fun getBar() : int = UastEmptyExpression
+    @MyAnnotation2
     public final fun setBar(@MyAnnotation3 value: int) : void = UastEmptyExpression
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.log.fir.txt
index b5170bde167..05b56c4d7c6 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.log.fir.txt
@@ -24,44 +24,120 @@ UFile (package = )
             UBlockExpression
         UMethod (name = call)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                    UIdentifier (Identifier (global))
+                    USimpleNameReferenceExpression (identifier = global, resolvesTo = null)
+                    ULiteralExpression (value = 2.2)
+                    ULiteralExpression (value = 2)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (withDefault))
+                    USimpleNameReferenceExpression (identifier = withDefault, resolvesTo = null)
+                    ULiteralExpression (value = "bbb")
                 UQualifiedReferenceExpression
                     ULiteralExpression (value = "abc")
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                        UIdentifier (Identifier (withReceiver))
+                        USimpleNameReferenceExpression (identifier = withReceiver, resolvesTo = null)
+                        ULiteralExpression (value = 1)
+                        ULiteralExpression (value = 1.2)
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = Math)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                        UIdentifier (Identifier (atan2))
+                        USimpleNameReferenceExpression (identifier = atan2, resolvesTo = null)
+                        ULiteralExpression (value = 1.3)
+                        ULiteralExpression (value = 3.4)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                    UIdentifier (Identifier (unresolvedMethod))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    ULiteralExpression (value = "param1")
+                    ULiteralExpression (value = "param2")
                 UQualifiedReferenceExpression
                     UQualifiedReferenceExpression
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = java)
                             USimpleNameReferenceExpression (identifier = lang)
                         USimpleNameReferenceExpression (identifier = String)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 4))
+                        UIdentifier (Identifier (format))
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null)
+                        ULiteralExpression (value = "%i %i %i")
+                        ULiteralExpression (value = 1)
+                        ULiteralExpression (value = 2)
+                        ULiteralExpression (value = 3)
                 UQualifiedReferenceExpression
                     UQualifiedReferenceExpression
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = java)
                             USimpleNameReferenceExpression (identifier = lang)
                         USimpleNameReferenceExpression (identifier = String)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                        UIdentifier (Identifier (format))
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null)
+                        ULiteralExpression (value = "%i %i %i")
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))
+                            UIdentifier (Identifier (arrayOf))
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null)
+                            ULiteralExpression (value = 1)
+                            ULiteralExpression (value = 2)
+                            ULiteralExpression (value = 3)
                 UQualifiedReferenceExpression
                     UQualifiedReferenceExpression
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = java)
                             USimpleNameReferenceExpression (identifier = lang)
                         USimpleNameReferenceExpression (identifier = String)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))
+                        UIdentifier (Identifier (format))
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null)
+                        ULiteralExpression (value = "%i %i %i")
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))
+                            UIdentifier (Identifier (arrayOf))
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null)
+                            ULiteralExpression (value = 1)
+                            ULiteralExpression (value = 2)
+                            ULiteralExpression (value = 3)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3))
+                            UIdentifier (Identifier (arrayOf))
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null)
+                            ULiteralExpression (value = 4)
+                            ULiteralExpression (value = 5)
+                            ULiteralExpression (value = 6)
                 UQualifiedReferenceExpression
                     UQualifiedReferenceExpression
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = java)
                             USimpleNameReferenceExpression (identifier = lang)
                         USimpleNameReferenceExpression (identifier = String)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                        UIdentifier (Identifier (format))
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null)
+                        ULiteralExpression (value = "%i %i %i")
+                        UQualifiedReferenceExpression
+                            UQualifiedReferenceExpression
+                                ULiteralExpression (value = "")
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                    UIdentifier (Identifier (chunked))
+                                    USimpleNameReferenceExpression (identifier = chunked, resolvesTo = null)
+                                    ULiteralExpression (value = 2)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (toTypedArray))
+                                USimpleNameReferenceExpression (identifier = toTypedArray, resolvesTo = null)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                    UIdentifier (Identifier (with))
+                    USimpleNameReferenceExpression (identifier = with, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                        UIdentifier (Identifier (A))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    ULambdaExpression
+                        UBlockExpression
+                            UQualifiedReferenceExpression
+                                ULiteralExpression (value = "def")
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                                    UIdentifier (Identifier (with2Receivers))
+                                    USimpleNameReferenceExpression (identifier = with2Receivers, resolvesTo = null)
+                                    ULiteralExpression (value = 8)
+                                    ULiteralExpression (value = 7.0)
         UMethod (name = objectLiteral)
             UBlockExpression
                 UObjectLiteralExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.render.fir.txt
index 40ce376a7cd..f974aa84865 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ParametersDisorder.render.fir.txt
@@ -6,16 +6,18 @@ public final class ParametersDisorderKt {
     public static final fun withReceiver(@org.jetbrains.annotations.NotNull $this$withReceiver: java.lang.String, @org.jetbrains.annotations.NotNull a: int, @org.jetbrains.annotations.NotNull b: float) : void {
     }
     public static final fun call() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        "abc".[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        Math.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        global(2.2, 2)
+        withDefault("bbb")
+        "abc".withReceiver(1, 1.2)
+        Math.atan2(1.3, 3.4)
+        <anonymous class>("param1", "param2")
+        java.lang.String.format("%i %i %i", 1, 2, 3)
+        java.lang.String.format("%i %i %i", arrayOf(1, 2, 3))
+        java.lang.String.format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))
+        java.lang.String.format("%i %i %i", "".chunked(2).toTypedArray())
+        with(<anonymous class>(), {
+            "def".with2Receivers(8, 7.0)
+        })
     }
     public static final fun objectLiteral() : void {
         anonymous object : Parent(b = 1, a = "foo") { }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.log.fir.txt
index 05cd4a978bd..387ef9bc6af 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.log.fir.txt
@@ -6,12 +6,17 @@ UFile (package = )
                 UReturnExpression
                     UQualifiedReferenceExpression
                         UThisExpression (label = null)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = setStringRepresentation)
             UParameter (name = value)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (setDataFromString))
+                    USimpleNameReferenceExpression (identifier = setDataFromString, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = value)
         UMethod (name = setDataFromString)
             UParameter (name = data)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.render.fir.txt
index e9e5af89e76..b22827c25a1 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyAccessors.render.fir.txt
@@ -1,10 +1,10 @@
 public final class PropertyTest {
     public fun PropertyTest() = UastEmptyExpression
     public final fun getStringRepresentation() : java.lang.String {
-        return this.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return this.toString()
     }
     public final fun setStringRepresentation(@org.jetbrains.annotations.NotNull value: java.lang.String) : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        setDataFromString(value)
     }
     public final fun setDataFromString(@org.jetbrains.annotations.NotNull data: java.lang.String) : void {
     }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyDelegate.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyDelegate.log.fir.txt
index 1d71c43d82a..c27b326f762 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyDelegate.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyDelegate.log.fir.txt
@@ -5,5 +5,11 @@ UFile (package = )
             UBlockExpression
                 UDeclarationsExpression
                     ULocalVariable (name = sdCardPathLocal)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                            UIdentifier (Identifier (lazy))
+                            USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null)
+                            ULambdaExpression
+                                UBlockExpression
+                                    UReturnExpression
+                                        ULiteralExpression (value = "/sdcard")
         UMethod (name = getAnnotatedDelegate)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.log.fir.txt
index e429b641873..db68438ad66 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.log.fir.txt
@@ -4,7 +4,10 @@ UFile (package = )
             UBlockExpression
                 UDeclarationsExpression
                     ULocalVariable (name = a)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                            UIdentifier (Identifier (A))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                            ULiteralExpression (value = 17)
                 UDeclarationsExpression
                     ULocalVariable (name = x)
                         UPrefixExpression (operator = -)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.render.fir.txt
index cd0e182b17e..db6c1e07aa1 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyReferences.render.fir.txt
@@ -1,6 +1,6 @@
 public final class PropertyReferencesKt {
     public static final fun properties() : void {
-        var a: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        var a: A = <anonymous class>(17)
         var x: int = -a.mutableProp
         a.mutableProp = 1
         a.mutableProp += x
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.log.fir.txt
index eb321af9f48..57531e95a9f 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.log.fir.txt
@@ -2,10 +2,12 @@ UFile (package = )
     UClass (name = PropertyWithAnnotationKt)
         UField (name = prop1)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UAnnotation (fqName = not-implemented-annotation)
+            UAnnotation (fqName = TestAnnotation)
             ULiteralExpression (value = 0)
         UMethod (name = getProp1)
+            UAnnotation (fqName = TestAnnotation)
         UMethod (name = getProp2)
+            UAnnotation (fqName = TestAnnotation)
             UBlockExpression
                 UReturnExpression
                     ULiteralExpression (value = 0)
@@ -14,6 +16,7 @@ UFile (package = )
                 UReturnExpression
                     ULiteralExpression (value = 0)
         UMethod (name = setProp3)
+            UAnnotation (fqName = TestAnnotation)
             UParameter (name = value)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.render.fir.txt
index 33b43dfeb2d..6f1285a2a99 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/PropertyWithAnnotation.render.fir.txt
@@ -1,12 +1,15 @@
 public final class PropertyWithAnnotationKt {
-    @org.jetbrains.annotations.NotNull @not-implemented-annotation private static final var prop1: int = 0
+    @org.jetbrains.annotations.NotNull @TestAnnotation private static final var prop1: int = 0
+    @TestAnnotation
     public static final fun getProp1() : int = UastEmptyExpression
+    @TestAnnotation
     public static final fun getProp2() : int {
         return 0
     }
     public static final fun getProp3() : int {
         return 0
     }
+    @TestAnnotation
     public static final fun setProp3(@org.jetbrains.annotations.NotNull value: int) : void {
         field = value
     }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.log.fir.txt
index 5e2cabd3209..1b303bbf815 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.log.fir.txt
@@ -12,4 +12,6 @@ UFile (package = A.B.C)
                                 USimpleNameReferenceExpression (identifier = A)
                                 USimpleNameReferenceExpression (identifier = B)
                             USimpleNameReferenceExpression (identifier = C)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                            UIdentifier (Identifier (Foo))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.render.fir.txt
index 71b2a4e87ac..dc94cdfa8cd 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/QualifiedConstructorCall.render.fir.txt
@@ -7,6 +7,6 @@ public final class Foo {
 public final class Bar {
     public fun Bar() = UastEmptyExpression
     public final fun getFoo() : A.B.C.Foo {
-        return A.B.C.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return A.B.C.<anonymous class>()
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.log.fir.txt
index 296818eccad..04d948ad7ff 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.log.fir.txt
@@ -2,7 +2,7 @@ UFile (package = )
     UClass (name = ReceiverFunKt)
         UMethod (name = foo)
             UParameter (name = $this$foo)
-                UAnnotation (fqName = not-implemented-annotation)
+                UAnnotation (fqName = MyReceiverAnnotation)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
@@ -11,11 +11,15 @@ UFile (package = )
                         USimpleNameReferenceExpression (identifier = length)
         UMethod (name = getRx)
             UParameter (name = $this$rx)
-                UAnnotation (fqName = not-implemented-annotation)
+                UAnnotation (fqName = MyReceiverAnnotation)
+                    UNamedExpression (name = name)
+                        ULiteralExpression (value = "RegExp")
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (toRegex))
+                        USimpleNameReferenceExpression (identifier = toRegex, resolvesTo = null)
     UClass (name = MyReceiverAnnotation)
         UAnnotationMethod (name = name)
             ULiteralExpression (value = "")
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.render.fir.txt
index 07bda33b5d5..eb068831c70 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReceiverFun.render.fir.txt
@@ -1,9 +1,9 @@
 public final class ReceiverFunKt {
-    public static final fun foo(@not-implemented-annotation @org.jetbrains.annotations.NotNull $this$foo: java.lang.String) : int {
+    public static final fun foo(@MyReceiverAnnotation @org.jetbrains.annotations.NotNull $this$foo: java.lang.String) : int {
         return this.length
     }
-    public static final fun getRx(@not-implemented-annotation @org.jetbrains.annotations.NotNull $this$rx: java.lang.String) : kotlin.text.Regex {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+    public static final fun getRx(@MyReceiverAnnotation(name = "RegExp") @org.jetbrains.annotations.NotNull $this$rx: java.lang.String) : kotlin.text.Regex {
+        return toRegex()
     }
 }

diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.log.fir.txt
index cfac78d853c..6416dff2433 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.log.fir.txt
@@ -2,16 +2,29 @@ UFile (package = )
     UClass (name = ReifiedResolveKt)
         UMethod (name = resolve)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier (foo))
+                    USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = x)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (foo))
+                            USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier (bar))
+                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = y)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (bar))
+                            USimpleNameReferenceExpression (identifier = bar, resolvesTo = null)
                 UDeclarationsExpression
                     ULocalVariable (name = z)
                         UQualifiedReferenceExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (listOf))
+                                USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                                ULiteralExpression (value = "foo")
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (filterIsInstance))
+                                USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.render.fir.txt
index c3983bd7a14..5a0401e4d40 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ReifiedResolve.render.fir.txt
@@ -1,9 +1,9 @@
 public final class ReifiedResolveKt {
     public static final fun resolve() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var x: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var y: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var z: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        foo()
+        var x: java.lang.String = foo()
+        bar()
+        var y: java.lang.String = bar()
+        var z: java.util.List<? extends java.lang.String> = listOf("foo").filterIsInstance()
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.log.fir.txt
index c5c24be43ab..a2e6a4791b9 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.log.fir.txt
@@ -3,22 +3,55 @@ UFile (package = )
         UMethod (name = bar)
             UBlockExpression
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                        UIdentifier (Identifier (A))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (foo))
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                        UIdentifier (Identifier (A))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (inlineFoo))
+                        USimpleNameReferenceExpression (identifier = inlineFoo, resolvesTo = null)
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (listOf))
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                            UIdentifier (Identifier (A))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (forEach))
+                        USimpleNameReferenceExpression (identifier = forEach, resolvesTo = null)
+                        ULambdaExpression
+                            UParameter (name = it)
+                            UBlockExpression
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                    UIdentifier (Identifier (println))
+                                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                                    USimpleNameReferenceExpression (identifier = it)
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (listOf))
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                        ULiteralExpression (value = "")
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (joinToString))
+                        USimpleNameReferenceExpression (identifier = joinToString, resolvesTo = null)
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (listOf))
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                        ULiteralExpression (value = "")
                     USimpleNameReferenceExpression (identifier = size)
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (listOf))
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                        ULiteralExpression (value = "")
                     USimpleNameReferenceExpression (identifier = indices)
                 UDeclarationsExpression
                     ULocalVariable (name = date)
@@ -26,22 +59,39 @@ UFile (package = )
                             UQualifiedReferenceExpression
                                 USimpleNameReferenceExpression (identifier = java)
                                 USimpleNameReferenceExpression (identifier = util)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                                UIdentifier (Identifier (Date))
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
                 UBinaryExpression (operator = =)
                     UQualifiedReferenceExpression
                         USimpleNameReferenceExpression (identifier = date)
                         USimpleNameReferenceExpression (identifier = time)
                     ULiteralExpression (value = 1000)
                 UQualifiedReferenceExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (listOf))
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                        ULiteralExpression (value = "")
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (last))
+                        USimpleNameReferenceExpression (identifier = last, resolvesTo = null)
                 UQualifiedReferenceExpression
                     UQualifiedReferenceExpression
                         UQualifiedReferenceExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (mutableMapOf))
+                                USimpleNameReferenceExpression (identifier = mutableMapOf, resolvesTo = null)
+                                UBinaryExpression (operator = <other>)
+                                    ULiteralExpression (value = 1)
+                                    ULiteralExpression (value = "1")
                             USimpleNameReferenceExpression (identifier = entries)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (first))
+                            USimpleNameReferenceExpression (identifier = first, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (setValue))
+                        USimpleNameReferenceExpression (identifier = setValue, resolvesTo = null)
+                        ULiteralExpression (value = "123")
                 UDeclarationsExpression
                     ULocalVariable (name = intRange)
                         UBinaryExpression (operator = ..)
@@ -49,28 +99,43 @@ UFile (package = )
                             ULiteralExpression (value = 3)
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = intRange)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (contains))
+                        USimpleNameReferenceExpression (identifier = contains, resolvesTo = null)
+                        UBinaryExpressionWithType
+                            ULiteralExpression (value = 2)
+                            UTypeReferenceExpression (name = int)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2))
+                    UIdentifier (Identifier (IntRange))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    ULiteralExpression (value = 1)
+                    ULiteralExpression (value = 2)
         UMethod (name = barT)
             UParameter (name = t)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = t)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (foo))
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
         UMethod (name = barTL)
             UParameter (name = listT)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = listT)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (isEmpty))
+                        USimpleNameReferenceExpression (identifier = isEmpty, resolvesTo = null)
                 UForEachExpression
                     USimpleNameReferenceExpression (identifier = listT)
                     UBlockExpression
                         UQualifiedReferenceExpression
                             USimpleNameReferenceExpression (identifier = a)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (foo))
+                                USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
     UClass (name = A)
         UMethod (name = A)
         UMethod (name = foo)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.render.fir.txt
index 0db5d132f69..e9403164abe 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Resolve.render.fir.txt
@@ -1,26 +1,29 @@
 public final class ResolveKt {
     public static final fun bar() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).size
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).indices
-        var date: java.util.Date = java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        <anonymous class>().foo()
+        <anonymous class>().inlineFoo()
+        listOf(<anonymous class>()).forEach({ var it: <ErrorType> ->
+
+            println(it)
+        })
+        listOf("").joinToString()
+        listOf("").size
+        listOf("").indices
+        var date: java.util.Date = java.util.<anonymous class>()
         date.time = 1000
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION).entries.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        listOf("").last()
+        mutableMapOf(1 <other> "1").entries.first().setValue("123")
         var intRange: kotlin.ranges.LongRange = 0 .. 3
-        intRange.[!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        intRange.contains(2 as int)
+        <anonymous class>(1, 2)
     }
     public static final fun barT(@org.jetbrains.annotations.NotNull t: T) : void {
-        t.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        t.foo()
     }
     public static final fun barTL(@org.jetbrains.annotations.NotNull listT: T) : void {
-        listT.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        listT.isEmpty()
         for (a : listT) {
-            a.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+            a.foo()
         }
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.log.fir.txt
index 43332a876d9..5e34e8c4983 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.log.fir.txt
@@ -18,7 +18,11 @@ UFile (package = )
                 UQualifiedReferenceExpression
                     USimpleNameReferenceExpression (identifier = java)
                     USimpleNameReferenceExpression (identifier = lang)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (Runnable))
+                    USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null)
+                    ULambdaExpression
+                        UBlockExpression
         UMethod (name = getNotSam)
         UMethod (name = getFoo)
         UMethod (name = setFoo)
@@ -36,7 +40,11 @@ UFile (package = )
                             ULambdaExpression
                                 UBlockExpression
                             UTypeReferenceExpression (name = java.lang.Runnable)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (runRunnable))
+                    USimpleNameReferenceExpression (identifier = runRunnable, resolvesTo = null)
+                    ULambdaExpression
+                        UBlockExpression
                 UReturnExpression
                     ULambdaExpression
                         UBlockExpression
@@ -46,30 +54,73 @@ UFile (package = )
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (r))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
         UMethod (name = test1)
             UBlockExpression
                 UDeclarationsExpression
                     ULocalVariable (name = thread1)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                            UIdentifier (Identifier (Thread))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                            ULambdaExpression
+                                UBlockExpression
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                        UIdentifier (Identifier (println))
+                                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                                        ULiteralExpression (value = "hello1")
         UMethod (name = test2)
             UBlockExpression
                 UDeclarationsExpression
                     ULocalVariable (name = thread2)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                            UIdentifier (Identifier (Thread))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (Runnable))
+                                USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null)
+                                ULambdaExpression
+                                    UBlockExpression
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                            UIdentifier (Identifier (println))
+                                            USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                                            ULiteralExpression (value = "hello2")
         UMethod (name = test3)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (ambiguousSamAcceptor))
+                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (Supplier))
+                        USimpleNameReferenceExpression (identifier = Supplier, resolvesTo = null)
+                        ULambdaExpression
+                            UBlockExpression
+                                UReturnExpression
+                                    ULiteralExpression (value = "Supplier")
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (ambiguousSamAcceptor))
+                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (Callable))
+                        USimpleNameReferenceExpression (identifier = Callable, resolvesTo = null)
+                        ULambdaExpression
+                            UBlockExpression
+                                UReturnExpression
+                                    ULiteralExpression (value = "Callable")
         UMethod (name = ambiguousSamAcceptor)
             UParameter (name = s)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (TODO))
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null)
         UMethod (name = ambiguousSamAcceptor)
             UParameter (name = s)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (TODO))
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.render.fir.txt
index e8b7ba9fca6..508361fbb09 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/SAM.render.fir.txt
@@ -10,7 +10,9 @@ public final class SAMKt {
     @org.jetbrains.annotations.NotNull private static var foo: java.lang.Runnable = {

     }
-    @org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+    @org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.Runnable({
+
+    })
     public static final fun getNotSam() : kotlin.jvm.functions.Function0<? extends kotlin.Unit> = UastEmptyExpression
     public static final fun getFoo() : java.lang.Runnable = UastEmptyExpression
     public static final fun setFoo(@org.jetbrains.annotations.NotNull value: java.lang.Runnable) : void = UastEmptyExpression
@@ -21,29 +23,39 @@ public final class SAMKt {
         var a: java.lang.Runnable = {

         } as java.lang.Runnable
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        runRunnable({
+
+        })
         return {

         }
     }
     public static final fun getBaz() : java.lang.Runnable = UastEmptyExpression
     public static final fun runRunnable(@org.jetbrains.annotations.NotNull r: java.lang.Runnable) : error.NonExistentClass {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return <anonymous class>()
     }
     public static final fun test1() : void {
-        var thread1: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        var thread1: java.lang.Thread = <anonymous class>({
+            println("hello1")
+        })
     }
     public static final fun test2() : void {
-        var thread2: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        var thread2: java.lang.Thread = <anonymous class>(Runnable({
+            println("hello2")
+        }))
     }
     public static final fun test3() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        ambiguousSamAcceptor(Supplier({
+            return "Supplier"
+        }))
+        ambiguousSamAcceptor(Callable({
+            return "Callable"
+        }))
     }
     public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.function.Supplier<java.lang.String>) : java.lang.String {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return TODO()
     }
     public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.concurrent.Callable<java.lang.String>) : java.lang.String {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return TODO()
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.log.fir.txt
index 592c473777f..3a3d831f24e 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.log.fir.txt
@@ -6,5 +6,8 @@ UFile (package = )
         UMethod (name = Simple)
         UMethod (name = method)
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (println))
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                    ULiteralExpression (value = "Hello, world!")
         UMethod (name = getProperty)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.render.fir.txt
index dc929a2ae90..350cad23c3d 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Simple.render.fir.txt
@@ -2,7 +2,7 @@ public final class Simple {
     @org.jetbrains.annotations.NotNull private final var property: java.lang.String = "Mary"
     public fun Simple() = UastEmptyExpression
     public final fun method() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        println("Hello, world!")
     }
     public final fun getProperty() : java.lang.String = UastEmptyExpression
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.log.fir.txt
index 856f245f688..c6b4a3b834c 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.log.fir.txt
@@ -2,10 +2,21 @@ UFile (package = )
     UClass (name = SimpleAnnotated)
         UField (name = property)
             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UAnnotation (fqName = not-implemented-annotation)
+            UAnnotation (fqName = kotlin.SinceKotlin)
+                UNamedExpression (name = version)
+                    ULiteralExpression (value = "1.0")
             ULiteralExpression (value = "Mary")
         UMethod (name = SimpleAnnotated)
         UMethod (name = method)
+            UAnnotation (fqName = kotlin.Suppress)
+                UNamedExpression (name = names)
+                    ULiteralExpression (value = "abc")
             UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (println))
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
+                    ULiteralExpression (value = "Hello, world!")
         UMethod (name = getProperty)
+            UAnnotation (fqName = kotlin.SinceKotlin)
+                UNamedExpression (name = version)
+                    ULiteralExpression (value = "1.0")
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.render.fir.txt
index 11c9a3135bb..179c59fb055 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/SimpleAnnotated.render.fir.txt
@@ -1,8 +1,10 @@
 public final class SimpleAnnotated {
-    @org.jetbrains.annotations.NotNull @not-implemented-annotation private final var property: java.lang.String = "Mary"
+    @org.jetbrains.annotations.NotNull @kotlin.SinceKotlin(version = "1.0") private final var property: java.lang.String = "Mary"
     public fun SimpleAnnotated() = UastEmptyExpression
+    @kotlin.Suppress(names = "abc")
     public final fun method() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        println("Hello, world!")
     }
+    @kotlin.SinceKotlin(version = "1.0")
     public final fun getProperty() : java.lang.String = UastEmptyExpression
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.fir.txt
deleted file mode 100644
index ed078dcc390..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.fir.txt
+++ /dev/null
@@ -1,64 +0,0 @@
-UFile (package = )
-    UClass (name = StringTemplateComplexKt)
-        UField (name = muchRecur)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            ULiteralExpression (value = "abc")
-        UField (name = case4)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                ULiteralExpression (value = "literal")
-                ULiteralExpression (value = " z")
-        UField (name = case5)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                ULiteralExpression (value = "literal")
-                ULiteralExpression (value = " ")
-                ULiteralExpression (value = "literal")
-                ULiteralExpression (value = " z")
-        UField (name = literalInLiteral)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                UPolyadicExpression (operator = +)
-                    ULiteralExpression (value = "literal")
-                    USimpleNameReferenceExpression (identifier = case4)
-                ULiteralExpression (value = " z")
-        UField (name = literalInLiteral2)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                UQualifiedReferenceExpression
-                    UPolyadicExpression (operator = +)
-                        ULiteralExpression (value = "literal")
-                        USimpleNameReferenceExpression (identifier = case4)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                ULiteralExpression (value = " z")
-        UField (name = empty)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            ULiteralExpression (value = "")
-        UMethod (name = getMuchRecur)
-        UMethod (name = getCase4)
-        UMethod (name = getCase5)
-        UMethod (name = getLiteralInLiteral)
-        UMethod (name = getLiteralInLiteral2)
-        UMethod (name = getEmpty)
-        UMethod (name = simpleForTemplate)
-            UParameter (name = i)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-                ULiteralExpression (value = 0)
-            UBlockExpression
-                UReturnExpression
-                    USimpleNameReferenceExpression (identifier = i)
-        UMethod (name = foo)
-            UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = template1)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = template2)
-                        UPolyadicExpression (operator = +)
-                            ULiteralExpression (value = ".")
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.txt
index e72af36b37c..568d89a65e0 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.log.txt
@@ -71,4 +71,4 @@ UFile (package = )
                             ULiteralExpression (value = ".")
                             UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
                                 UIdentifier (Identifier (simpleForTemplate))
-                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null)
+                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.fir.txt
deleted file mode 100644
index 1002d0d9ab2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-public final class StringTemplateComplexKt {
-    @org.jetbrains.annotations.NotNull private static final var muchRecur: java.lang.String = "abc"
-    @org.jetbrains.annotations.NotNull private static final var case4: java.lang.String = "a " + "literal" + " z"
-    @org.jetbrains.annotations.NotNull private static final var case5: java.lang.String = "a " + "literal" + " " + "literal" + " z"
-    @org.jetbrains.annotations.NotNull private static final var literalInLiteral: java.lang.String = "a " + "literal" + case4 + " z"
-    @org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"
-    @org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""
-    public static final fun getMuchRecur() : java.lang.String = UastEmptyExpression
-    public static final fun getCase4() : java.lang.String = UastEmptyExpression
-    public static final fun getCase5() : java.lang.String = UastEmptyExpression
-    public static final fun getLiteralInLiteral() : java.lang.String = UastEmptyExpression
-    public static final fun getLiteralInLiteral2() : java.lang.String = UastEmptyExpression
-    public static final fun getEmpty() : java.lang.String = UastEmptyExpression
-    public static final fun simpleForTemplate(@org.jetbrains.annotations.NotNull i: int) : java.lang.String {
-        return i
-    }
-    public static final fun foo() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.txt
index d85c31e2092..0f8a3d4bbe9 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplex.render.txt
@@ -19,4 +19,4 @@ public final class StringTemplateComplexKt {
         var template1: java.lang.String = simpleForTemplate()
         var template2: java.lang.String = "." + simpleForTemplate()
     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.fir.txt
deleted file mode 100644
index 08595c626d2..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.fir.txt
+++ /dev/null
@@ -1,64 +0,0 @@
-UFile (package = )
-    UClass (name = StringTemplateComplexForUInjectionHostKt)
-        UField (name = muchRecur)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            ULiteralExpression (value = "abc")
-        UField (name = case4)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                ULiteralExpression (value = "literal")
-                ULiteralExpression (value = " z")
-        UField (name = case5)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                ULiteralExpression (value = "literal")
-                ULiteralExpression (value = " ")
-                ULiteralExpression (value = "literal")
-                ULiteralExpression (value = " z")
-        UField (name = literalInLiteral)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                UPolyadicExpression (operator = +)
-                    ULiteralExpression (value = "literal")
-                    USimpleNameReferenceExpression (identifier = case4)
-                ULiteralExpression (value = " z")
-        UField (name = literalInLiteral2)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UPolyadicExpression (operator = +)
-                ULiteralExpression (value = "a ")
-                UQualifiedReferenceExpression
-                    UPolyadicExpression (operator = +)
-                        ULiteralExpression (value = "literal")
-                        USimpleNameReferenceExpression (identifier = case4)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                ULiteralExpression (value = " z")
-        UField (name = empty)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            ULiteralExpression (value = "")
-        UMethod (name = getMuchRecur)
-        UMethod (name = getCase4)
-        UMethod (name = getCase5)
-        UMethod (name = getLiteralInLiteral)
-        UMethod (name = getLiteralInLiteral2)
-        UMethod (name = getEmpty)
-        UMethod (name = simpleForTemplate)
-            UParameter (name = i)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-                ULiteralExpression (value = 0)
-            UBlockExpression
-                UReturnExpression
-                    USimpleNameReferenceExpression (identifier = i)
-        UMethod (name = foo)
-            UBlockExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = template1)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = template2)
-                        UPolyadicExpression (operator = +)
-                            ULiteralExpression (value = ".")
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.txt
similarity index 98%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.txt
index ba5bf787632..99a17069449 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.log.txt
@@ -71,4 +71,4 @@ UFile (package = )
                             ULiteralExpression (value = ".")
                             UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
                                 UIdentifier (Identifier (simpleForTemplate))
-                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null)
+                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.fir.txt
deleted file mode 100644
index 97b48ec7b4a..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-public final class StringTemplateComplexForUInjectionHostKt {
-    @org.jetbrains.annotations.NotNull private static final var muchRecur: java.lang.String = "abc"
-    @org.jetbrains.annotations.NotNull private static final var case4: java.lang.String = "a " + "literal" + " z"
-    @org.jetbrains.annotations.NotNull private static final var case5: java.lang.String = "a " + "literal" + " " + "literal" + " z"
-    @org.jetbrains.annotations.NotNull private static final var literalInLiteral: java.lang.String = "a " + "literal" + case4 + " z"
-    @org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"
-    @org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""
-    public static final fun getMuchRecur() : java.lang.String = UastEmptyExpression
-    public static final fun getCase4() : java.lang.String = UastEmptyExpression
-    public static final fun getCase5() : java.lang.String = UastEmptyExpression
-    public static final fun getLiteralInLiteral() : java.lang.String = UastEmptyExpression
-    public static final fun getLiteralInLiteral2() : java.lang.String = UastEmptyExpression
-    public static final fun getEmpty() : java.lang.String = UastEmptyExpression
-    public static final fun simpleForTemplate(@org.jetbrains.annotations.NotNull i: int) : java.lang.String {
-        return i
-    }
-    public static final fun foo() : void {
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.txt
index 100664c9e49..9e9f388fab3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateComplexForUInjectionHost.render.txt
@@ -19,4 +19,4 @@ public final class StringTemplateComplexForUInjectionHostKt {
         var template1: java.lang.String = simpleForTemplate()
         var template2: java.lang.String = "." + simpleForTemplate()
     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.log.fir.txt
index 242df3f568b..ac038f9c25d 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.log.fir.txt
@@ -4,6 +4,9 @@ UFile (package = )
             UAnnotation (fqName = null)
             UQualifiedReferenceExpression
                 USimpleNameReferenceExpression (identifier = X)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                    UIdentifier (Identifier (bar))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    ULiteralExpression (value = "lorem")
         UMethod (name = Demo)
         UMethod (name = getFoo)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.render.fir.txt
index 28454c260a5..f378d615438 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/StringTemplateInClass.render.fir.txt
@@ -1,5 +1,5 @@
 public final class Demo {
-    @null private final var foo: error.NonExistentClass = X.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+    @null private final var foo: error.NonExistentClass = X.<anonymous class>("lorem")
     public fun Demo() = UastEmptyExpression
     public final fun getFoo() : error.NonExistentClass = UastEmptyExpression
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.log.fir.txt
index 5c75e64ae42..ef706c75548 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.log.fir.txt
@@ -7,7 +7,12 @@ UFile (package = )
                 UClass (name = null)
                     UMethod (name = bar)
                         UBlockExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                                UIdentifier (Identifier (cons))
+                                USimpleNameReferenceExpression (identifier = cons, resolvesTo = null)
+                                UObjectLiteralExpression
+                                    ULiteralExpression (value = "inner literal")
+                                    UClass (name = null)
                     UClass (name = InnerClass)
                         UMethod (name = InnerClass)
         UMethod (name = getAnon)
@@ -25,7 +30,14 @@ UFile (package = )
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (this))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    UQualifiedReferenceExpression
+                        USimpleNameReferenceExpression (identifier = i)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (toString))
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null)
         UMethod (name = getStr)
         UMethod (name = foo)
             UParameter (name = a)
@@ -36,26 +48,40 @@ UFile (package = )
             UParameter (name = param)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (A))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = param)
     UClass (name = C)
         UMethod (name = C)
             UParameter (name = p)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (super))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = p)
         UMethod (name = C)
             UParameter (name = i)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
-                UastEmptyExpression
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                    UIdentifier (Identifier (super))
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                    USimpleNameReferenceExpression (identifier = i)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                    UIdentifier (Identifier (println))
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null)
         UMethod (name = foo)
             UParameter (name = a)
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UQualifiedReferenceExpression
                     USuperExpression (label = null)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1))
+                        UIdentifier (Identifier (foo))
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null)
+                        USimpleNameReferenceExpression (identifier = a)
     UClass (name = O)
         UField (name = INSTANCE)
             UAnnotation (fqName = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.render.fir.txt
index 5cb8d0ccb36..0b2432dc6bf 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/SuperCalls.render.fir.txt
@@ -15,7 +15,7 @@ public class A {
     @org.jetbrains.annotations.NotNull private final var str: java.lang.String
     public fun A(@org.jetbrains.annotations.NotNull str: java.lang.String) = UastEmptyExpression
     public fun A(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
+        <anonymous class>(i.toString())
     }
     public final fun getStr() : java.lang.String = UastEmptyExpression
     public fun foo(@org.jetbrains.annotations.NotNull a: long) : void {
@@ -24,20 +24,20 @@ public class A {

 public final class B : A {
     public fun B(@org.jetbrains.annotations.NotNull param: java.lang.String) {
-        UastEmptyExpression
+        <anonymous class>(param)
     }
 }

 public final class C : A {
     public fun C(@org.jetbrains.annotations.NotNull p: java.lang.String) {
-        UastEmptyExpression
+        <anonymous class>(p)
     }
     public fun C(@org.jetbrains.annotations.NotNull i: int) {
-        UastEmptyExpression
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        <anonymous class>(i)
+        println()
     }
     public fun foo(@org.jetbrains.annotations.NotNull a: long) : void {
-        super.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        super.foo(a)
     }
 }

diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.log.fir.txt
index dcd9671c6ba..8cfb8e1bbac 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.log.fir.txt
@@ -4,15 +4,23 @@ UFile (package = test.pkg)
             UBlockExpression
                 UReturnExpression
                     UQualifiedReferenceExpression
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                            UIdentifier (Identifier (Context))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (inner))
+                            USimpleNameReferenceExpression (identifier = inner, resolvesTo = null)
     UClass (name = Context)
         UMethod (name = Context)
         UMethod (name = inner)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (suspendPrivate))
+                        USimpleNameReferenceExpression (identifier = suspendPrivate, resolvesTo = null)
         UMethod (name = suspendPrivate)
             UBlockExpression
                 UReturnExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                        UIdentifier (Identifier (inner))
+                        USimpleNameReferenceExpression (identifier = inner, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.render.fir.txt
index 758b71a65d4..54492ba55e3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/Suspend.render.fir.txt
@@ -2,16 +2,16 @@ package test.pkg

 public final class SuspendKt {
     public static final fun top() : int {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return <anonymous class>().inner()
     }
 }

 public final class Context {
     public fun Context() = UastEmptyExpression
     public final fun inner() : int {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return suspendPrivate()
     }
     private final fun suspendPrivate() : int {
-        return [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        return inner()
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.log.fir.txt
index c2b6c23dc25..2fb453d152b 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.log.fir.txt
@@ -5,14 +5,20 @@ UFile (package = )
             UBlockExpression
                 UTryExpression
                     UBlockExpression
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (body))
+                            USimpleNameReferenceExpression (identifier = body, resolvesTo = null)
                     UCatchClause (e)
                         UParameter (name = e)
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
                         UBlockExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (catcher))
+                                USimpleNameReferenceExpression (identifier = catcher, resolvesTo = null)
                     UBlockExpression
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (finalizer))
+                            USimpleNameReferenceExpression (identifier = finalizer, resolvesTo = null)
         UMethod (name = body)
             UBlockExpression
         UMethod (name = catcher)
@@ -22,18 +28,29 @@ UFile (package = )
     UClass (name = TryCatchAnnotations)
         UMethod (name = TryCatchAnnotations)
         UMethod (name = catches)
+            UAnnotation (fqName = java.lang.SuppressWarnings)
+                UNamedExpression (name = value)
+                    ULiteralExpression (value = "Something")
             UBlockExpression
                 UTryExpression
                     UBlockExpression
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (body))
+                            USimpleNameReferenceExpression (identifier = body, resolvesTo = null)
                     UCatchClause (e)
                         UParameter (name = e)
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-                            UAnnotation (fqName = not-implemented-annotation)
+                            UAnnotation (fqName = java.lang.SuppressWarnings)
+                                UNamedExpression (name = value)
+                                    ULiteralExpression (value = "Something")
                         UBlockExpression
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                                UIdentifier (Identifier (catcher))
+                                USimpleNameReferenceExpression (identifier = catcher, resolvesTo = null)
                     UBlockExpression
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
+                            UIdentifier (Identifier (finalizer))
+                            USimpleNameReferenceExpression (identifier = finalizer, resolvesTo = null)
         UMethod (name = body)
             UBlockExpression
         UMethod (name = catcher)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.render.fir.txt
index 1fead891e73..6f7e358c420 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/TryCatch.render.fir.txt
@@ -2,13 +2,13 @@ public final class TryCatch {
     public fun TryCatch() = UastEmptyExpression
     public final fun catches() : void {
         try {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            body()
         }
         catch (@org.jetbrains.annotations.NotNull var e: java.lang.Throwable) {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            catcher()
         }
         finally {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            finalizer()
         }
     }
     public final fun body() : void {
@@ -21,15 +21,16 @@ public final class TryCatch {

 public final class TryCatchAnnotations {
     public fun TryCatchAnnotations() = UastEmptyExpression
+    @java.lang.SuppressWarnings(value = "Something")
     public final fun catches() : void {
         try {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            body()
         }
-        catch (@org.jetbrains.annotations.NotNull @not-implemented-annotation var e: java.lang.Throwable) {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        catch (@org.jetbrains.annotations.NotNull @java.lang.SuppressWarnings(value = "Something") var e: java.lang.Throwable) {
+            catcher()
         }
         finally {
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
+            finalizer()
         }
     }
     public final fun body() : void {
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.log.fir.txt
index f5712729d13..b3ef917e68a 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.log.fir.txt
@@ -2,4 +2,5 @@ UFile (package = )
     UClass (name = C)
         UMethod (name = C)
         UMethod (name = foo)
+            UAnnotation (fqName = null)
             UBlockExpression
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.render.fir.txt
index 2e977970f31..465f5fc46e0 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeInAnnotation.render.fir.txt
@@ -1,5 +1,6 @@
 public final class C {
     public fun C() = UastEmptyExpression
+    @null
     public final fun foo() : void {
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.fir.txt
deleted file mode 100644
index b5c74853b99..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.fir.txt
+++ /dev/null
@@ -1,53 +0,0 @@
-UFile (package = )
-    UClass (name = TypeReferencesKt)
-        UMethod (name = foo)
-            UParameter (name = parameter)
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            UBlockExpression
-                UDeclarationsExpression
-                    ULocalVariable (name = varWithType)
-                        ULiteralExpression (value = "Not Null")
-                UDeclarationsExpression
-                    ULocalVariable (name = varWithoutType)
-                        ULiteralExpression (value = "lorem ipsum")
-                UDeclarationsExpression
-                    ULocalVariable (name = result)
-                        UBinaryExpression (operator = +)
-                            USimpleNameReferenceExpression (identifier = varWithType)
-                            USimpleNameReferenceExpression (identifier = varWithoutType)
-                UReturnExpression
-                    USimpleNameReferenceExpression (identifier = result)
-        UMethod (name = parameterizedFoo)
-            UParameter (name = arg)
-                UAnnotation (fqName = org.jetbrains.annotations.Nullable)
-            UBlockExpression
-                UDeclarationsExpression
-                    ULocalVariable (name = a)
-                        USimpleNameReferenceExpression (identifier = arg)
-                UDeclarationsExpression
-                    ULocalVariable (name = at)
-                        UExpressionList (elvis)
-                            UDeclarationsExpression
-                                ULocalVariable (name = var708e23eb)
-                                    USimpleNameReferenceExpression (identifier = arg)
-                            UIfExpression
-                                UBinaryExpression (operator = !=)
-                                    USimpleNameReferenceExpression (identifier = var708e23eb)
-                                    ULiteralExpression (value = null)
-                                USimpleNameReferenceExpression (identifier = var708e23eb)
-                                UReturnExpression
-                UDeclarationsExpression
-                    ULocalVariable (name = tl)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = tsl)
-                        UQualifiedReferenceExpression
-                            USimpleNameReferenceExpression (identifier = tl)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION)
-                UDeclarationsExpression
-                    ULocalVariable (name = lls)
-                UDeclarationsExpression
-                    ULocalVariable (name = llsAliased)
-                UDeclarationsExpression
-                    ULocalVariable (name = llt)
-                [!] UnknownKotlinExpression (CALL_EXPRESSION)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.txt
index 13eabf769b3..819f1f7250f 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.log.txt
@@ -69,4 +69,4 @@ UFile (package = )
                     USimpleNameReferenceExpression (identifier = parameterizedFoo, resolvesTo = null)
                     UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0))
                         UIdentifier (Identifier (emptyList))
-                        USimpleNameReferenceExpression (identifier = emptyList, resolvesTo = null)
+                        USimpleNameReferenceExpression (identifier = emptyList, resolvesTo = null)
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.render.fir.txt
index d503d511d0a..9c6d735b371 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/TypeReferences.render.fir.txt
@@ -11,11 +11,14 @@ public final class TypeReferencesKt {
             var var708e23eb: T = arg
             if (var708e23eb != null) var708e23eb else return
         }
-        var tl: java.util.List<? extends T> = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        var tsl: java.util.List<? extends java.lang.String> = tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)
+        var tl: java.util.List<? extends T> = listOf(at)
+        var tsl: java.util.List<? extends java.lang.String> = tl.map({ var it: <ErrorType> ->
+
+            return it.toString()
+        })
         var lls: java.util.List<? extends java.util.List<? extends java.lang.String>>
         var llsAliased: java.util.List
         var llt: java.util.List<? extends java.util.List<? extends T>>
-        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        parameterizedFoo(emptyList())
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.log.fir.txt
index 7ea26b1d0b3..7aac42a63d7 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.log.fir.txt
@@ -12,4 +12,6 @@ UFile (package = )
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull)
             UBlockExpression
                 UThrowExpression
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0))
+                        UIdentifier (Identifier (UnsupportedOperationException))
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.render.fir.txt
index 67bff59a1d5..5182bfb836a 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/UnexpectedContainerException.render.fir.txt
@@ -5,6 +5,6 @@ public abstract interface Callback {
 public final class Model {
     public fun Model() = UastEmptyExpression
     public final fun crashMe(@org.jetbrains.annotations.NotNull clazz: java.lang.Class<T>, @org.jetbrains.annotations.NotNull factory: kotlin.jvm.functions.Function0<? extends T>) : void {
-        throw [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        throw <anonymous class>()
     }
 }
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.log.fir.txt
index 10216980c84..7618485254e 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.log.fir.txt
@@ -6,7 +6,11 @@ UFile (package = )
             UBlockExpression
                 UDeclarationsExpression
                     ULocalVariable (name = arr)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2))
+                            UIdentifier (Identifier (listOf))
+                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null)
+                            ULiteralExpression (value = "1")
+                            ULiteralExpression (value = "2")
                 USwitchExpression
                     USimpleNameReferenceExpression (identifier = string)
                     UExpressionList (when)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.render.fir.txt
index 31703575fd3..d09986c8fb3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenAndDestructing.render.fir.txt
@@ -1,6 +1,6 @@
 public final class WhenAndDestructingKt {
     public static final fun getElementsAdditionalResolve(@org.jetbrains.annotations.NotNull string: java.lang.String) : java.lang.String {
-        var arr: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        var arr: java.util.List<? extends java.lang.String> = listOf("1", "2")
         switch (string)  {
             "aaaa" -> {
                 yield return "bindingContext"
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.fir.txt
deleted file mode 100644
index 7d2cbbd5709..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.fir.txt
+++ /dev/null
@@ -1,31 +0,0 @@
-UFile (package = )
-    UClass (name = WhenStringLiteralKt)
-        UField (name = a)
-            UAnnotation (fqName = org.jetbrains.annotations.Nullable)
-            [!] UnknownKotlinExpression (CALL_EXPRESSION)
-        UField (name = b)
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull)
-            USwitchExpression
-                USimpleNameReferenceExpression (identifier = a)
-                UExpressionList (when)
-                    USwitchClauseExpressionWithBody
-                        ULiteralExpression (value = "abc")
-                        UExpressionList (when_entry)
-                            UYieldExpression
-                                ULiteralExpression (value = 1)
-                    USwitchClauseExpressionWithBody
-                        ULiteralExpression (value = "def")
-                        ULiteralExpression (value = "ghi")
-                        UExpressionList (when_entry)
-                            UYieldExpression
-                                ULiteralExpression (value = 2)
-                    USwitchClauseExpressionWithBody
-                        UExpressionList (when_entry)
-                            UYieldExpression
-                                ULiteralExpression (value = 3)
-        UMethod (name = getA)
-        UMethod (name = getB)
-        UMethod (name = <no name provided>)
-            UBlockExpression
-                ULiteralExpression (value = "abc1")
-                ULiteralExpression (value = "def1")
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.txt
similarity index 96%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.txt
index f58b40c2640..8ec1d8c06c5 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.log.txt
@@ -30,4 +30,4 @@ UFile (package = )
         UMethod (name = <no name provided>)
             UBlockExpression
                 ULiteralExpression (value = "abc1")
-                ULiteralExpression (value = "def1")
+                ULiteralExpression (value = "def1")
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.fir.txt
deleted file mode 100644
index 0bad3e9c968..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.fir.txt
+++ /dev/null
@@ -1,24 +0,0 @@
-public final class WhenStringLiteralKt {
-    @org.jetbrains.annotations.Nullable private static final var a: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)
-    @org.jetbrains.annotations.NotNull private static final var b: int = switch (a)  {
-        "abc" -> {
-            yield 1
-        }
-
-        "def", "ghi" -> {
-            yield 2
-        }
-
-         -> {
-            yield 3
-        }
-
-    }
-
-    public static final fun getA() : java.lang.String = UastEmptyExpression
-    public static final fun getB() : int = UastEmptyExpression
-    public static final fun <no name provided>() : void {
-        "abc1"
-        "def1"
-    }
-}
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.fe10.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.txt
index 42ce7f2a119..e2a2b4f6d77 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/WhenStringLiteral.render.txt
@@ -21,4 +21,4 @@ public final class WhenStringLiteralKt {
         "abc1"
         "def1"
     }
-}
+}
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.log.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.log.fir.txt
index 785278161f7..5847f7a0657 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.log.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.log.fir.txt
@@ -4,7 +4,10 @@ UFile (package = )
             UBlockExpression
                 UDeclarationsExpression
                     ULocalVariable (name = a)
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION)
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1))
+                            UIdentifier (Identifier (Obj))
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null)
+                            ULiteralExpression (value = 555)
     UClass (name = Obj)
         UField (name = INSTANCE)
             UAnnotation (fqName = null)
diff --git a/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.render.fir.txt b/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.render.fir.txt
index d87824f27cb..acb3d91b8c3 100644
--- a/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.render.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyRenderLog/ea101715.render.fir.txt
@@ -1,6 +1,6 @@
 public final class Ea101715Kt {
     public static final fun a() : void {
-        var a: Obj = [!] UnknownKotlinExpression (CALL_EXPRESSION)
+        var a: Obj = <anonymous class>(555)
     }
 }

diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/AnnotatedExpressions.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/AnnotatedExpressions.types.fir.txt
index 9284789f26d..d7ff0070d8b 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/AnnotatedExpressions.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/AnnotatedExpressions.types.fir.txt
@@ -2,23 +2,36 @@ UFile (package = ) [public final class AnnotatedExpressionsKt {...]
     UClass (name = AnnotatedExpressionsKt) [public final class AnnotatedExpressionsKt {...}]
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
-                UDeclarationsExpression [@not-implemented-annotation var a: int = 1]
-                    ULocalVariable (name = a) [@not-implemented-annotation var a: int = 1]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : PsiType:Unit
+                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
+                    UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                    USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Unit
+                UDeclarationsExpression [@kotlin.Suppress var a: int = 1]
+                    ULocalVariable (name = a) [@kotlin.Suppress var a: int = 1]
+                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                         ULiteralExpression (value = 1) [1] : PsiType:int
-                UDeclarationsExpression [@not-implemented-annotation var b: int = 2]
-                    ULocalVariable (name = b) [@not-implemented-annotation var b: int = 2]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+                UDeclarationsExpression [@kotlin.Suppress var b: int = 2]
+                    ULocalVariable (name = b) [@kotlin.Suppress var b: int = 2]
+                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                         ULiteralExpression (value = 2) [2] : PsiType:int
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
+                UBinaryExpression (operator = =) [b = a] : PsiType:Unit
+                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
+                    USimpleNameReferenceExpression (identifier = b) [b] : PsiType:int
+                    USimpleNameReferenceExpression (identifier = a) [a] : PsiType:int
+                UIfExpression [if (a > 2) a else b] : PsiType:int
+                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
+                    UBinaryExpression (operator = >) [a > 2] : PsiType:boolean
+                        USimpleNameReferenceExpression (identifier = a) [a] : PsiType:int
+                        ULiteralExpression (value = 2) [2] : PsiType:int
+                    USimpleNameReferenceExpression (identifier = a) [a] : PsiType:int
+                    USimpleNameReferenceExpression (identifier = b) [b] : PsiType:int
                 UDeclarationsExpression [var c: int = elvis {...}]
                     ULocalVariable (name = c) [var c: int = elvis {...}]
                         UExpressionList (elvis) [elvis {...}] : PsiType:int
-                            UDeclarationsExpression [var varae507364: int = [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
-                                ULocalVariable (name = varae507364) [var varae507364: int = [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
-                                    [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
+                            UDeclarationsExpression [var varae507364: int = a]
+                                ULocalVariable (name = varae507364) [var varae507364: int = a]
+                                    USimpleNameReferenceExpression (identifier = a) [a] : PsiType:int
+                                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                             UIfExpression [if (varae507364 != null) varae507364 else b]
                                 UBinaryExpression (operator = !=) [varae507364 != null]
                                     USimpleNameReferenceExpression (identifier = varae507364) [varae507364]
@@ -31,17 +44,26 @@ UFile (package = ) [public final class AnnotatedExpressionsKt {...]
             UBlockExpression [{...}]
                 UReturnExpression [return switch  {...]
                     USwitchExpression [switch  {...] : PsiType:Integer
-                        UExpressionList (when) [    [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) -> {...    ] : PsiType:Integer
-                            USwitchClauseExpressionWithBody [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) -> {...]
-                                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
+                        UExpressionList (when) [    str.isBlank() -> {...    ] : PsiType:Integer
+                            USwitchClauseExpressionWithBody [str.isBlank() -> {...]
+                                UQualifiedReferenceExpression [str.isBlank()] : PsiType:boolean
+                                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress(names = "DEPRECATION")]
+                                        UNamedExpression (name = names) [names = "DEPRECATION"]
+                                            ULiteralExpression (value = "DEPRECATION") ["DEPRECATION"] : PsiType:String
+                                    USimpleNameReferenceExpression (identifier = str) [str] : PsiType:String
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isBlank()] : PsiType:boolean
+                                        UIdentifier (Identifier (isBlank)) [UIdentifier (Identifier (isBlank))]
+                                        USimpleNameReferenceExpression (identifier = isBlank, resolvesTo = null) [isBlank] : PsiType:boolean
                                 UExpressionList (when_entry) [{...]
                                     UYieldExpression [yield null]
                                         ULiteralExpression (value = null) [null] : PsiType:Void
-                            USwitchClauseExpressionWithBody [str.[!] UnknownKotlinExpression (CALL_EXPRESSION) != null -> {...]
-                                UBinaryExpression (operator = !=) [str.[!] UnknownKotlinExpression (CALL_EXPRESSION) != null] : PsiType:boolean
-                                    UQualifiedReferenceExpression [str.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:boolean
+                            USwitchClauseExpressionWithBody [str.isNotEmpty() != null -> {...]
+                                UBinaryExpression (operator = !=) [str.isNotEmpty() != null] : PsiType:boolean
+                                    UQualifiedReferenceExpression [str.isNotEmpty()] : PsiType:boolean
                                         USimpleNameReferenceExpression (identifier = str) [str] : PsiType:String
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isNotEmpty()] : PsiType:boolean
+                                            UIdentifier (Identifier (isNotEmpty)) [UIdentifier (Identifier (isNotEmpty))]
+                                            USimpleNameReferenceExpression (identifier = isNotEmpty, resolvesTo = null) [isNotEmpty] : PsiType:boolean
                                     ULiteralExpression (value = null) [null] : PsiType:Void
                                 UExpressionList (when_entry) [{...]
                                     UYieldExpression [yield null]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationComplex.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationComplex.types.fir.txt
index 216fcd5c82f..aa010e18edd 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationComplex.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationComplex.types.fir.txt
@@ -2,21 +2,48 @@ UFile (package = ) [public abstract annotation Annotation {...]
     UClass (name = Annotation) [public abstract annotation Annotation {...}]
         UAnnotationMethod (name = strings) [public abstract fun strings() : java.lang.String[] = UastEmptyExpression]
     UClass (name = A) [public final class A {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = Annotation) [@Annotation]
         UMethod (name = A) [public fun A() = UastEmptyExpression]
     UClass (name = AnnotationInner) [public abstract annotation AnnotationInner {...}]
         UAnnotationMethod (name = value) [public abstract fun value() : Annotation = UastEmptyExpression]
     UClass (name = B1) [public final class B1 {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>())]
+            UNamedExpression (name = value) [value = <anonymous class>()]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Annotation
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Annotation
         UMethod (name = B1) [public fun B1() = UastEmptyExpression]
     UClass (name = B2) [public final class B2 {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>("sv1", "sv2"))]
+            UNamedExpression (name = value) [value = <anonymous class>("sv1", "sv2")]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>("sv1", "sv2")] : PsiType:Annotation
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Annotation
+                    ULiteralExpression (value = "sv1") ["sv1"] : PsiType:String
+                    ULiteralExpression (value = "sv2") ["sv2"] : PsiType:String
         UMethod (name = B2) [public fun B2() = UastEmptyExpression]
     UClass (name = AnnotationArray) [public abstract annotation AnnotationArray {...}]
         UAnnotationMethod (name = value) [public abstract fun value() : Annotation[] = UastEmptyExpression]
     UClass (name = C) [public final class C {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>(arrayOf("sar1", "sar2")))]
+            UNamedExpression (name = value) [value = <anonymous class>(arrayOf("sar1", "sar2"))]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(arrayOf("sar1", "sar2"))] : PsiType:Annotation
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Annotation
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [arrayOf("sar1", "sar2")] : PsiType:String[]
+                        UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                        USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] : PsiType:String[]
+                        ULiteralExpression (value = "sar1") ["sar1"] : PsiType:String
+                        ULiteralExpression (value = "sar2") ["sar2"] : PsiType:String
         UMethod (name = C) [public fun C() = UastEmptyExpression]
     UClass (name = C2) [public final class C2 {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>(collectionLiteral["[sar]1", "[sar]2"]))]
+            UNamedExpression (name = value) [value = <anonymous class>(collectionLiteral["[sar]1", "[sar]2"])]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(collectionLiteral["[sar]1", "[sar]2"])] : PsiType:Annotation
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Annotation
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 2)) [collectionLiteral["[sar]1", "[sar]2"]] : PsiType:String[]
+                        UIdentifier (Identifier ([)) [UIdentifier (Identifier ([))]
+                        ULiteralExpression (value = "[sar]1") ["[sar]1"] : PsiType:String
+                        ULiteralExpression (value = "[sar]2") ["[sar]2"] : PsiType:String
         UMethod (name = C2) [public fun C2() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationParameters.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationParameters.types.fir.txt
index 9e9cc2dc734..67cafaccf11 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationParameters.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/AnnotationParameters.types.fir.txt
@@ -1,18 +1,61 @@
 UFile (package = ) [public final class AnnotationParametersKt {...]
     UClass (name = AnnotationParametersKt) [public final class AnnotationParametersKt {...}]
-        UMethod (name = foo) [public static final fun foo() : int {...}]
+        UMethod (name = foo) [@RequiresPermission(anyOf = <anonymous class>(1, 2, 3))...}]
+            UAnnotation (fqName = RequiresPermission) [@RequiresPermission(anyOf = <anonymous class>(1, 2, 3))]
+                UNamedExpression (name = anyOf) [anyOf = <anonymous class>(1, 2, 3)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [<anonymous class>(1, 2, 3)] : PsiType:int[]
+                        UIdentifier (Identifier (intArrayOf)) [UIdentifier (Identifier (intArrayOf))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:int[]
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                        ULiteralExpression (value = 2) [2] : PsiType:int
+                        ULiteralExpression (value = 3) [3] : PsiType:int
+            UAnnotation (fqName = IntRange) [@IntRange(from = 10, to = 0)]
+                UNamedExpression (name = from) [from = 10]
+                    ULiteralExpression (value = 10) [10] : PsiType:long
+                UNamedExpression (name = to) [to = 0]
+                    ULiteralExpression (value = 0) [0] : PsiType:long
+            UAnnotation (fqName = WithDefaultValue) [@WithDefaultValue]
+            UAnnotation (fqName = SuppressLint) [@SuppressLint(value = "Lorem")]
+                UNamedExpression (name = value) [value = "Lorem"]
+                    ULiteralExpression (value = "Lorem") ["Lorem"] : PsiType:String
             UBlockExpression [{...}]
                 UReturnExpression [return 5]
                     ULiteralExpression (value = 5) [5] : PsiType:int
-        UMethod (name = bar) [public static final fun bar() : void {...}]
+        UMethod (name = bar) [@IntRange(from = 0, to = 100)...}]
+            UAnnotation (fqName = IntRange) [@IntRange(from = 0, to = 100)]
+                UNamedExpression (name = from) [from = 0]
+                    ULiteralExpression (value = 0) [0] : PsiType:long
+                UNamedExpression (name = to) [to = 100]
+                    ULiteralExpression (value = 100) [100] : PsiType:long
+            UAnnotation (fqName = SuppressLint) [@SuppressLint(value = "Lorem", value = "Ipsum", value = "Dolor")]
+                UNamedExpression (name = value) [value = "Lorem"]
+                    ULiteralExpression (value = "Lorem") ["Lorem"] : PsiType:String
+                UNamedExpression (name = value) [value = "Ipsum"]
+                    ULiteralExpression (value = "Ipsum") ["Ipsum"] : PsiType:String
+                UNamedExpression (name = value) [value = "Dolor"]
+                    ULiteralExpression (value = "Dolor") ["Dolor"] : PsiType:String
             UBlockExpression [{...}]
                 UReturnExpression [return Unit]
                     USimpleNameReferenceExpression (identifier = Unit) [Unit] : PsiType:Unit
-        UMethod (name = fooWithArrLiteral) [public static final fun fooWithArrLiteral() : int {...}]
+        UMethod (name = fooWithArrLiteral) [@RequiresPermission(anyOf = collectionLiteral[1, 2, 3])...}]
+            UAnnotation (fqName = RequiresPermission) [@RequiresPermission(anyOf = collectionLiteral[1, 2, 3])]
+                UNamedExpression (name = anyOf) [anyOf = collectionLiteral[1, 2, 3]]
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3)) [collectionLiteral[1, 2, 3]] : PsiType:int[]
+                        UIdentifier (Identifier ([)) [UIdentifier (Identifier ([))]
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                        ULiteralExpression (value = 2) [2] : PsiType:int
+                        ULiteralExpression (value = 3) [3] : PsiType:int
             UBlockExpression [{...}]
                 UReturnExpression [return 5]
                     ULiteralExpression (value = 5) [5] : PsiType:int
-        UMethod (name = fooWithStrArrLiteral) [public static final fun fooWithStrArrLiteral() : int {...}]
+        UMethod (name = fooWithStrArrLiteral) [@RequiresStrPermission(strs = collectionLiteral["a", "b", "c"])...}]
+            UAnnotation (fqName = RequiresStrPermission) [@RequiresStrPermission(strs = collectionLiteral["a", "b", "c"])]
+                UNamedExpression (name = strs) [strs = collectionLiteral["a", "b", "c"]]
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3)) [collectionLiteral["a", "b", "c"]] : PsiType:String[]
+                        UIdentifier (Identifier ([)) [UIdentifier (Identifier ([))]
+                        ULiteralExpression (value = "a") ["a"] : PsiType:String
+                        ULiteralExpression (value = "b") ["b"] : PsiType:String
+                        ULiteralExpression (value = "c") ["c"] : PsiType:String
             UBlockExpression [{...}]
                 UReturnExpression [return 3]
                     ULiteralExpression (value = 3) [3] : PsiType:int
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Anonymous.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Anonymous.types.fir.txt
index 75aee8c4f48..2c8ccab3108 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Anonymous.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Anonymous.types.fir.txt
@@ -10,15 +10,26 @@ UFile (package = ) [import java.io.Closeable...]
                             UClass (name = null) [final class null : java.lang.Runnable {...}]
                                 UMethod (name = run) [public fun run() : void {...}]
                                     UBlockExpression [{...}] : PsiType:Unit
-                UQualifiedReferenceExpression [runnable.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UQualifiedReferenceExpression [runnable.run()] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = runnable) [runnable] : PsiType:Object
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var runnable2: java.lang.Runnable = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = runnable2) [var runnable2: java.lang.Runnable = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [runnable2.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [run()] : PsiType:Unit
+                        UIdentifier (Identifier (run)) [UIdentifier (Identifier (run))]
+                        USimpleNameReferenceExpression (identifier = run, resolvesTo = null) [run] : PsiType:Unit
+                UDeclarationsExpression [var runnable2: java.lang.Runnable = Runnable({ ...})]
+                    ULocalVariable (name = runnable2) [var runnable2: java.lang.Runnable = Runnable({ ...})]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Runnable({ ...})] : PsiType:Runnable
+                            UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
+                            USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null) [Runnable] : PsiType:Runnable
+                            ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                                UBlockExpression [{...}] : PsiType:Unit
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] : PsiType:Unit
+                                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                UQualifiedReferenceExpression [runnable2.run()] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = runnable2) [runnable2] : PsiType:Runnable
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [run()] : PsiType:Unit
+                        UIdentifier (Identifier (run)) [UIdentifier (Identifier (run))]
+                        USimpleNameReferenceExpression (identifier = run, resolvesTo = null) [run] : PsiType:Unit
                 UDeclarationsExpression [var closeableRunnable: java.lang.Object = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }]
                     ULocalVariable (name = closeableRunnable) [var closeableRunnable: java.lang.Object = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }]
                         UObjectLiteralExpression [anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }] : PsiType:Runnable
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/BrokenMethod.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/BrokenMethod.types.fir.txt
index 11bb485436e..6e4b53168df 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/BrokenMethod.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/BrokenMethod.types.fir.txt
@@ -35,5 +35,8 @@ UFile (package = ) [public final class BrokenMethodKt {...]
                                     UParameter (name = $this$doStuff1) [@org.jetbrains.annotations.NotNull var $this$doStuff1: java.lang.Object]
                                         UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                                     UBlockExpression [{...}]
-                                        UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                        UReturnExpression [return <anonymous class>(this)]
+                                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(this)] : PsiType:Used
+                                                UIdentifier (Identifier (Used)) [UIdentifier (Identifier (Used))]
+                                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Used
+                                                UThisExpression (label = null) [this] : PsiType:Object
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.fir.txt
deleted file mode 100644
index 76042018986..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-UFile (package = ) [public final class A {...]
-    UClass (name = A) [public final class A {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UMethod (name = A) [public fun A() = UastEmptyExpression]
-    UClass (name = MyAnnotation) [public abstract annotation MyAnnotation {...}]
-        UAnnotationMethod (name = text) [public abstract fun text() : java.lang.String = UastEmptyExpression]
-    UClass (name = B) [public final class B {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UField (name = Companion) [@null public static final var Companion: B.Companion]
-            UAnnotation (fqName = null) [@null]
-        UMethod (name = B) [public fun B() = UastEmptyExpression]
-        UClass (name = InB) [public static final class InB {...}]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-            UMethod (name = InB) [public fun InB() = UastEmptyExpression]
-        UClass (name = Companion) [public static final class Companion {...}]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-            UMethod (name = Companion) [private fun Companion() = UastEmptyExpression]
-    UClass (name = Obj) [public final class Obj {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UField (name = INSTANCE) [@null public static final var INSTANCE: Obj]
-            UAnnotation (fqName = null) [@null]
-        UMethod (name = Obj) [private fun Obj() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.fe10.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.txt
index 2dbfb650f86..31b148e0d10 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ClassAnnotation.types.txt
@@ -27,4 +27,4 @@ UFile (package = ) [public final class A {...]
                 ULiteralExpression (value = "object") ["object"] : PsiType:String
         UField (name = INSTANCE) [@null public static final var INSTANCE: Obj]
             UAnnotation (fqName = null) [@null]
-        UMethod (name = Obj) [private fun Obj() = UastEmptyExpression]
+        UMethod (name = Obj) [private fun Obj() = UastEmptyExpression]
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/CommentOwners.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/CommentOwners.types.fir.txt
index a1689a88059..994811e968f 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/CommentOwners.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/CommentOwners.types.fir.txt
@@ -6,26 +6,38 @@ UFile (package = ) [public final class CommentOwnersKt {...]
         UMethod (name = getTopLevelProperty) [public static final fun getTopLevelProperty() : int = UastEmptyExpression]
         UMethod (name = topLevelFun) [public static final fun topLevelFun() : void {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return TODO()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : PsiType:Void
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : PsiType:Void
         UMethod (name = funPlainCall) [public static final fun funPlainCall(@org.jetbrains.annotations.NotNull a: int) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return TODO()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : PsiType:Void
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : PsiType:Void
         UMethod (name = funNamedArgumentsCall) [public static final fun funNamedArgumentsCall(@org.jetbrains.annotations.NotNull a: int) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return TODO()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : PsiType:Void
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : PsiType:Void
         UMethod (name = func) [public static final fun func(@org.jetbrains.annotations.NotNull a: int) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [funPlainCall(42)] : PsiType:Unit
+                    UIdentifier (Identifier (funPlainCall)) [UIdentifier (Identifier (funPlainCall))]
+                    USimpleNameReferenceExpression (identifier = funPlainCall, resolvesTo = null) [funPlainCall] : PsiType:Unit
+                    ULiteralExpression (value = 42) [42] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [funNamedArgumentsCall(42)] : PsiType:Unit
+                    UIdentifier (Identifier (funNamedArgumentsCall)) [UIdentifier (Identifier (funNamedArgumentsCall))]
+                    USimpleNameReferenceExpression (identifier = funNamedArgumentsCall, resolvesTo = null) [funNamedArgumentsCall] : PsiType:Unit
+                    ULiteralExpression (value = 42) [42] : PsiType:int
                 UWhileExpression [while (true) {...}]
                     ULiteralExpression (value = true) [true] : PsiType:boolean
                     UBlockExpression [{...}] : PsiType:Void
@@ -45,17 +57,23 @@ UFile (package = ) [public final class CommentOwnersKt {...]
             UParameter (name = t) [@org.jetbrains.annotations.NotNull var t: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()]
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
         UMethod (name = getClassLevelProperty) [public final fun getClassLevelProperty() : int = UastEmptyExpression]
         UMethod (name = classLevelMethod) [public final fun classLevelMethod() : void {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return TODO()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : PsiType:Void
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : PsiType:Void
         UClass (name = NestedClass) [public static final class NestedClass {...}]
             UMethod (name = NestedClass) [public fun NestedClass() = UastEmptyExpression]
     UClass (name = MyBooleanEnum) [public final enum MyBooleanEnum {...}]
-        UField (name = TRUE) [@null public static final var TRUE: MyBooleanEnum]
+        UEnumConstant (name = TRUE) [@null TRUE]
             UAnnotation (fqName = null) [@null]
-        UField (name = FALSE) [@null public static final var FALSE: MyBooleanEnum]
+            USimpleNameReferenceExpression (identifier = MyBooleanEnum) [MyBooleanEnum]
+        UEnumConstant (name = FALSE) [@null FALSE]
             UAnnotation (fqName = null) [@null]
+            USimpleNameReferenceExpression (identifier = MyBooleanEnum) [MyBooleanEnum]
         UMethod (name = MyBooleanEnum) [private fun MyBooleanEnum() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Comments.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Comments.types.fir.txt
index c1a2a73c342..966f00f79c2 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Comments.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Comments.types.fir.txt
@@ -16,12 +16,15 @@ UFile (package = ) [public abstract interface Pizza {...]
         UMethod (name = getSize) [public fun getSize() : int = UastEmptyExpression]
         UMethod (name = getName) [public fun getName() : java.lang.String {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    UQualifiedReferenceExpression [java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UReturnExpression [return java.lang.<anonymous class>("Margherita")]
+                    UQualifiedReferenceExpression [java.lang.<anonymous class>("Margherita")] : PsiType:String
                         UQualifiedReferenceExpression [java.lang] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = lang) [lang] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>("Margherita")] : PsiType:String
+                            UIdentifier (Identifier (String)) [UIdentifier (Identifier (String))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:String
+                            ULiteralExpression (value = "Margherita") ["Margherita"] : PsiType:String
         UMethod (name = contains) [public fun contains(@org.jetbrains.annotations.NotNull ingredient: Pizza.Ingredient) : boolean {...}]
             UParameter (name = ingredient) [@org.jetbrains.annotations.NotNull var ingredient: Pizza.Ingredient]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ConstructorDelegate.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ConstructorDelegate.types.fir.txt
index 45848da4b97..b403736dd1e 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ConstructorDelegate.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ConstructorDelegate.types.fir.txt
@@ -4,8 +4,11 @@ UFile (package = ) [public final class ConstructorDelegateKt {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Void
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Void
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>(i)] : PsiType:Void
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i)] : PsiType:BaseImpl
+                        UIdentifier (Identifier (BaseImpl)) [UIdentifier (Identifier (BaseImpl))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:BaseImpl
+                        USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
     UClass (name = Base) [public abstract interface Base {...}]
         UMethod (name = print) [public abstract fun print() : void = UastEmptyExpression]
     UClass (name = BaseImpl) [public final class BaseImpl : Base {...}]
@@ -17,11 +20,17 @@ UFile (package = ) [public final class ConstructorDelegateKt {...]
         UMethod (name = getX) [public final fun getX() : int = UastEmptyExpression]
         UMethod (name = print) [public fun print() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [print(x)] : PsiType:Unit
+                    UIdentifier (Identifier (print)) [UIdentifier (Identifier (print))]
+                    USimpleNameReferenceExpression (identifier = print, resolvesTo = null) [print] : PsiType:Unit
+                    USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
     UClass (name = Derived) [public final class Derived : Base, java.lang.CharSequence {...}]
-        UExpressionList (super_delegation) [super_delegation Base : [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UExpressionList (super_delegation) [super_delegation Base : createBase(10)]
             UTypeReferenceExpression (name = Base) [Base]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [createBase(10)] : PsiType:Base
+                UIdentifier (Identifier (createBase)) [UIdentifier (Identifier (createBase))]
+                USimpleNameReferenceExpression (identifier = createBase, resolvesTo = null) [createBase] : PsiType:Base
+                ULiteralExpression (value = 10) [10] : PsiType:int
         UExpressionList (super_delegation) [super_delegation java.lang.CharSequence : "abc"]
             UTypeReferenceExpression (name = java.lang.CharSequence) [java.lang.CharSequence]
             ULiteralExpression (value = "abc") ["abc"] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Constructors.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Constructors.types.fir.txt
index de37f842231..aa5fbe4d32b 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Constructors.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Constructors.types.fir.txt
@@ -9,7 +9,14 @@ UFile (package = ) [public final class A {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())]
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    UQualifiedReferenceExpression [i.toString()] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
     UClass (name = AWithInit) [public final class AWithInit {...}]
         UField (name = str) [@org.jetbrains.annotations.NotNull private final var str: java.lang.String]
@@ -19,12 +26,21 @@ UFile (package = ) [public final class A {...]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
                 UBlockExpression [{...}] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] : PsiType:Unit
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
         UMethod (name = AWithInit) [public fun AWithInit(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())]
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    UQualifiedReferenceExpression [i.toString()] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
     UClass (name = AWith2Init) [public final class AWith2Init {...}]
         UField (name = str) [@org.jetbrains.annotations.NotNull private final var str: java.lang.String]
@@ -34,14 +50,27 @@ UFile (package = ) [public final class A {...]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
                 UBlockExpression [{...}] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(1)] : PsiType:Unit
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                        ULiteralExpression (value = 1) [1] : PsiType:int
                 UBlockExpression [{...}] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(2)] : PsiType:Unit
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                        ULiteralExpression (value = 2) [2] : PsiType:int
         UMethod (name = AWith2Init) [public fun AWith2Init(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())]
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    UQualifiedReferenceExpression [i.toString()] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
     UClass (name = AOnlyInit) [public final class AOnlyInit {...}]
         UMethod (name = AOnlyInit) [public fun AOnlyInit() = UastEmptyExpression]
@@ -52,17 +81,23 @@ UFile (package = ) [public final class A {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
-                UBinaryExpression (operator = =) [a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()]
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                UBinaryExpression (operator = =) [a = i.toString()] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = a) [a] : PsiType:String
-                    UQualifiedReferenceExpression [i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                    UQualifiedReferenceExpression [i.toString()] : PsiType:String
                         USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = AWithSecondary) [public fun AWithSecondary(@org.jetbrains.annotations.NotNull s: java.lang.String) {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()]
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
                 UBinaryExpression (operator = =) [a = s] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = a) [a] : PsiType:String
                     USimpleNameReferenceExpression (identifier = s) [s] : PsiType:String
@@ -77,28 +112,38 @@ UFile (package = ) [public final class A {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()]
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
                 UBlockExpression [{...}] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UBinaryExpression (operator = =) [a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] : PsiType:Unit
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                UBinaryExpression (operator = =) [a = i.toString()] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = a) [a] : PsiType:String
-                    UQualifiedReferenceExpression [i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                    UQualifiedReferenceExpression [i.toString()] : PsiType:String
                         USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = AWithSecondaryInit) [public fun AWithSecondaryInit(@org.jetbrains.annotations.NotNull s: java.lang.String) {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()]
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
                 UBinaryExpression (operator = =) [a = s] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = a) [a] : PsiType:String
                     USimpleNameReferenceExpression (identifier = s) [s] : PsiType:String
                 UDeclarationsExpression [var local: java.lang.String = s]
                     ULocalVariable (name = local) [var local: java.lang.String = s]
                         USimpleNameReferenceExpression (identifier = s) [s] : PsiType:String
-                UQualifiedReferenceExpression [local.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UQualifiedReferenceExpression [local.toString()] : PsiType:String
                     USimpleNameReferenceExpression (identifier = local) [local] : PsiType:String
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                        UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                        USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = getA) [public final fun getA() : java.lang.String = UastEmptyExpression]
         UMethod (name = setA) [public final fun setA(@org.jetbrains.annotations.NotNull value: java.lang.String) : void = UastEmptyExpression]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: java.lang.String]
@@ -111,9 +156,11 @@ UFile (package = ) [public final class A {...]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
                 UBlockExpression [{...}] : PsiType:Unit
-                    UBinaryExpression (operator = =) [a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                    UBinaryExpression (operator = =) [a = i.toString()] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = a) [a] : PsiType:String
-                        UQualifiedReferenceExpression [i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                        UQualifiedReferenceExpression [i.toString()] : PsiType:String
                             USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                                UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = getA) [public final fun getA() : java.lang.String = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Delegate.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Delegate.types.fir.txt
index 647acce8df3..b9f33006313 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Delegate.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Delegate.types.fir.txt
@@ -17,12 +17,28 @@ UFile (package = ) [public final class MyColor {...]
         UMethod (name = getY) [public final fun getY() : int = UastEmptyExpression]
         UMethod (name = getZ) [public final fun getZ() : int = UastEmptyExpression]
     UClass (name = Some) [public final class Some {...}]
-        UField (name = lambda) [@org.jetbrains.annotations.NotNull private final var lambda: kotlin.Lazy<? extends MyColor> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = lambda) [@org.jetbrains.annotations.NotNull private final var lambda: kotlin.Lazy<? extends MyColor> = lazy({ ...})]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-        UField (name = nonLazy) [@org.jetbrains.annotations.NotNull private final var nonLazy: MyColor = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [lazy({ ...})] : PsiType:Lazy<? extends MyColor>
+                UIdentifier (Identifier (lazy)) [UIdentifier (Identifier (lazy))]
+                USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null) [lazy] : PsiType:Lazy<? extends MyColor>
+                ULambdaExpression [{ ...}] : PsiType:Function0<? extends MyColor>
+                    UBlockExpression [{...}] : PsiType:MyColor
+                        UReturnExpression [return <anonymous class>(1, 2, 3)]
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) [<anonymous class>(1, 2, 3)] : PsiType:MyColor
+                                UIdentifier (Identifier (MyColor)) [UIdentifier (Identifier (MyColor))]
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:MyColor
+                                ULiteralExpression (value = 1) [1] : PsiType:int
+                                ULiteralExpression (value = 2) [2] : PsiType:int
+                                ULiteralExpression (value = 3) [3] : PsiType:int
+        UField (name = nonLazy) [@org.jetbrains.annotations.NotNull private final var nonLazy: MyColor = <anonymous class>(1, 2, 3)]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) [<anonymous class>(1, 2, 3)] : PsiType:MyColor
+                UIdentifier (Identifier (MyColor)) [UIdentifier (Identifier (MyColor))]
+                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:MyColor
+                ULiteralExpression (value = 1) [1] : PsiType:int
+                ULiteralExpression (value = 2) [2] : PsiType:int
+                ULiteralExpression (value = 3) [3] : PsiType:int
         UMethod (name = Some) [public fun Some() = UastEmptyExpression]
         UMethod (name = getDelegate) [public final fun getDelegate() : MyColor = UastEmptyExpression]
         UMethod (name = getLambda) [public final fun getLambda() : kotlin.Lazy<? extends MyColor> = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/DestructuringDeclaration.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/DestructuringDeclaration.types.fir.txt
index d7726baaeec..04f6d3ee17d 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/DestructuringDeclaration.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/DestructuringDeclaration.types.fir.txt
@@ -10,10 +10,10 @@ UFile (package = ) [public final class DestructuringDeclarationKt {...]
                         UBinaryExpression (operator = <other>) ["foo" <other> 1] : PsiType:Pair<? extends String, ? extends Integer>
                             ULiteralExpression (value = "foo") ["foo"] : PsiType:String
                             ULiteralExpression (value = 1) [1] : PsiType:int
-                UDeclarationsExpression [@null @not-implemented-annotation var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
-                    ULocalVariable (name = var465978a0) [@null @not-implemented-annotation var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
+                UDeclarationsExpression [@null @null var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
+                    ULocalVariable (name = var465978a0) [@null @null var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
+                        UAnnotation (fqName = null) [@null]
                         UAnnotation (fqName = null) [@null]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
                         UBinaryExpressionWithType [data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>] : PsiType:Pair<? extends String, ? extends String>
                             USimpleNameReferenceExpression (identifier = data) [data] : PsiType:Object
                             UTypeReferenceExpression (name = kotlin.Pair<? extends java.lang.String,? extends java.lang.String>) [kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.fir.txt
deleted file mode 100644
index 5c4cecdea0f..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.fir.txt
+++ /dev/null
@@ -1,36 +0,0 @@
-UFile (package = ) [public final class ElvisKt {...]
-    UClass (name = ElvisKt) [public final class ElvisKt {...}]
-        UMethod (name = foo) [public static final fun foo(@org.jetbrains.annotations.NotNull bar: java.lang.String) : java.lang.String {...}]
-            UParameter (name = bar) [@org.jetbrains.annotations.NotNull var bar: java.lang.String]
-                UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}]
-                UReturnExpression [return null]
-                    ULiteralExpression (value = null) [null] : PsiType:Void
-        UMethod (name = bar) [public static final fun bar() : int {...}]
-            UBlockExpression [{...}]
-                UReturnExpression [return 42]
-                    ULiteralExpression (value = 42) [42] : PsiType:int
-        UMethod (name = baz) [public static final fun baz() : java.lang.String {...}]
-            UBlockExpression [{...}] : PsiType:Void
-                UReturnExpression [return elvis {...}] : PsiType:Void
-                    UExpressionList (elvis) [elvis {...}] : PsiType:String
-                        UDeclarationsExpression [var var243c51a0: java.lang.String = elvis {...}]
-                            ULocalVariable (name = var243c51a0) [var var243c51a0: java.lang.String = elvis {...}]
-                                UExpressionList (elvis) [elvis {...}] : PsiType:String
-                                    UDeclarationsExpression [var varc4aef569: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                        ULocalVariable (name = varc4aef569) [var varc4aef569: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                    UIfExpression [if (varc4aef569 != null) varc4aef569 else [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                        UBinaryExpression (operator = !=) [varc4aef569 != null]
-                                            USimpleNameReferenceExpression (identifier = varc4aef569) [varc4aef569]
-                                            ULiteralExpression (value = null) [null]
-                                        USimpleNameReferenceExpression (identifier = varc4aef569) [varc4aef569]
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UIfExpression [if (var243c51a0 != null) var243c51a0 else [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                            UBinaryExpression (operator = !=) [var243c51a0 != null]
-                                USimpleNameReferenceExpression (identifier = var243c51a0) [var243c51a0]
-                                ULiteralExpression (value = null) [null]
-                            USimpleNameReferenceExpression (identifier = var243c51a0) [var243c51a0]
-                            UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.fe10.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.txt
index 5818ed96a1c..b1d6c7b6908 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Elvis.types.txt
@@ -43,4 +43,4 @@ UFile (package = ) [public final class ElvisKt {...]
                                     USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] : PsiType:int
                                 UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
                                     UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
-                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
+                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ElvisType.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ElvisType.types.fir.txt
index bae81d35c5e..aa11a67beb1 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ElvisType.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ElvisType.types.fir.txt
@@ -4,8 +4,20 @@ UFile (package = ) [public final class ElvisTypeKt {...]
             UParameter (name = text) [@org.jetbrains.annotations.Nullable var text: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return bar(elvis {...})]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [bar(elvis {...})] : PsiType:Unit
+                        UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                        USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] : PsiType:Unit
+                        UExpressionList (elvis) [elvis {...}] : PsiType:String
+                            UDeclarationsExpression [var var63c495f9: java.lang.String = text]
+                                ULocalVariable (name = var63c495f9) [var var63c495f9: java.lang.String = text]
+                                    USimpleNameReferenceExpression (identifier = text) [text] : PsiType:String
+                            UIfExpression [if (var63c495f9 != null) var63c495f9 else return]
+                                UBinaryExpression (operator = !=) [var63c495f9 != null]
+                                    USimpleNameReferenceExpression (identifier = var63c495f9) [var63c495f9]
+                                    ULiteralExpression (value = null) [null]
+                                USimpleNameReferenceExpression (identifier = var63c495f9) [var63c495f9]
+                                UReturnExpression [return] : PsiType:Void
         UMethod (name = bar) [public static final fun bar(@org.jetbrains.annotations.NotNull o: java.lang.Object) : void {...}]
             UParameter (name = o) [@org.jetbrains.annotations.NotNull var o: java.lang.Object]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/EnumValueMembers.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/EnumValueMembers.types.fir.txt
index c7905cd222f..b8fcee38cd9 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/EnumValueMembers.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/EnumValueMembers.types.fir.txt
@@ -2,8 +2,15 @@ UFile (package = ) [public final enum Style {...]
     UClass (name = Style) [public final enum Style {...}]
         UField (name = value) [@org.jetbrains.annotations.NotNull private final var value: java.lang.String]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-        UField (name = SHEET) [@null public static final var SHEET: Style]
+        UEnumConstant (name = SHEET) [@null SHEET("foo") {...}]
             UAnnotation (fqName = null) [@null]
+            USimpleNameReferenceExpression (identifier = Style) [Style]
+            ULiteralExpression (value = "foo") ["foo"] : PsiType:String
+            UClass (name = SHEET) [public static final class SHEET : Style {...}]
+                UMethod (name = getExitAnimation) [public fun getExitAnimation() : java.lang.String {...}]
+                    UBlockExpression [{...}]
+                        UReturnExpression [return "bar"]
+                            ULiteralExpression (value = "bar") ["bar"] : PsiType:String
         UMethod (name = Style) [private fun Style(@org.jetbrains.annotations.NotNull value: java.lang.String) = UastEmptyExpression]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/EnumValuesConstructors.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/EnumValuesConstructors.types.fir.txt
index c02c2895655..25e8b565dbb 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/EnumValuesConstructors.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/EnumValuesConstructors.types.fir.txt
@@ -2,14 +2,22 @@ UFile (package = ) [public final enum Style {...]
     UClass (name = Style) [public final enum Style {...}]
         UField (name = value) [@org.jetbrains.annotations.Nullable private final var value: java.lang.String]
             UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
-        UField (name = SYSTEM) [@null public static final var SYSTEM: Style]
+        UEnumConstant (name = SYSTEM) [@null SYSTEM("system")]
             UAnnotation (fqName = null) [@null]
-        UField (name = USER) [@null public static final var USER: Style]
+            USimpleNameReferenceExpression (identifier = Style) [Style]
+            ULiteralExpression (value = "system") ["system"] : PsiType:String
+        UEnumConstant (name = USER) [@null USER("user")]
             UAnnotation (fqName = null) [@null]
-        UField (name = INTERNAL) [@null public static final var INTERNAL: Style]
+            USimpleNameReferenceExpression (identifier = Style) [Style]
+            ULiteralExpression (value = "user") ["user"] : PsiType:String
+        UEnumConstant (name = INTERNAL) [@null INTERNAL("internal")]
             UAnnotation (fqName = null) [@null]
-        UField (name = UNKNOWN) [@null public static final var UNKNOWN: Style]
+            USimpleNameReferenceExpression (identifier = Style) [Style]
+            ULiteralExpression (value = "internal") ["internal"] : PsiType:String
+        UEnumConstant (name = UNKNOWN) [@null UNKNOWN(null)]
             UAnnotation (fqName = null) [@null]
+            USimpleNameReferenceExpression (identifier = Style) [Style]
+            ULiteralExpression (value = null) [null] : PsiType:Void
         UMethod (name = Style) [private fun Style(@org.jetbrains.annotations.Nullable value: java.lang.String) = UastEmptyExpression]
             UParameter (name = value) [@org.jetbrains.annotations.Nullable var value: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/InferenceInsideUnresolvedConstructor.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/InferenceInsideUnresolvedConstructor.types.fir.txt
index 52bd7e6ef5b..704136983b2 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/InferenceInsideUnresolvedConstructor.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/InferenceInsideUnresolvedConstructor.types.fir.txt
@@ -2,8 +2,14 @@ UFile (package = ) [public final class InferenceInsideUnresolvedConstructorKt {.
     UClass (name = InferenceInsideUnresolvedConstructorKt) [public final class InferenceInsideUnresolvedConstructorKt {...}]
         UMethod (name = getBar) [public static final fun getBar() : java.lang.Object {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>(id(42))]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [<anonymous class>(id(42))] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (Unresolved)) [UIdentifier (Identifier (Unresolved))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [id(42)] : PsiType:int
+                            UIdentifier (Identifier (id)) [UIdentifier (Identifier (id))]
+                            USimpleNameReferenceExpression (identifier = id, resolvesTo = null) [id] : PsiType:int
+                            ULiteralExpression (value = 42) [42] : PsiType:int
         UMethod (name = id) [public static final fun id(@org.jetbrains.annotations.NotNull x: T) : T {...}]
             UParameter (name = x) [@org.jetbrains.annotations.NotNull var x: T]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/InnerNonFixedTypeVariable.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/InnerNonFixedTypeVariable.types.fir.txt
index da2a5ba38f3..e69fba6fdce 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/InnerNonFixedTypeVariable.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/InnerNonFixedTypeVariable.types.fir.txt
@@ -4,10 +4,20 @@ UFile (package = ) [public final class InnerNonFixedTypeVariableKt {...]
             UParameter (name = list) [@org.jetbrains.annotations.NotNull var list: java.util.List<? extends java.lang.Object>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Set<Unit>
-                UQualifiedReferenceExpression [list.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Set<Unit>
-                    UQualifiedReferenceExpression [list.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
+                UQualifiedReferenceExpression [list.filterIsInstance().<anonymous class>(mutableSetOf(), { var it: <ErrorType> ->...})] : PsiType:Set<Unit>
+                    UQualifiedReferenceExpression [list.filterIsInstance()] : PsiType:NonExistentClass
                         USimpleNameReferenceExpression (identifier = list) [list] : PsiType:List<? extends Object>
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [filterIsInstance()] : PsiType:NonExistentClass
+                            UIdentifier (Identifier (filterIsInstance)) [UIdentifier (Identifier (filterIsInstance))]
+                            USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null) [filterIsInstance] : PsiType:NonExistentClass
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(mutableSetOf(), { var it: <ErrorType> ->...})] : PsiType:Set<Unit>
+                        UIdentifier (Identifier (mapTo)) [UIdentifier (Identifier (mapTo))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Set<Unit>
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [mutableSetOf()] : PsiType:Set<Unit>
+                            UIdentifier (Identifier (mutableSetOf)) [UIdentifier (Identifier (mutableSetOf))]
+                            USimpleNameReferenceExpression (identifier = mutableSetOf, resolvesTo = null) [mutableSetOf] : PsiType:Set<Unit>
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:NonExistentClass
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] : PsiType:Unit
     UClass (name = Some) [public final class Some {...}]
         UMethod (name = Some) [public fun Some() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/LambdaReturn.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/LambdaReturn.types.fir.txt
index 81a511c3a65..74c27049d9b 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/LambdaReturn.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/LambdaReturn.types.fir.txt
@@ -79,18 +79,42 @@ UFile (package = org.jetbrains.uast.kotlin) [package org.jetbrains.uast.kotlin..
                                     UBinaryExpression (operator = +) ["a" + a] : PsiType:String
                                         ULiteralExpression (value = "a") ["a"] : PsiType:String
                                         USimpleNameReferenceExpression (identifier = a) [a] : PsiType:int
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [bar({ var it: <ErrorType> ->...})] : PsiType:Unit
+                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] : PsiType:Unit
+                    ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super Integer, ? extends Integer>
+                        UParameter (name = it) [var it: <ErrorType>]
+                        UBlockExpression [{...}] : PsiType:int
+                            UIfExpression [if (it > 5) return] : PsiType:Unit
+                                UBinaryExpression (operator = >) [it > 5] : PsiType:boolean
+                                    USimpleNameReferenceExpression (identifier = it) [it] : PsiType:int
+                                    ULiteralExpression (value = 5) [5] : PsiType:int
+                                UReturnExpression [return] : PsiType:Void
+                            UDeclarationsExpression [var b: int = 1]
+                                ULocalVariable (name = b) [var b: int = 1]
+                                    ULiteralExpression (value = 1) [1] : PsiType:int
+                            UReturnExpression [return it + b]
+                                UBinaryExpression (operator = +) [it + b] : PsiType:int
+                                    USimpleNameReferenceExpression (identifier = it) [it] : PsiType:int
+                                    USimpleNameReferenceExpression (identifier = b) [b] : PsiType:int
                 UDeclarationsExpression [var x: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}]
                     ULocalVariable (name = x) [var x: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}]
                         ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
                             UBlockExpression [{...}] : PsiType:Unit
-                                UDeclarationsExpression [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                    ULocalVariable (name = vardbcd0724) [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                UDeclarationsExpression [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = listOf(1, 2)]
+                                    ULocalVariable (name = vardbcd0724) [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = listOf(1, 2)]
                                         UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [listOf(1, 2)] : PsiType:List<? extends Integer>
+                                            UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends Integer>
+                                            ULiteralExpression (value = 1) [1] : PsiType:int
+                                            ULiteralExpression (value = 2) [2] : PsiType:int
                 UDeclarationsExpression [var y: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}]
                     ULocalVariable (name = y) [var y: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}]
                         ULambdaExpression [{ ...}] : PsiType:Function0<? extends List<? extends Integer>>
                             UBlockExpression [{...}] : PsiType:Unit
-                                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                UReturnExpression [return listOf(1)]
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf(1)] : PsiType:List<? extends Integer>
+                                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends Integer>
+                                        ULiteralExpression (value = 1) [1] : PsiType:int
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Lambdas.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Lambdas.types.fir.txt
index 3ab0c86128f..f1499306e80 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Lambdas.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Lambdas.types.fir.txt
@@ -3,24 +3,45 @@ UFile (package = ) [import java.util.stream.Stream...]
     UClass (name = LambdasKt) [public final class LambdasKt {...}]
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] : PsiType:NonExistentClass
-                UQualifiedReferenceExpression [Stream.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
-                    UQualifiedReferenceExpression [Stream.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Stream<String>
+                UQualifiedReferenceExpression [Stream.empty().filter({ var it: <ErrorType> ->...})] : PsiType:NonExistentClass
+                    UQualifiedReferenceExpression [Stream.empty()] : PsiType:Stream<String>
                         USimpleNameReferenceExpression (identifier = Stream) [Stream] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [empty()] : PsiType:Stream<String>
+                            UIdentifier (Identifier (empty)) [UIdentifier (Identifier (empty))]
+                            USimpleNameReferenceExpression (identifier = empty, resolvesTo = null) [empty] : PsiType:Stream<String>
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [filter({ var it: <ErrorType> ->...})] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (filter)) [UIdentifier (Identifier (filter))]
+                        USimpleNameReferenceExpression (identifier = filter, resolvesTo = null) [filter] : PsiType:NonExistentClass
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super String, ? extends Boolean>
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] : PsiType:boolean
+                                UReturnExpression [return it.isEmpty()]
+                                    UQualifiedReferenceExpression [it.isEmpty()] : PsiType:boolean
+                                        USimpleNameReferenceExpression (identifier = it) [it] : PsiType:NonExistentClass
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isEmpty()] : PsiType:boolean
+                                            UIdentifier (Identifier (isEmpty)) [UIdentifier (Identifier (isEmpty))]
+                                            USimpleNameReferenceExpression (identifier = isEmpty, resolvesTo = null) [isEmpty] : PsiType:boolean
         UMethod (name = doSelectItem) [public static final fun doSelectItem(@org.jetbrains.annotations.NotNull selectItemFunction: kotlin.jvm.functions.Function0<? extends kotlin.Unit>) : void {...}]
             UParameter (name = selectItemFunction) [@org.jetbrains.annotations.NotNull var selectItemFunction: kotlin.jvm.functions.Function0<? extends kotlin.Unit>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : PsiType:Unit
+                    UIdentifier (Identifier (selectItemFunction)) [UIdentifier (Identifier (selectItemFunction))]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
                 UDeclarationsExpression [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                     ULocalVariable (name = baz) [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                         ULambdaExpression [fun () {...}]
                             UBlockExpression [{...}] : PsiType:NonExistentClass
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] : PsiType:NonExistentClass
+                                    UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : PsiType:Unit
+                    UIdentifier (Identifier (baz)) [UIdentifier (Identifier (baz))]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
         UMethod (name = lambdaInPlaceCall) [public static final fun lambdaInPlaceCall() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                UWhileExpression [while ([!] UnknownKotlinExpression (CALL_EXPRESSION)) {...}]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UWhileExpression [while (invoke()) {...}]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : PsiType:boolean
+                        UIdentifier (Identifier ({)) [UIdentifier (Identifier ({))]
+                        USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:boolean
                     UBlockExpression [{...}] : PsiType:Unit
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/LocalDeclarations.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/LocalDeclarations.types.fir.txt
index 7c6d0d41c22..7f92b015f40 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/LocalDeclarations.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/LocalDeclarations.types.fir.txt
@@ -9,13 +9,17 @@ UFile (package = ) [public final class LocalDeclarationsKt {...]
                     UVariable (name = bar) [var bar: kotlin.jvm.functions.Function0<? extends Local> = fun () {...}]
                         ULambdaExpression [fun () {...}]
                             UBlockExpression [{...}]
-                                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                UReturnExpression [return <anonymous class>()]
+                                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Local
+                                        UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Local
                 UDeclarationsExpression [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                     ULocalVariable (name = baz) [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                         ULambdaExpression [fun () {...}]
                             UBlockExpression [{...}] : PsiType:Local
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Local
+                                    UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Local
                 UDeclarationsExpression [var someLocalFun: kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.String,? extends java.lang.Integer> = fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {...}]
                     UVariable (name = someLocalFun) [var someLocalFun: kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.String,? extends java.lang.Integer> = fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {...}]
                         ULambdaExpression [fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {...}]
@@ -24,7 +28,11 @@ UFile (package = ) [public final class LocalDeclarationsKt {...]
                             UBlockExpression [{...}]
                                 UReturnExpression [return 42]
                                     ULiteralExpression (value = 42) [42] : PsiType:int
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION) == [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Void
-                    UBinaryExpression (operator = ==) [[!] UnknownKotlinExpression (CALL_EXPRESSION) == [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:boolean
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return bar() == <anonymous class>()] : PsiType:Void
+                    UBinaryExpression (operator = ==) [bar() == <anonymous class>()] : PsiType:boolean
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] : PsiType:Local
+                            UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                            USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] : PsiType:Local
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Local
+                            UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Local
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/LocalVariableWithAnnotation.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/LocalVariableWithAnnotation.types.fir.txt
index 13082017c8e..171cc5007f6 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/LocalVariableWithAnnotation.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/LocalVariableWithAnnotation.types.fir.txt
@@ -2,8 +2,8 @@ UFile (package = ) [public final class LocalVariableWithAnnotationKt {...]
     UClass (name = LocalVariableWithAnnotationKt) [public final class LocalVariableWithAnnotationKt {...}]
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                UDeclarationsExpression [@not-implemented-annotation var bar: java.lang.String = "lorem ipsum"]
-                    ULocalVariable (name = bar) [@not-implemented-annotation var bar: java.lang.String = "lorem ipsum"]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+                UDeclarationsExpression [@TestAnnotation var bar: java.lang.String = "lorem ipsum"]
+                    ULocalVariable (name = bar) [@TestAnnotation var bar: java.lang.String = "lorem ipsum"]
+                        UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
                         ULiteralExpression (value = "lorem ipsum") ["lorem ipsum"] : PsiType:String
     UClass (name = TestAnnotation) [public abstract annotation TestAnnotation {...}]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/NonTrivialIdentifiers.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/NonTrivialIdentifiers.types.fir.txt
index ae31a5efc81..ffd091abbf6 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/NonTrivialIdentifiers.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/NonTrivialIdentifiers.types.fir.txt
@@ -4,16 +4,34 @@ UFile (package = ) [public final class NonTrivialIdentifiersKt {...]
             UParameter (name = a) [@org.jetbrains.annotations.Nullable var a: A]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var p: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = p) [var p: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : PsiType:Unit
+                    UIdentifier (Identifier (()) [UIdentifier (Identifier (())]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
+                UDeclarationsExpression [var p: A = <anonymous class>()]
+                    ULocalVariable (name = p) [var p: A = <anonymous class>()]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:A
+                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:A
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [invoke({ ...})] : PsiType:Unit
+                    UIdentifier (Identifier ({)) [UIdentifier (Identifier ({))]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
+                    ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                        UBlockExpression [{...}] : PsiType:Unit
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [invoke({ ...})] : PsiType:Unit
+                                UIdentifier (Identifier (p)) [UIdentifier (Identifier (p))]
+                                USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
+                                ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                                    UBlockExpression [{...}] : PsiType:Unit
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : PsiType:Unit
+                                            UIdentifier (Identifier (()) [UIdentifier (Identifier (())]
+                                            USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
     UClass (name = A) [public final class A {...}]
         UMethod (name = A) [public fun A() = UastEmptyExpression]
         UMethod (name = invoke) [public final fun invoke() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] : PsiType:Unit
+                    UIdentifier (Identifier (()) [UIdentifier (Identifier (())]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] : PsiType:Unit
         UMethod (name = invoke) [public final fun invoke(@org.jetbrains.annotations.NotNull f: kotlin.jvm.functions.Function0<? extends kotlin.Unit>) : void {...}]
             UParameter (name = f) [@org.jetbrains.annotations.NotNull var f: kotlin.jvm.functions.Function0<? extends kotlin.Unit>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ParameterPropertyWithAnnotation.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ParameterPropertyWithAnnotation.types.fir.txt
index d0ebbf32f09..a991a606da1 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ParameterPropertyWithAnnotation.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ParameterPropertyWithAnnotation.types.fir.txt
@@ -7,21 +7,25 @@ UFile (package = ) [public abstract annotation MyAnnotation {...]
     UClass (name = Test1) [public final class Test1 {...}]
         UField (name = bar) [@org.jetbrains.annotations.NotNull private var bar: int]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-        UMethod (name = Test1) [public fun Test1(@org.jetbrains.annotations.NotNull bar: int) = UastEmptyExpression]
-            UParameter (name = bar) [@org.jetbrains.annotations.NotNull var bar: int]
+        UMethod (name = Test1) [public fun Test1(@org.jetbrains.annotations.NotNull @MyAnnotation bar: int) = UastEmptyExpression]
+            UParameter (name = bar) [@org.jetbrains.annotations.NotNull @MyAnnotation var bar: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-        UMethod (name = getBar) [public final fun getBar() : int = UastEmptyExpression]
-        UMethod (name = setBar) [public final fun setBar(value: int) : void = UastEmptyExpression]
+                UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
+        UMethod (name = getBar) [@MyAnnotation...public final fun getBar() : int = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
+        UMethod (name = setBar) [@MyAnnotation...public final fun setBar(value: int) : void = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
             UParameter (name = value) [var value: int]
     UClass (name = Test2) [public final class Test2 {...}]
-        UField (name = bar) [@org.jetbrains.annotations.NotNull @not-implemented-annotation private var bar: int]
+        UField (name = bar) [@org.jetbrains.annotations.NotNull @MyAnnotation5 private var bar: int]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UMethod (name = Test2) [public fun Test2(@org.jetbrains.annotations.NotNull @not-implemented-annotation bar: int) = UastEmptyExpression]
-            UParameter (name = bar) [@org.jetbrains.annotations.NotNull @not-implemented-annotation var bar: int]
+            UAnnotation (fqName = MyAnnotation5) [@MyAnnotation5]
+        UMethod (name = Test2) [public fun Test2(@org.jetbrains.annotations.NotNull bar: int) = UastEmptyExpression]
+            UParameter (name = bar) [@org.jetbrains.annotations.NotNull var bar: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UMethod (name = getBar) [public final fun getBar() : int = UastEmptyExpression]
-        UMethod (name = setBar) [public final fun setBar(@MyAnnotation3 value: int) : void = UastEmptyExpression]
+        UMethod (name = getBar) [@MyAnnotation...public final fun getBar() : int = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
+        UMethod (name = setBar) [@MyAnnotation2...public final fun setBar(@MyAnnotation3 value: int) : void = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation2) [@MyAnnotation2]
             UParameter (name = value) [@MyAnnotation3 var value: int]
                 UAnnotation (fqName = MyAnnotation3) [@MyAnnotation3]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ParametersDisorder.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ParametersDisorder.types.fir.txt
index dda9574b3a7..dfa4ceff125 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ParametersDisorder.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ParametersDisorder.types.fir.txt
@@ -24,44 +24,120 @@ UFile (package = ) [public final class ParametersDisorderKt {...]
             UBlockExpression [{...}] : PsiType:Unit
         UMethod (name = call) [public static final fun call() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression ["abc".[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [global(2.2, 2)] : PsiType:Unit
+                    UIdentifier (Identifier (global)) [UIdentifier (Identifier (global))]
+                    USimpleNameReferenceExpression (identifier = global, resolvesTo = null) [global] : PsiType:Unit
+                    ULiteralExpression (value = 2.2) [2.2] : PsiType:float
+                    ULiteralExpression (value = 2) [2] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [withDefault("bbb")] : PsiType:Unit
+                    UIdentifier (Identifier (withDefault)) [UIdentifier (Identifier (withDefault))]
+                    USimpleNameReferenceExpression (identifier = withDefault, resolvesTo = null) [withDefault] : PsiType:Unit
+                    ULiteralExpression (value = "bbb") ["bbb"] : PsiType:String
+                UQualifiedReferenceExpression ["abc".withReceiver(1, 1.2)] : PsiType:Unit
                     ULiteralExpression (value = "abc") ["abc"] : PsiType:String
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [Math.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:double
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [withReceiver(1, 1.2)] : PsiType:Unit
+                        UIdentifier (Identifier (withReceiver)) [UIdentifier (Identifier (withReceiver))]
+                        USimpleNameReferenceExpression (identifier = withReceiver, resolvesTo = null) [withReceiver] : PsiType:Unit
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                        ULiteralExpression (value = 1.2) [1.2] : PsiType:float
+                UQualifiedReferenceExpression [Math.atan2(1.3, 3.4)] : PsiType:double
                     USimpleNameReferenceExpression (identifier = Math) [Math] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [atan2(1.3, 3.4)] : PsiType:double
+                        UIdentifier (Identifier (atan2)) [UIdentifier (Identifier (atan2))]
+                        USimpleNameReferenceExpression (identifier = atan2, resolvesTo = null) [atan2] : PsiType:double
+                        ULiteralExpression (value = 1.3) [1.3] : PsiType:double
+                        ULiteralExpression (value = 3.4) [3.4] : PsiType:double
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>("param1", "param2")] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (unresolvedMethod)) [UIdentifier (Identifier (unresolvedMethod))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = "param1") ["param1"] : PsiType:String
+                    ULiteralExpression (value = "param2") ["param2"] : PsiType:String
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", 1, 2, 3)] : PsiType:NonExistentClass
                     UQualifiedReferenceExpression [java.lang.String] : PsiType:Unit
                         UQualifiedReferenceExpression [java.lang] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = lang) [lang] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = String) [String] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 4)) [format("%i %i %i", 1, 2, 3)] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] : PsiType:NonExistentClass
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] : PsiType:String
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                        ULiteralExpression (value = 2) [2] : PsiType:int
+                        ULiteralExpression (value = 3) [3] : PsiType:int
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", arrayOf(1, 2, 3))] : PsiType:NonExistentClass
                     UQualifiedReferenceExpression [java.lang.String] : PsiType:Unit
                         UQualifiedReferenceExpression [java.lang] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = lang) [lang] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = String) [String] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [format("%i %i %i", arrayOf(1, 2, 3))] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] : PsiType:NonExistentClass
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] : PsiType:String
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [arrayOf(1, 2, 3)] : PsiType:Integer[]
+                            UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] : PsiType:Integer[]
+                            ULiteralExpression (value = 1) [1] : PsiType:int
+                            ULiteralExpression (value = 2) [2] : PsiType:int
+                            ULiteralExpression (value = 3) [3] : PsiType:int
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))] : PsiType:NonExistentClass
                     UQualifiedReferenceExpression [java.lang.String] : PsiType:Unit
                         UQualifiedReferenceExpression [java.lang] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = lang) [lang] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = String) [String] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] : PsiType:NonExistentClass
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] : PsiType:String
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [arrayOf(1, 2, 3)] : PsiType:Integer[]
+                            UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] : PsiType:Integer[]
+                            ULiteralExpression (value = 1) [1] : PsiType:int
+                            ULiteralExpression (value = 2) [2] : PsiType:int
+                            ULiteralExpression (value = 3) [3] : PsiType:int
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [arrayOf(4, 5, 6)] : PsiType:Integer[]
+                            UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] : PsiType:Integer[]
+                            ULiteralExpression (value = 4) [4] : PsiType:int
+                            ULiteralExpression (value = 5) [5] : PsiType:int
+                            ULiteralExpression (value = 6) [6] : PsiType:int
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", "".chunked(2).toTypedArray())] : PsiType:NonExistentClass
                     UQualifiedReferenceExpression [java.lang.String] : PsiType:Unit
                         UQualifiedReferenceExpression [java.lang] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = lang) [lang] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = String) [String] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [format("%i %i %i", "".chunked(2).toTypedArray())] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] : PsiType:NonExistentClass
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] : PsiType:String
+                        UQualifiedReferenceExpression ["".chunked(2).toTypedArray()] : PsiType:String[]
+                            UQualifiedReferenceExpression ["".chunked(2)] : PsiType:List<? extends String>
+                                ULiteralExpression (value = "") [""] : PsiType:String
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [chunked(2)] : PsiType:List<? extends String>
+                                    UIdentifier (Identifier (chunked)) [UIdentifier (Identifier (chunked))]
+                                    USimpleNameReferenceExpression (identifier = chunked, resolvesTo = null) [chunked] : PsiType:List<? extends String>
+                                    ULiteralExpression (value = 2) [2] : PsiType:int
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toTypedArray()] : PsiType:String[]
+                                UIdentifier (Identifier (toTypedArray)) [UIdentifier (Identifier (toTypedArray))]
+                                USimpleNameReferenceExpression (identifier = toTypedArray, resolvesTo = null) [toTypedArray] : PsiType:String[]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [with(<anonymous class>(), { ...})] : PsiType:Unit
+                    UIdentifier (Identifier (with)) [UIdentifier (Identifier (with))]
+                    USimpleNameReferenceExpression (identifier = with, resolvesTo = null) [with] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:A
+                        UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:A
+                    ULambdaExpression [{ ...}] : PsiType:Function1<? super A, ? extends Unit>
+                        UBlockExpression [{...}] : PsiType:Unit
+                            UQualifiedReferenceExpression ["def".with2Receivers(8, 7.0)] : PsiType:Unit
+                                ULiteralExpression (value = "def") ["def"] : PsiType:String
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [with2Receivers(8, 7.0)] : PsiType:Unit
+                                    UIdentifier (Identifier (with2Receivers)) [UIdentifier (Identifier (with2Receivers))]
+                                    USimpleNameReferenceExpression (identifier = with2Receivers, resolvesTo = null) [with2Receivers] : PsiType:Unit
+                                    ULiteralExpression (value = 8) [8] : PsiType:int
+                                    ULiteralExpression (value = 7.0) [7.0] : PsiType:float
         UMethod (name = objectLiteral) [public static final fun objectLiteral() : void {...}]
             UBlockExpression [{...}] : PsiType:Parent
                 UObjectLiteralExpression [anonymous object : Parent(b = 1, a = "foo") { }] : PsiType:Parent
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyAccessors.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyAccessors.types.fir.txt
index 41c735ce8dd..6d465ff3089 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyAccessors.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyAccessors.types.fir.txt
@@ -3,15 +3,20 @@ UFile (package = ) [public final class PropertyTest {...]
         UMethod (name = PropertyTest) [public fun PropertyTest() = UastEmptyExpression]
         UMethod (name = getStringRepresentation) [public final fun getStringRepresentation() : java.lang.String {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return this.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    UQualifiedReferenceExpression [this.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UReturnExpression [return this.toString()]
+                    UQualifiedReferenceExpression [this.toString()] : PsiType:String
                         UThisExpression (label = null) [this] : PsiType:PropertyTest
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = setStringRepresentation) [public final fun setStringRepresentation(@org.jetbrains.annotations.NotNull value: java.lang.String) : void {...}]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [setDataFromString(value)] : PsiType:Unit
+                    UIdentifier (Identifier (setDataFromString)) [UIdentifier (Identifier (setDataFromString))]
+                    USimpleNameReferenceExpression (identifier = setDataFromString, resolvesTo = null) [setDataFromString] : PsiType:Unit
+                    USimpleNameReferenceExpression (identifier = value) [value] : PsiType:String
         UMethod (name = setDataFromString) [public final fun setDataFromString(@org.jetbrains.annotations.NotNull data: java.lang.String) : void {...}]
             UParameter (name = data) [@org.jetbrains.annotations.NotNull var data: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyDelegate.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyDelegate.types.fir.txt
index da5b45517cf..f0f35f6ea0a 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyDelegate.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyDelegate.types.fir.txt
@@ -5,5 +5,11 @@ UFile (package = ) [public final class PropertyDelegateKt {...]
             UBlockExpression [{...}] : PsiType:Unit
                 UDeclarationsExpression [var sdCardPathLocal: java.lang.String]
                     ULocalVariable (name = sdCardPathLocal) [var sdCardPathLocal: java.lang.String]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [lazy({ ...})] : PsiType:Lazy<? extends String>
+                            UIdentifier (Identifier (lazy)) [UIdentifier (Identifier (lazy))]
+                            USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null) [lazy] : PsiType:Lazy<? extends String>
+                            ULambdaExpression [{ ...}] : PsiType:Function0<? extends String>
+                                UBlockExpression [{...}] : PsiType:String
+                                    UReturnExpression [return "/sdcard"]
+                                        ULiteralExpression (value = "/sdcard") ["/sdcard"] : PsiType:String
         UMethod (name = getAnnotatedDelegate) [public static final fun getAnnotatedDelegate() : int = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyReferences.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyReferences.types.fir.txt
index a1d765ac973..41753ffad97 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyReferences.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyReferences.types.fir.txt
@@ -2,9 +2,12 @@ UFile (package = ) [public final class PropertyReferencesKt {...]
     UClass (name = PropertyReferencesKt) [public final class PropertyReferencesKt {...}]
         UMethod (name = properties) [public static final fun properties() : void {...}]
             UBlockExpression [{...}] : PsiType:int
-                UDeclarationsExpression [var a: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = a) [var a: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var a: A = <anonymous class>(17)]
+                    ULocalVariable (name = a) [var a: A = <anonymous class>(17)]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(17)] : PsiType:A
+                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:A
+                            ULiteralExpression (value = 17) [17] : PsiType:int
                 UDeclarationsExpression [var x: int = -a.mutableProp]
                     ULocalVariable (name = x) [var x: int = -a.mutableProp]
                         UPrefixExpression (operator = -) [-a.mutableProp] : PsiType:int
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyWithAnnotation.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyWithAnnotation.types.fir.txt
index fd7d58d160b..efcb40d066b 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/PropertyWithAnnotation.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/PropertyWithAnnotation.types.fir.txt
@@ -1,11 +1,13 @@
 UFile (package = ) [public final class PropertyWithAnnotationKt {...]
     UClass (name = PropertyWithAnnotationKt) [public final class PropertyWithAnnotationKt {...}]
-        UField (name = prop1) [@org.jetbrains.annotations.NotNull @not-implemented-annotation private static final var prop1: int = 0]
+        UField (name = prop1) [@org.jetbrains.annotations.NotNull @TestAnnotation private static final var prop1: int = 0]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
             ULiteralExpression (value = 0) [0] : PsiType:int
-        UMethod (name = getProp1) [public static final fun getProp1() : int = UastEmptyExpression]
-        UMethod (name = getProp2) [public static final fun getProp2() : int {...}]
+        UMethod (name = getProp1) [@TestAnnotation...public static final fun getProp1() : int = UastEmptyExpression]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
+        UMethod (name = getProp2) [@TestAnnotation...}]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
             UBlockExpression [{...}]
                 UReturnExpression [return 0]
                     ULiteralExpression (value = 0) [0] : PsiType:int
@@ -13,7 +15,8 @@ UFile (package = ) [public final class PropertyWithAnnotationKt {...]
             UBlockExpression [{...}]
                 UReturnExpression [return 0]
                     ULiteralExpression (value = 0) [0] : PsiType:int
-        UMethod (name = setProp3) [public static final fun setProp3(@org.jetbrains.annotations.NotNull value: int) : void {...}]
+        UMethod (name = setProp3) [@TestAnnotation...}]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/QualifiedConstructorCall.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/QualifiedConstructorCall.types.fir.txt
index 88d045b9279..92190726231 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/QualifiedConstructorCall.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/QualifiedConstructorCall.types.fir.txt
@@ -5,11 +5,13 @@ UFile (package = A.B.C) [package A.B.C...]
         UMethod (name = Bar) [public fun Bar() = UastEmptyExpression]
         UMethod (name = getFoo) [public final fun getFoo() : A.B.C.Foo {...}]
             UBlockExpression [{...}] : PsiType:Void
-                UReturnExpression [return A.B.C.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Void
-                    UQualifiedReferenceExpression [A.B.C.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Foo
+                UReturnExpression [return A.B.C.<anonymous class>()] : PsiType:Void
+                    UQualifiedReferenceExpression [A.B.C.<anonymous class>()] : PsiType:Foo
                         UQualifiedReferenceExpression [A.B.C] : PsiType:Unit
                             UQualifiedReferenceExpression [A.B] : PsiType:Unit
                                 USimpleNameReferenceExpression (identifier = A) [A] : PsiType:Unit
                                 USimpleNameReferenceExpression (identifier = B) [B] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = C) [C] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Foo
+                            UIdentifier (Identifier (Foo)) [UIdentifier (Identifier (Foo))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Foo
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ReceiverFun.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ReceiverFun.types.fir.txt
index 1c271d04717..e95346475c8 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ReceiverFun.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ReceiverFun.types.fir.txt
@@ -1,21 +1,25 @@
 UFile (package = ) [public final class ReceiverFunKt {...]
     UClass (name = ReceiverFunKt) [public final class ReceiverFunKt {...}]
-        UMethod (name = foo) [public static final fun foo(@not-implemented-annotation @org.jetbrains.annotations.NotNull $this$foo: java.lang.String) : int {...}]
-            UParameter (name = $this$foo) [@not-implemented-annotation @org.jetbrains.annotations.NotNull var $this$foo: java.lang.String]
-                UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UMethod (name = foo) [public static final fun foo(@MyReceiverAnnotation @org.jetbrains.annotations.NotNull $this$foo: java.lang.String) : int {...}]
+            UParameter (name = $this$foo) [@MyReceiverAnnotation @org.jetbrains.annotations.NotNull var $this$foo: java.lang.String]
+                UAnnotation (fqName = MyReceiverAnnotation) [@MyReceiverAnnotation]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
                 UReturnExpression [return this.length]
                     UQualifiedReferenceExpression [this.length] : PsiType:int
                         UThisExpression (label = null) [this] : PsiType:String
                         USimpleNameReferenceExpression (identifier = length) [length] : PsiType:int
-        UMethod (name = getRx) [public static final fun getRx(@not-implemented-annotation @org.jetbrains.annotations.NotNull $this$rx: java.lang.String) : kotlin.text.Regex {...}]
-            UParameter (name = $this$rx) [@not-implemented-annotation @org.jetbrains.annotations.NotNull var $this$rx: java.lang.String]
-                UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UMethod (name = getRx) [public static final fun getRx(@MyReceiverAnnotation(name = "RegExp") @org.jetbrains.annotations.NotNull $this$rx: java.lang.String) : kotlin.text.Regex {...}]
+            UParameter (name = $this$rx) [@MyReceiverAnnotation(name = "RegExp") @org.jetbrains.annotations.NotNull var $this$rx: java.lang.String]
+                UAnnotation (fqName = MyReceiverAnnotation) [@MyReceiverAnnotation(name = "RegExp")]
+                    UNamedExpression (name = name) [name = "RegExp"]
+                        ULiteralExpression (value = "RegExp") ["RegExp"] : PsiType:String
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Regex
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Void
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return toRegex()] : PsiType:Void
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toRegex()] : PsiType:Regex
+                        UIdentifier (Identifier (toRegex)) [UIdentifier (Identifier (toRegex))]
+                        USimpleNameReferenceExpression (identifier = toRegex, resolvesTo = null) [toRegex] : PsiType:Regex
     UClass (name = MyReceiverAnnotation) [public abstract annotation MyReceiverAnnotation {...}]
         UAnnotationMethod (name = name) [public abstract fun name() : java.lang.String = UastEmptyExpression]
             ULiteralExpression (value = "") [""] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ReifiedResolve.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ReifiedResolve.types.fir.txt
index b69371e2f5e..93f3f7f6941 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ReifiedResolve.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ReifiedResolve.types.fir.txt
@@ -2,16 +2,29 @@ UFile (package = ) [public final class ReifiedResolveKt {...]
     UClass (name = ReifiedResolveKt) [public final class ReifiedResolveKt {...}]
         UMethod (name = resolve) [public static final fun resolve() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var x: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = x) [var x: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var y: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = y) [var y: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var z: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = z) [var z: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:List<? extends String>
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : PsiType:String
+                    UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                    USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:String
+                UDeclarationsExpression [var x: java.lang.String = foo()]
+                    ULocalVariable (name = x) [var x: java.lang.String = foo()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : PsiType:String
+                            UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                            USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:String
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] : PsiType:String
+                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] : PsiType:String
+                UDeclarationsExpression [var y: java.lang.String = bar()]
+                    ULocalVariable (name = y) [var y: java.lang.String = bar()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] : PsiType:String
+                            UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                            USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] : PsiType:String
+                UDeclarationsExpression [var z: java.util.List<? extends java.lang.String> = listOf("foo").filterIsInstance()]
+                    ULocalVariable (name = z) [var z: java.util.List<? extends java.lang.String> = listOf("foo").filterIsInstance()]
+                        UQualifiedReferenceExpression [listOf("foo").filterIsInstance()] : PsiType:List<? extends String>
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("foo")] : PsiType:List<? extends String>
+                                UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                                USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends String>
+                                ULiteralExpression (value = "foo") ["foo"] : PsiType:String
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [filterIsInstance()] : PsiType:List<? extends String>
+                                UIdentifier (Identifier (filterIsInstance)) [UIdentifier (Identifier (filterIsInstance))]
+                                USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null) [filterIsInstance] : PsiType:List<? extends String>
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Resolve.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Resolve.types.fir.txt
index bbf66ea0ea5..5f973bed4c3 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Resolve.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Resolve.types.fir.txt
@@ -2,75 +2,140 @@ UFile (package = ) [public final class ResolveKt {...]
     UClass (name = ResolveKt) [public final class ResolveKt {...}]
         UMethod (name = bar) [public static final fun bar() : void {...}]
             UBlockExpression [{...}] : PsiType:IntRange
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).size] : PsiType:int
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UQualifiedReferenceExpression [<anonymous class>().foo()] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:A
+                        UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:A
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : PsiType:Unit
+                        UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Unit
+                UQualifiedReferenceExpression [<anonymous class>().inlineFoo()] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:A
+                        UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:A
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [inlineFoo()] : PsiType:Unit
+                        UIdentifier (Identifier (inlineFoo)) [UIdentifier (Identifier (inlineFoo))]
+                        USimpleNameReferenceExpression (identifier = inlineFoo, resolvesTo = null) [inlineFoo] : PsiType:Unit
+                UQualifiedReferenceExpression [listOf(<anonymous class>()).forEach({ var it: <ErrorType> ->...})] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf(<anonymous class>())] : PsiType:List<? extends A>
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends A>
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:A
+                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:A
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [forEach({ var it: <ErrorType> ->...})] : PsiType:Unit
+                        UIdentifier (Identifier (forEach)) [UIdentifier (Identifier (forEach))]
+                        USimpleNameReferenceExpression (identifier = forEach, resolvesTo = null) [forEach] : PsiType:Unit
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super A, ? extends Unit>
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] : PsiType:Unit
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(it)] : PsiType:Unit
+                                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                                    USimpleNameReferenceExpression (identifier = it) [it] : PsiType:A
+                UQualifiedReferenceExpression [listOf("").joinToString()] : PsiType:String
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] : PsiType:List<? extends String>
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends String>
+                        ULiteralExpression (value = "") [""] : PsiType:String
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [joinToString()] : PsiType:String
+                        UIdentifier (Identifier (joinToString)) [UIdentifier (Identifier (joinToString))]
+                        USimpleNameReferenceExpression (identifier = joinToString, resolvesTo = null) [joinToString] : PsiType:String
+                UQualifiedReferenceExpression [listOf("").size] : PsiType:int
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] : PsiType:List<? extends String>
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends String>
+                        ULiteralExpression (value = "") [""] : PsiType:String
                     USimpleNameReferenceExpression (identifier = size) [size] : PsiType:int
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).indices] : PsiType:IntRange
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UQualifiedReferenceExpression [listOf("").indices] : PsiType:IntRange
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] : PsiType:List<? extends String>
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends String>
+                        ULiteralExpression (value = "") [""] : PsiType:String
                     USimpleNameReferenceExpression (identifier = indices) [indices] : PsiType:IntRange
-                UDeclarationsExpression [var date: java.util.Date = java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = date) [var date: java.util.Date = java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UQualifiedReferenceExpression [java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Date
+                UDeclarationsExpression [var date: java.util.Date = java.util.<anonymous class>()]
+                    ULocalVariable (name = date) [var date: java.util.Date = java.util.<anonymous class>()]
+                        UQualifiedReferenceExpression [java.util.<anonymous class>()] : PsiType:Date
                             UQualifiedReferenceExpression [java.util] : PsiType:Unit
                                 USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                                 USimpleNameReferenceExpression (identifier = util) [util] : PsiType:Unit
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Date
+                                UIdentifier (Identifier (Date)) [UIdentifier (Identifier (Date))]
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Date
                 UBinaryExpression (operator = =) [date.time = 1000] : PsiType:Unit
                     UQualifiedReferenceExpression [date.time] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = date) [date] : PsiType:Date
                         USimpleNameReferenceExpression (identifier = time) [time] : PsiType:long
                     ULiteralExpression (value = 1000) [1000] : PsiType:long
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).entries.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
-                    UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).entries.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Entry<Integer, String>
-                        UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).entries] : PsiType:Set<Entry<Integer, String>>
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UQualifiedReferenceExpression [listOf("").last()] : PsiType:String
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] : PsiType:List<? extends String>
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends String>
+                        ULiteralExpression (value = "") [""] : PsiType:String
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [last()] : PsiType:String
+                        UIdentifier (Identifier (last)) [UIdentifier (Identifier (last))]
+                        USimpleNameReferenceExpression (identifier = last, resolvesTo = null) [last] : PsiType:String
+                UQualifiedReferenceExpression [mutableMapOf(1 <other> "1").entries.first().setValue("123")] : PsiType:String
+                    UQualifiedReferenceExpression [mutableMapOf(1 <other> "1").entries.first()] : PsiType:Entry<Integer, String>
+                        UQualifiedReferenceExpression [mutableMapOf(1 <other> "1").entries] : PsiType:Set<Entry<Integer, String>>
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [mutableMapOf(1 <other> "1")] : PsiType:Map<Integer, String>
+                                UIdentifier (Identifier (mutableMapOf)) [UIdentifier (Identifier (mutableMapOf))]
+                                USimpleNameReferenceExpression (identifier = mutableMapOf, resolvesTo = null) [mutableMapOf] : PsiType:Map<Integer, String>
+                                UBinaryExpression (operator = <other>) [1 <other> "1"] : PsiType:Pair<? extends Integer, ? extends String>
+                                    ULiteralExpression (value = 1) [1] : PsiType:int
+                                    ULiteralExpression (value = "1") ["1"] : PsiType:String
                             USimpleNameReferenceExpression (identifier = entries) [entries] : PsiType:Set<Entry<Integer, String>>
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [first()] : PsiType:Entry<Integer, String>
+                            UIdentifier (Identifier (first)) [UIdentifier (Identifier (first))]
+                            USimpleNameReferenceExpression (identifier = first, resolvesTo = null) [first] : PsiType:Entry<Integer, String>
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [setValue("123")] : PsiType:String
+                        UIdentifier (Identifier (setValue)) [UIdentifier (Identifier (setValue))]
+                        USimpleNameReferenceExpression (identifier = setValue, resolvesTo = null) [setValue] : PsiType:String
+                        ULiteralExpression (value = "123") ["123"] : PsiType:String
                 UDeclarationsExpression [var intRange: kotlin.ranges.LongRange = 0 .. 3]
                     ULocalVariable (name = intRange) [var intRange: kotlin.ranges.LongRange = 0 .. 3]
                         UBinaryExpression (operator = ..) [0 .. 3] : PsiType:LongRange
                             ULiteralExpression (value = 0) [0] : PsiType:long
                             ULiteralExpression (value = 3) [3] : PsiType:long
-                UQualifiedReferenceExpression [intRange.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:boolean
+                UQualifiedReferenceExpression [intRange.contains(2 as int)] : PsiType:boolean
                     USimpleNameReferenceExpression (identifier = intRange) [intRange] : PsiType:LongRange
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [contains(2 as int)] : PsiType:boolean
+                        UIdentifier (Identifier (contains)) [UIdentifier (Identifier (contains))]
+                        USimpleNameReferenceExpression (identifier = contains, resolvesTo = null) [contains] : PsiType:boolean
+                        UBinaryExpressionWithType [2 as int] : PsiType:int
+                            ULiteralExpression (value = 2) [2] : PsiType:int
+                            UTypeReferenceExpression (name = int) [int]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(1, 2)] : PsiType:IntRange
+                    UIdentifier (Identifier (IntRange)) [UIdentifier (Identifier (IntRange))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:IntRange
+                    ULiteralExpression (value = 1) [1] : PsiType:int
+                    ULiteralExpression (value = 2) [2] : PsiType:int
         UMethod (name = barT) [public static final fun barT(@org.jetbrains.annotations.NotNull t: T) : void {...}]
             UParameter (name = t) [@org.jetbrains.annotations.NotNull var t: T]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                UQualifiedReferenceExpression [t.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UQualifiedReferenceExpression [t.foo()] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = t) [t] : PsiType:T
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : PsiType:Unit
+                        UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Unit
         UMethod (name = barTL) [public static final fun barTL(@org.jetbrains.annotations.NotNull listT: T) : void {...}]
             UParameter (name = listT) [@org.jetbrains.annotations.NotNull var listT: T]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                UQualifiedReferenceExpression [listT.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:boolean
+                UQualifiedReferenceExpression [listT.isEmpty()] : PsiType:boolean
                     USimpleNameReferenceExpression (identifier = listT) [listT] : PsiType:T
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isEmpty()] : PsiType:boolean
+                        UIdentifier (Identifier (isEmpty)) [UIdentifier (Identifier (isEmpty))]
+                        USimpleNameReferenceExpression (identifier = isEmpty, resolvesTo = null) [isEmpty] : PsiType:boolean
                 UForEachExpression [for (a : listT) {...}]
                     USimpleNameReferenceExpression (identifier = listT) [listT] : PsiType:T
                     UBlockExpression [{...}] : PsiType:Unit
-                        UQualifiedReferenceExpression [a.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                        UQualifiedReferenceExpression [a.foo()] : PsiType:Unit
                             USimpleNameReferenceExpression (identifier = a) [a] : PsiType:A
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] : PsiType:Unit
+                                UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                                USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Unit
     UClass (name = A) [public class A {...}]
         UMethod (name = A) [public fun A() = UastEmptyExpression]
         UMethod (name = foo) [public final fun foo() : void {...}]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/SAM.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/SAM.types.fir.txt
index 205cedce9f4..6554f5e0a2a 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/SAM.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/SAM.types.fir.txt
@@ -12,13 +12,17 @@ UFile (package = ) [import java.lang.Thread...]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
                 UBlockExpression [{...}] : PsiType:Runnable
-        UField (name = baz) [@org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = baz) [@org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.Runnable({ ...})]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UQualifiedReferenceExpression [java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Runnable
+            UQualifiedReferenceExpression [java.lang.Runnable({ ...})] : PsiType:Runnable
                 UQualifiedReferenceExpression [java.lang] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = java) [java] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = lang) [lang] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Runnable({ ...})] : PsiType:Runnable
+                    UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
+                    USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null) [Runnable] : PsiType:Runnable
+                    ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                        UBlockExpression [{...}] : PsiType:Unit
         UMethod (name = getNotSam) [public static final fun getNotSam() : kotlin.jvm.functions.Function0<? extends kotlin.Unit> = UastEmptyExpression]
         UMethod (name = getFoo) [public static final fun getFoo() : java.lang.Runnable = UastEmptyExpression]
         UMethod (name = setFoo) [public static final fun setFoo(@org.jetbrains.annotations.NotNull value: java.lang.Runnable) : void = UastEmptyExpression]
@@ -36,7 +40,11 @@ UFile (package = ) [import java.lang.Thread...]
                             ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
                                 UBlockExpression [{...}] : PsiType:Void
                             UTypeReferenceExpression (name = java.lang.Runnable) [java.lang.Runnable]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [runRunnable({ ...})] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (runRunnable)) [UIdentifier (Identifier (runRunnable))]
+                    USimpleNameReferenceExpression (identifier = runRunnable, resolvesTo = null) [runRunnable] : PsiType:NonExistentClass
+                    ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                        UBlockExpression [{...}] : PsiType:Unit
                 UReturnExpression [return { ...}] : PsiType:Void
                     ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
                         UBlockExpression [{...}] : PsiType:Runnable
@@ -45,31 +53,74 @@ UFile (package = ) [import java.lang.Thread...]
             UParameter (name = r) [@org.jetbrains.annotations.NotNull var r: java.lang.Runnable]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] : PsiType:NonExistentClass
+                        UIdentifier (Identifier (r)) [UIdentifier (Identifier (r))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
         UMethod (name = test1) [public static final fun test1() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                UDeclarationsExpression [var thread1: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = thread1) [var thread1: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var thread1: java.lang.Thread = <anonymous class>({ ...})]
+                    ULocalVariable (name = thread1) [var thread1: java.lang.Thread = <anonymous class>({ ...})]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>({ ...})] : PsiType:Thread
+                            UIdentifier (Identifier (Thread)) [UIdentifier (Identifier (Thread))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Thread
+                            ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                                UBlockExpression [{...}] : PsiType:Unit
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("hello1")] : PsiType:Unit
+                                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                                        ULiteralExpression (value = "hello1") ["hello1"] : PsiType:String
         UMethod (name = test2) [public static final fun test2() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                UDeclarationsExpression [var thread2: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = thread2) [var thread2: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var thread2: java.lang.Thread = <anonymous class>(Runnable({ ...}))]
+                    ULocalVariable (name = thread2) [var thread2: java.lang.Thread = <anonymous class>(Runnable({ ...}))]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(Runnable({ ...}))] : PsiType:Thread
+                            UIdentifier (Identifier (Thread)) [UIdentifier (Identifier (Thread))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Thread
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Runnable({ ...})] : PsiType:Runnable
+                                UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
+                                USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null) [Runnable] : PsiType:Runnable
+                                ULambdaExpression [{ ...}] : PsiType:Function0<? extends Unit>
+                                    UBlockExpression [{...}] : PsiType:Unit
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("hello2")] : PsiType:Unit
+                                            UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                            USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                                            ULiteralExpression (value = "hello2") ["hello2"] : PsiType:String
         UMethod (name = test3) [public static final fun test3() : void {...}]
             UBlockExpression [{...}] : PsiType:String
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [ambiguousSamAcceptor(Supplier({ ...}))] : PsiType:String
+                    UIdentifier (Identifier (ambiguousSamAcceptor)) [UIdentifier (Identifier (ambiguousSamAcceptor))]
+                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null) [ambiguousSamAcceptor] : PsiType:String
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Supplier({ ...})] : PsiType:Supplier<String>
+                        UIdentifier (Identifier (Supplier)) [UIdentifier (Identifier (Supplier))]
+                        USimpleNameReferenceExpression (identifier = Supplier, resolvesTo = null) [Supplier] : PsiType:Supplier<String>
+                        ULambdaExpression [{ ...}] : PsiType:Function0<? extends String>
+                            UBlockExpression [{...}] : PsiType:String
+                                UReturnExpression [return "Supplier"]
+                                    ULiteralExpression (value = "Supplier") ["Supplier"] : PsiType:String
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [ambiguousSamAcceptor(Callable({ ...}))] : PsiType:String
+                    UIdentifier (Identifier (ambiguousSamAcceptor)) [UIdentifier (Identifier (ambiguousSamAcceptor))]
+                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null) [ambiguousSamAcceptor] : PsiType:String
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Callable({ ...})] : PsiType:Callable<String>
+                        UIdentifier (Identifier (Callable)) [UIdentifier (Identifier (Callable))]
+                        USimpleNameReferenceExpression (identifier = Callable, resolvesTo = null) [Callable] : PsiType:Callable<String>
+                        ULambdaExpression [{ ...}] : PsiType:Function0<? extends String>
+                            UBlockExpression [{...}] : PsiType:String
+                                UReturnExpression [return "Callable"]
+                                    ULiteralExpression (value = "Callable") ["Callable"] : PsiType:String
         UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.function.Supplier<java.lang.String>) : java.lang.String {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.util.function.Supplier<java.lang.String>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return TODO()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : PsiType:Void
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : PsiType:Void
         UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.concurrent.Callable<java.lang.String>) : java.lang.String {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.util.concurrent.Callable<java.lang.String>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return TODO()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] : PsiType:Void
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] : PsiType:Void
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Simple.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Simple.types.fir.txt
index b509b3b603b..9015481b38e 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Simple.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Simple.types.fir.txt
@@ -6,5 +6,8 @@ UFile (package = ) [public final class Simple {...]
         UMethod (name = Simple) [public fun Simple() = UastEmptyExpression]
         UMethod (name = method) [public final fun method() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("Hello, world!")] : PsiType:Unit
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                    ULiteralExpression (value = "Hello, world!") ["Hello, world!"] : PsiType:String
         UMethod (name = getProperty) [public final fun getProperty() : java.lang.String = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/SimpleAnnotated.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/SimpleAnnotated.types.fir.txt
index c41398a1c8c..35a0c4edd74 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/SimpleAnnotated.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/SimpleAnnotated.types.fir.txt
@@ -1,11 +1,22 @@
 UFile (package = ) [public final class SimpleAnnotated {...]
     UClass (name = SimpleAnnotated) [public final class SimpleAnnotated {...}]
-        UField (name = property) [@org.jetbrains.annotations.NotNull @not-implemented-annotation private final var property: java.lang.String = "Mary"]
+        UField (name = property) [@org.jetbrains.annotations.NotNull @kotlin.SinceKotlin(version = "1.0") private final var property: java.lang.String = "Mary"]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+            UAnnotation (fqName = kotlin.SinceKotlin) [@kotlin.SinceKotlin(version = "1.0")]
+                UNamedExpression (name = version) [version = "1.0"]
+                    ULiteralExpression (value = "1.0") ["1.0"] : PsiType:String
             ULiteralExpression (value = "Mary") ["Mary"] : PsiType:String
         UMethod (name = SimpleAnnotated) [public fun SimpleAnnotated() = UastEmptyExpression]
-        UMethod (name = method) [public final fun method() : void {...}]
+        UMethod (name = method) [@kotlin.Suppress(names = "abc")...}]
+            UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress(names = "abc")]
+                UNamedExpression (name = names) [names = "abc"]
+                    ULiteralExpression (value = "abc") ["abc"] : PsiType:String
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-        UMethod (name = getProperty) [public final fun getProperty() : java.lang.String = UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("Hello, world!")] : PsiType:Unit
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                    ULiteralExpression (value = "Hello, world!") ["Hello, world!"] : PsiType:String
+        UMethod (name = getProperty) [@kotlin.SinceKotlin(version = "1.0")...public final fun getProperty() : java.lang.String = UastEmptyExpression]
+            UAnnotation (fqName = kotlin.SinceKotlin) [@kotlin.SinceKotlin(version = "1.0")]
+                UNamedExpression (name = version) [version = "1.0"]
+                    ULiteralExpression (value = "1.0") ["1.0"] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplex.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplex.types.fir.txt
index 890c6e85e64..2f3787e173a 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplex.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplex.types.fir.txt
@@ -25,15 +25,18 @@ UFile (package = ) [public final class StringTemplateComplexKt {...]
                     ULiteralExpression (value = "literal") ["literal"] : PsiType:String
                     USimpleNameReferenceExpression (identifier = case4) [case4] : PsiType:String
                 ULiteralExpression (value = " z") [" z"] : PsiType:String
-        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"]
+        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.repeat(4) + " z"]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UPolyadicExpression (operator = +) ["a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"] : PsiType:String
+            UPolyadicExpression (operator = +) ["a " + "literal" + case4.repeat(4) + " z"] : PsiType:String
                 ULiteralExpression (value = "a ") ["a "] : PsiType:String
-                UQualifiedReferenceExpression ["literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UQualifiedReferenceExpression ["literal" + case4.repeat(4)] : PsiType:String
                     UPolyadicExpression (operator = +) ["literal" + case4] : PsiType:String
                         ULiteralExpression (value = "literal") ["literal"] : PsiType:String
                         USimpleNameReferenceExpression (identifier = case4) [case4] : PsiType:String
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [repeat(4)] : PsiType:String
+                        UIdentifier (Identifier (repeat)) [UIdentifier (Identifier (repeat))]
+                        USimpleNameReferenceExpression (identifier = repeat, resolvesTo = null) [repeat] : PsiType:String
+                        ULiteralExpression (value = 4) [4] : PsiType:int
                 ULiteralExpression (value = " z") [" z"] : PsiType:String
         UField (name = empty) [@org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
@@ -53,12 +56,19 @@ UFile (package = ) [public final class StringTemplateComplexKt {...]
                     USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = template1) [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UPolyadicExpression (operator = +) ["." + [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(baz)] : PsiType:Unit
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                    USimpleNameReferenceExpression (identifier = baz) [baz] : PsiType:NonExistentClass
+                UDeclarationsExpression [var template1: java.lang.String = simpleForTemplate()]
+                    ULocalVariable (name = template1) [var template1: java.lang.String = simpleForTemplate()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] : PsiType:String
+                            UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                            USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] : PsiType:String
+                UDeclarationsExpression [var template2: java.lang.String = "." + simpleForTemplate()]
+                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + simpleForTemplate()]
+                        UPolyadicExpression (operator = +) ["." + simpleForTemplate()] : PsiType:String
                             ULiteralExpression (value = ".") ["."] : PsiType:String
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] : PsiType:String
+                                UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplexForUInjectionHost.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplexForUInjectionHost.types.fir.txt
index 358d0e25799..fa82cd4fb5a 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplexForUInjectionHost.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateComplexForUInjectionHost.types.fir.txt
@@ -25,15 +25,18 @@ UFile (package = ) [public final class StringTemplateComplexForUInjectionHostKt
                     ULiteralExpression (value = "literal") ["literal"] : PsiType:String
                     USimpleNameReferenceExpression (identifier = case4) [case4] : PsiType:String
                 ULiteralExpression (value = " z") [" z"] : PsiType:String
-        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"]
+        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.repeat(4) + " z"]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UPolyadicExpression (operator = +) ["a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"] : PsiType:String
+            UPolyadicExpression (operator = +) ["a " + "literal" + case4.repeat(4) + " z"] : PsiType:String
                 ULiteralExpression (value = "a ") ["a "] : PsiType:String
-                UQualifiedReferenceExpression ["literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UQualifiedReferenceExpression ["literal" + case4.repeat(4)] : PsiType:String
                     UPolyadicExpression (operator = +) ["literal" + case4] : PsiType:String
                         ULiteralExpression (value = "literal") ["literal"] : PsiType:String
                         USimpleNameReferenceExpression (identifier = case4) [case4] : PsiType:String
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [repeat(4)] : PsiType:String
+                        UIdentifier (Identifier (repeat)) [UIdentifier (Identifier (repeat))]
+                        USimpleNameReferenceExpression (identifier = repeat, resolvesTo = null) [repeat] : PsiType:String
+                        ULiteralExpression (value = 4) [4] : PsiType:int
                 ULiteralExpression (value = " z") [" z"] : PsiType:String
         UField (name = empty) [@org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
@@ -53,12 +56,19 @@ UFile (package = ) [public final class StringTemplateComplexForUInjectionHostKt
                     USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = template1) [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UPolyadicExpression (operator = +) ["." + [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(baz)] : PsiType:Unit
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
+                    USimpleNameReferenceExpression (identifier = baz) [baz] : PsiType:NonExistentClass
+                UDeclarationsExpression [var template1: java.lang.String = simpleForTemplate()]
+                    ULocalVariable (name = template1) [var template1: java.lang.String = simpleForTemplate()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] : PsiType:String
+                            UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                            USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] : PsiType:String
+                UDeclarationsExpression [var template2: java.lang.String = "." + simpleForTemplate()]
+                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + simpleForTemplate()]
+                        UPolyadicExpression (operator = +) ["." + simpleForTemplate()] : PsiType:String
                             ULiteralExpression (value = ".") ["."] : PsiType:String
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] : PsiType:String
+                                UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateInClass.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateInClass.types.fir.txt
index fd7f0e4c49b..cc1b02c0cf4 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateInClass.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/StringTemplateInClass.types.fir.txt
@@ -1,9 +1,12 @@
 UFile (package = ) [public final class Demo {...]
     UClass (name = Demo) [public final class Demo {...}]
-        UField (name = foo) [@null private final var foo: error.NonExistentClass = X.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = foo) [@null private final var foo: error.NonExistentClass = X.<anonymous class>("lorem")]
             UAnnotation (fqName = null) [@null]
-            UQualifiedReferenceExpression [X.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:NonExistentClass
+            UQualifiedReferenceExpression [X.<anonymous class>("lorem")] : PsiType:NonExistentClass
                 USimpleNameReferenceExpression (identifier = X) [X] : PsiType:NonExistentClass
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [<anonymous class>("lorem")] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = "lorem") ["lorem"] : PsiType:String
         UMethod (name = Demo) [public fun Demo() = UastEmptyExpression]
         UMethod (name = getFoo) [public final fun getFoo() : error.NonExistentClass = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/SuperCalls.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/SuperCalls.types.fir.txt
index 98ea55b077f..f51af0819e7 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/SuperCalls.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/SuperCalls.types.fir.txt
@@ -7,7 +7,12 @@ UFile (package = ) [public final class SuperCallsKt {...]
                 UClass (name = null) [final class null : A {...}]
                     UMethod (name = bar) [public final fun bar() : void {...}]
                         UBlockExpression [{...}] : PsiType:Unit
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [cons(anonymous object : A("inner literal") { })] : PsiType:Unit
+                                UIdentifier (Identifier (cons)) [UIdentifier (Identifier (cons))]
+                                USimpleNameReferenceExpression (identifier = cons, resolvesTo = null) [cons] : PsiType:Unit
+                                UObjectLiteralExpression [anonymous object : A("inner literal") { }] : PsiType:A
+                                    ULiteralExpression (value = "inner literal") ["inner literal"] : PsiType:String
+                                    UClass (name = null) [final class null : A {...}]
                     UClass (name = InnerClass) [public final class InnerClass : A {...}]
                         UMethod (name = InnerClass) [public fun InnerClass() = UastEmptyExpression]
         UMethod (name = getAnon) [public static final fun getAnon() : A = UastEmptyExpression]
@@ -25,7 +30,14 @@ UFile (package = ) [public final class SuperCallsKt {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())]
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    UQualifiedReferenceExpression [i.toString()] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
         UMethod (name = foo) [public fun foo(@org.jetbrains.annotations.NotNull a: long) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: long]
@@ -36,26 +48,40 @@ UFile (package = ) [public final class SuperCallsKt {...]
             UParameter (name = param) [@org.jetbrains.annotations.NotNull var param: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(param)]
+                    UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    USimpleNameReferenceExpression (identifier = param) [param] : PsiType:String
     UClass (name = C) [public final class C : A {...}]
         UMethod (name = C) [public fun C(@org.jetbrains.annotations.NotNull p: java.lang.String) {...}]
             UParameter (name = p) [@org.jetbrains.annotations.NotNull var p: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(p)]
+                    UIdentifier (Identifier (super)) [UIdentifier (Identifier (super))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    USimpleNameReferenceExpression (identifier = p) [p] : PsiType:String
         UMethod (name = C) [public fun C(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i)]
+                    UIdentifier (Identifier (super)) [UIdentifier (Identifier (super))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    USimpleNameReferenceExpression (identifier = i) [i] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] : PsiType:Unit
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] : PsiType:Unit
         UMethod (name = foo) [public fun foo(@org.jetbrains.annotations.NotNull a: long) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: long]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                UQualifiedReferenceExpression [super.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UQualifiedReferenceExpression [super.foo(a)] : PsiType:Unit
                     USuperExpression (label = null) [super] : PsiType:A
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [foo(a)] : PsiType:Unit
+                        UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Unit
+                        USimpleNameReferenceExpression (identifier = a) [a] : PsiType:long
     UClass (name = O) [public final class O : A {...}]
         UField (name = INSTANCE) [@null public static final var INSTANCE: O]
             UAnnotation (fqName = null) [@null]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/Suspend.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/Suspend.types.fir.txt
index 1bf3caa6647..3e7f2e7943c 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/Suspend.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/Suspend.types.fir.txt
@@ -2,17 +2,25 @@ UFile (package = test.pkg) [package test.pkg...]
     UClass (name = SuspendKt) [public final class SuspendKt {...}]
         UMethod (name = top) [public static final fun top() : int {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:int
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>().inner()]
+                    UQualifiedReferenceExpression [<anonymous class>().inner()] : PsiType:int
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:Context
+                            UIdentifier (Identifier (Context)) [UIdentifier (Identifier (Context))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Context
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [inner()] : PsiType:int
+                            UIdentifier (Identifier (inner)) [UIdentifier (Identifier (inner))]
+                            USimpleNameReferenceExpression (identifier = inner, resolvesTo = null) [inner] : PsiType:int
     UClass (name = Context) [public final class Context {...}]
         UMethod (name = Context) [public fun Context() = UastEmptyExpression]
         UMethod (name = inner) [public final fun inner() : int {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return suspendPrivate()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [suspendPrivate()] : PsiType:int
+                        UIdentifier (Identifier (suspendPrivate)) [UIdentifier (Identifier (suspendPrivate))]
+                        USimpleNameReferenceExpression (identifier = suspendPrivate, resolvesTo = null) [suspendPrivate] : PsiType:int
         UMethod (name = suspendPrivate) [private final fun suspendPrivate() : int {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return inner()]
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [inner()] : PsiType:int
+                        UIdentifier (Identifier (inner)) [UIdentifier (Identifier (inner))]
+                        USimpleNameReferenceExpression (identifier = inner, resolvesTo = null) [inner] : PsiType:int
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/TryCatch.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/TryCatch.types.fir.txt
index e9cd4602003..8d2b3d000da 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/TryCatch.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/TryCatch.types.fir.txt
@@ -5,14 +5,20 @@ UFile (package = ) [public final class TryCatch {...]
             UBlockExpression [{...}] : PsiType:Unit
                 UTryExpression [try {...}] : PsiType:Unit
                     UBlockExpression [{...}] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [body()] : PsiType:Unit
+                            UIdentifier (Identifier (body)) [UIdentifier (Identifier (body))]
+                            USimpleNameReferenceExpression (identifier = body, resolvesTo = null) [body] : PsiType:Unit
                     UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull var e: java.lang.Throwable) {...}]
                         UParameter (name = e) [@org.jetbrains.annotations.NotNull var e: java.lang.Throwable]
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                         UBlockExpression [{...}] : PsiType:Unit
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [catcher()] : PsiType:Unit
+                                UIdentifier (Identifier (catcher)) [UIdentifier (Identifier (catcher))]
+                                USimpleNameReferenceExpression (identifier = catcher, resolvesTo = null) [catcher] : PsiType:Unit
                     UBlockExpression [{...}] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [finalizer()] : PsiType:Unit
+                            UIdentifier (Identifier (finalizer)) [UIdentifier (Identifier (finalizer))]
+                            USimpleNameReferenceExpression (identifier = finalizer, resolvesTo = null) [finalizer] : PsiType:Unit
         UMethod (name = body) [public final fun body() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
         UMethod (name = catcher) [public final fun catcher() : void {...}]
@@ -21,19 +27,30 @@ UFile (package = ) [public final class TryCatch {...]
             UBlockExpression [{...}] : PsiType:Unit
     UClass (name = TryCatchAnnotations) [public final class TryCatchAnnotations {...}]
         UMethod (name = TryCatchAnnotations) [public fun TryCatchAnnotations() = UastEmptyExpression]
-        UMethod (name = catches) [public final fun catches() : void {...}]
+        UMethod (name = catches) [@java.lang.SuppressWarnings(value = "Something")...}]
+            UAnnotation (fqName = java.lang.SuppressWarnings) [@java.lang.SuppressWarnings(value = "Something")]
+                UNamedExpression (name = value) [value = "Something"]
+                    ULiteralExpression (value = "Something") ["Something"] : PsiType:String
             UBlockExpression [{...}] : PsiType:Unit
                 UTryExpression [try {...}] : PsiType:Unit
                     UBlockExpression [{...}] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull @not-implemented-annotation var e: java.lang.Throwable) {...}]
-                        UParameter (name = e) [@org.jetbrains.annotations.NotNull @not-implemented-annotation var e: java.lang.Throwable]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [body()] : PsiType:Unit
+                            UIdentifier (Identifier (body)) [UIdentifier (Identifier (body))]
+                            USimpleNameReferenceExpression (identifier = body, resolvesTo = null) [body] : PsiType:Unit
+                    UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull @java.lang.SuppressWarnings(value = "Something") var e: java.lang.Throwable) {...}]
+                        UParameter (name = e) [@org.jetbrains.annotations.NotNull @java.lang.SuppressWarnings(value = "Something") var e: java.lang.Throwable]
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+                            UAnnotation (fqName = java.lang.SuppressWarnings) [@java.lang.SuppressWarnings(value = "Something")]
+                                UNamedExpression (name = value) [value = "Something"]
+                                    ULiteralExpression (value = "Something") ["Something"] : PsiType:String
                         UBlockExpression [{...}] : PsiType:Unit
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [catcher()] : PsiType:Unit
+                                UIdentifier (Identifier (catcher)) [UIdentifier (Identifier (catcher))]
+                                USimpleNameReferenceExpression (identifier = catcher, resolvesTo = null) [catcher] : PsiType:Unit
                     UBlockExpression [{...}] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [finalizer()] : PsiType:Unit
+                            UIdentifier (Identifier (finalizer)) [UIdentifier (Identifier (finalizer))]
+                            USimpleNameReferenceExpression (identifier = finalizer, resolvesTo = null) [finalizer] : PsiType:Unit
         UMethod (name = body) [public final fun body() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
         UMethod (name = catcher) [public final fun catcher() : void {...}]
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/TypeInAnnotation.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/TypeInAnnotation.types.fir.txt
index 439b2474881..155cd5dc7a7 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/TypeInAnnotation.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/TypeInAnnotation.types.fir.txt
@@ -1,5 +1,6 @@
 UFile (package = ) [public final class C {...]
     UClass (name = C) [public final class C {...}]
         UMethod (name = C) [public fun C() = UastEmptyExpression]
-        UMethod (name = foo) [public final fun foo() : void {...}]
+        UMethod (name = foo) [@null...}]
+            UAnnotation (fqName = null) [@null]
             UBlockExpression [{...}] : PsiType:Unit
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/TypeReferences.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/TypeReferences.types.fir.txt
index c9b987b649c..76c9d77bad0 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/TypeReferences.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/TypeReferences.types.fir.txt
@@ -36,18 +36,37 @@ UFile (package = ) [public final class TypeReferencesKt {...]
                                     ULiteralExpression (value = null) [null]
                                 USimpleNameReferenceExpression (identifier = var708e23eb) [var708e23eb]
                                 UReturnExpression [return] : PsiType:Void
-                UDeclarationsExpression [var tl: java.util.List<? extends T> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = tl) [var tl: java.util.List<? extends T> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var tsl: java.util.List<? extends java.lang.String> = tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = tsl) [var tsl: java.util.List<? extends java.lang.String> = tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UQualifiedReferenceExpression [tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:List<? extends String>
+                UDeclarationsExpression [var tl: java.util.List<? extends T> = listOf(at)]
+                    ULocalVariable (name = tl) [var tl: java.util.List<? extends T> = listOf(at)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf(at)] : PsiType:List<? extends T>
+                            UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends T>
+                            USimpleNameReferenceExpression (identifier = at) [at] : PsiType:T
+                UDeclarationsExpression [var tsl: java.util.List<? extends java.lang.String> = tl.map({ var it: <ErrorType> ->...})]
+                    ULocalVariable (name = tsl) [var tsl: java.util.List<? extends java.lang.String> = tl.map({ var it: <ErrorType> ->...})]
+                        UQualifiedReferenceExpression [tl.map({ var it: <ErrorType> ->...})] : PsiType:List<? extends String>
                             USimpleNameReferenceExpression (identifier = tl) [tl] : PsiType:List<? extends T>
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [map({ var it: <ErrorType> ->...})] : PsiType:List<? extends String>
+                                UIdentifier (Identifier (map)) [UIdentifier (Identifier (map))]
+                                USimpleNameReferenceExpression (identifier = map, resolvesTo = null) [map] : PsiType:List<? extends String>
+                                ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super T, ? extends String>
+                                    UParameter (name = it) [var it: <ErrorType>]
+                                    UBlockExpression [{...}] : PsiType:String
+                                        UReturnExpression [return it.toString()]
+                                            UQualifiedReferenceExpression [it.toString()] : PsiType:String
+                                                USimpleNameReferenceExpression (identifier = it) [it] : PsiType:T
+                                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                                                    UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
                 UDeclarationsExpression [var lls: java.util.List<? extends java.util.List<? extends java.lang.String>>]
                     ULocalVariable (name = lls) [var lls: java.util.List<? extends java.util.List<? extends java.lang.String>>]
                 UDeclarationsExpression [var llsAliased: java.util.List]
                     ULocalVariable (name = llsAliased) [var llsAliased: java.util.List]
                 UDeclarationsExpression [var llt: java.util.List<? extends java.util.List<? extends T>>]
                     ULocalVariable (name = llt) [var llt: java.util.List<? extends java.util.List<? extends T>>]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [parameterizedFoo(emptyList())] : PsiType:Unit
+                    UIdentifier (Identifier (parameterizedFoo)) [UIdentifier (Identifier (parameterizedFoo))]
+                    USimpleNameReferenceExpression (identifier = parameterizedFoo, resolvesTo = null) [parameterizedFoo] : PsiType:Unit
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [emptyList()] : PsiType:List<? extends String>
+                        UIdentifier (Identifier (emptyList)) [UIdentifier (Identifier (emptyList))]
+                        USimpleNameReferenceExpression (identifier = emptyList, resolvesTo = null) [emptyList] : PsiType:List<? extends String>
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/UnexpectedContainerException.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/UnexpectedContainerException.types.fir.txt
index afffb50fe3c..43e734f69bb 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/UnexpectedContainerException.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/UnexpectedContainerException.types.fir.txt
@@ -11,5 +11,7 @@ UFile (package = ) [public abstract interface Callback {...]
             UParameter (name = factory) [@org.jetbrains.annotations.NotNull var factory: kotlin.jvm.functions.Function0<? extends T>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Void
-                UThrowExpression [throw [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Void
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UThrowExpression [throw <anonymous class>()] : PsiType:Void
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] : PsiType:UnsupportedOperationException
+                        UIdentifier (Identifier (UnsupportedOperationException)) [UIdentifier (Identifier (UnsupportedOperationException))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:UnsupportedOperationException
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/WhenAndDestructing.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/WhenAndDestructing.types.fir.txt
index 7d36f5ee385..710e55086ff 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/WhenAndDestructing.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/WhenAndDestructing.types.fir.txt
@@ -4,9 +4,13 @@ UFile (package = ) [public final class WhenAndDestructingKt {...]
             UParameter (name = string) [@org.jetbrains.annotations.NotNull var string: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] : PsiType:Unit
-                UDeclarationsExpression [var arr: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = arr) [var arr: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var arr: java.util.List<? extends java.lang.String> = listOf("1", "2")]
+                    ULocalVariable (name = arr) [var arr: java.util.List<? extends java.lang.String> = listOf("1", "2")]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [listOf("1", "2")] : PsiType:List<? extends String>
+                            UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] : PsiType:List<? extends String>
+                            ULiteralExpression (value = "1") ["1"] : PsiType:String
+                            ULiteralExpression (value = "2") ["2"] : PsiType:String
                 USwitchExpression [switch (string)  {...] : PsiType:Unit
                     USimpleNameReferenceExpression (identifier = string) [string] : PsiType:String
                     UExpressionList (when) [    "aaaa" -> {...    ] : PsiType:Unit
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.fir.txt
deleted file mode 100644
index 9faa1df702a..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.fir.txt
+++ /dev/null
@@ -1,31 +0,0 @@
-UFile (package = ) [public final class WhenStringLiteralKt {...]
-    UClass (name = WhenStringLiteralKt) [public final class WhenStringLiteralKt {...}]
-        UField (name = a) [@org.jetbrains.annotations.Nullable private static final var a: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-            UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-        UField (name = b) [@org.jetbrains.annotations.NotNull private static final var b: int = switch (a)  {...]
-            UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            USwitchExpression [switch (a)  {...] : PsiType:int
-                USimpleNameReferenceExpression (identifier = a) [a] : PsiType:String
-                UExpressionList (when) [    "abc" -> {...    ] : PsiType:int
-                    USwitchClauseExpressionWithBody ["abc" -> {...]
-                        ULiteralExpression (value = "abc") ["abc"] : PsiType:String
-                        UExpressionList (when_entry) [{...]
-                            UYieldExpression [yield 1]
-                                ULiteralExpression (value = 1) [1] : PsiType:int
-                    USwitchClauseExpressionWithBody ["def", "ghi" -> {...]
-                        ULiteralExpression (value = "def") ["def"] : PsiType:String
-                        ULiteralExpression (value = "ghi") ["ghi"] : PsiType:String
-                        UExpressionList (when_entry) [{...]
-                            UYieldExpression [yield 2]
-                                ULiteralExpression (value = 2) [2] : PsiType:int
-                    USwitchClauseExpressionWithBody [ -> {...]
-                        UExpressionList (when_entry) [{...]
-                            UYieldExpression [yield 3]
-                                ULiteralExpression (value = 3) [3] : PsiType:int
-        UMethod (name = getA) [public static final fun getA() : java.lang.String = UastEmptyExpression]
-        UMethod (name = getB) [public static final fun getB() : int = UastEmptyExpression]
-        UMethod (name = <no name provided>) [public static final fun <no name provided>() : void {...}]
-            UBlockExpression [{...}] : PsiType:String
-                ULiteralExpression (value = "abc1") ["abc1"] : PsiType:String
-                ULiteralExpression (value = "def1") ["def1"] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.fe10.txt b/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.txt
index 0f01e2392b4..4f957c951ea 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/WhenStringLiteral.types.txt
@@ -30,4 +30,4 @@ UFile (package = ) [public final class WhenStringLiteralKt {...]
         UMethod (name = <no name provided>) [public static final fun <no name provided>() : void {...}]
             UBlockExpression [{...}] : PsiType:String
                 ULiteralExpression (value = "abc1") ["abc1"] : PsiType:String
-                ULiteralExpression (value = "def1") ["def1"] : PsiType:String
+                ULiteralExpression (value = "def1") ["def1"] : PsiType:String
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyTypes/ea101715.types.fir.txt b/uast/uast-kotlin-fir/testData/legacyTypes/ea101715.types.fir.txt
index 0f2c1cc520b..d0d30a1ed56 100644
--- a/uast/uast-kotlin-fir/testData/legacyTypes/ea101715.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyTypes/ea101715.types.fir.txt
@@ -2,9 +2,12 @@ UFile (package = ) [public final class Ea101715Kt {...]
     UClass (name = Ea101715Kt) [public final class Ea101715Kt {...}]
         UMethod (name = a) [public static final fun a() : void {...}]
             UBlockExpression [{...}] : PsiType:Unit
-                UDeclarationsExpression [var a: Obj = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = a) [var a: Obj = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var a: Obj = <anonymous class>(555)]
+                    ULocalVariable (name = a) [var a: Obj = <anonymous class>(555)]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(555)] : PsiType:Obj
+                            UIdentifier (Identifier (Obj)) [UIdentifier (Identifier (Obj))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Obj
+                            ULiteralExpression (value = 555) [555] : PsiType:int
     UClass (name = Obj) [public final class Obj {...}]
         UField (name = INSTANCE) [@null public static final var INSTANCE: Obj]
             UAnnotation (fqName = null) [@null]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/AnnotatedExpressions.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/AnnotatedExpressions.values.fir.txt
index 123b88caf1a..ad257cfb2c9 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/AnnotatedExpressions.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/AnnotatedExpressions.values.fir.txt
@@ -2,23 +2,36 @@ UFile (package = ) [public final class AnnotatedExpressionsKt {...]
     UClass (name = AnnotatedExpressionsKt) [public final class AnnotatedExpressionsKt {...}]
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [@not-implemented-annotation var a: int = 1] = Undetermined
-                    ULocalVariable (name = a) [@not-implemented-annotation var a: int = 1]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] = external foo()()
+                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
+                    UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                    USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo()()
+                UDeclarationsExpression [@kotlin.Suppress var a: int = 1] = Undetermined
+                    ULocalVariable (name = a) [@kotlin.Suppress var a: int = 1]
+                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                         ULiteralExpression (value = 1) [1] = (long)1
-                UDeclarationsExpression [@not-implemented-annotation var b: int = 2] = Undetermined
-                    ULocalVariable (name = b) [@not-implemented-annotation var b: int = 2]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+                UDeclarationsExpression [@kotlin.Suppress var b: int = 2] = Undetermined
+                    ULocalVariable (name = b) [@kotlin.Suppress var b: int = 2]
+                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                         ULiteralExpression (value = 2) [2] = (long)2
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)] = Undetermined
+                UBinaryExpression (operator = =) [b = a] = Undetermined
+                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
+                    USimpleNameReferenceExpression (identifier = b) [b] = (var b = (long)2)
+                    USimpleNameReferenceExpression (identifier = a) [a] = (var a = (long)1)
+                UIfExpression [if (a > 2) a else b] = (var b = (long)2)
+                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
+                    UBinaryExpression (operator = >) [a > 2] = false (depending on: (var a = (long)1))
+                        USimpleNameReferenceExpression (identifier = a) [a] = (var a = (long)1)
+                        ULiteralExpression (value = 2) [2] = (long)2
+                    USimpleNameReferenceExpression (identifier = a) [a] = (var a = (long)1)
+                    USimpleNameReferenceExpression (identifier = b) [b] = (var b = (long)2)
                 UDeclarationsExpression [var c: int = elvis {...}] = Undetermined
                     ULocalVariable (name = c) [var c: int = elvis {...}]
                         UExpressionList (elvis) [elvis {...}] = Undetermined
-                            UDeclarationsExpression [var varae507364: int = [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)] = Undetermined
-                                ULocalVariable (name = varae507364) [var varae507364: int = [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)]
-                                    [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)] = Undetermined
+                            UDeclarationsExpression [var varae507364: int = a] = Undetermined
+                                ULocalVariable (name = varae507364) [var varae507364: int = a]
+                                    USimpleNameReferenceExpression (identifier = a) [a] = Undetermined
+                                        UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress]
                             UIfExpression [if (varae507364 != null) varae507364 else b] = Undetermined
                                 UBinaryExpression (operator = !=) [varae507364 != null] = Undetermined
                                     USimpleNameReferenceExpression (identifier = varae507364) [varae507364] = Undetermined
@@ -31,17 +44,26 @@ UFile (package = ) [public final class AnnotatedExpressionsKt {...]
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return switch  {...] = Nothing
                     USwitchExpression [switch  {...] = null
-                        UExpressionList (when) [    [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) -> {...    ] = null
-                            USwitchClauseExpressionWithBody [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) -> {...] = Undetermined
-                                [!] UnknownKotlinExpression (ANNOTATED_EXPRESSION) [[!] UnknownKotlinExpression (ANNOTATED_EXPRESSION)] = Undetermined
+                        UExpressionList (when) [    str.isBlank() -> {...    ] = null
+                            USwitchClauseExpressionWithBody [str.isBlank() -> {...] = Undetermined
+                                UQualifiedReferenceExpression [str.isBlank()] = external isBlank()()
+                                    UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress(names = "DEPRECATION")]
+                                        UNamedExpression (name = names) [names = "DEPRECATION"] = Nothing
+                                            ULiteralExpression (value = "DEPRECATION") ["DEPRECATION"] = "DEPRECATION"
+                                    USimpleNameReferenceExpression (identifier = str) [str] = Undetermined
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isBlank()] = external isBlank()()
+                                        UIdentifier (Identifier (isBlank)) [UIdentifier (Identifier (isBlank))]
+                                        USimpleNameReferenceExpression (identifier = isBlank, resolvesTo = null) [isBlank] = external isBlank()()
                                 UExpressionList (when_entry) [{...] = Undetermined
                                     UYieldExpression [yield null] = UYieldResult(null)
                                         ULiteralExpression (value = null) [null] = null
-                            USwitchClauseExpressionWithBody [str.[!] UnknownKotlinExpression (CALL_EXPRESSION) != null -> {...] = Undetermined
-                                UBinaryExpression (operator = !=) [str.[!] UnknownKotlinExpression (CALL_EXPRESSION) != null] = Undetermined
-                                    UQualifiedReferenceExpression [str.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            USwitchClauseExpressionWithBody [str.isNotEmpty() != null -> {...] = Undetermined
+                                UBinaryExpression (operator = !=) [str.isNotEmpty() != null] = Undetermined
+                                    UQualifiedReferenceExpression [str.isNotEmpty()] = external isNotEmpty()()
                                         USimpleNameReferenceExpression (identifier = str) [str] = Undetermined
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isNotEmpty()] = external isNotEmpty()()
+                                            UIdentifier (Identifier (isNotEmpty)) [UIdentifier (Identifier (isNotEmpty))]
+                                            USimpleNameReferenceExpression (identifier = isNotEmpty, resolvesTo = null) [isNotEmpty] = external isNotEmpty()()
                                     ULiteralExpression (value = null) [null] = null
                                 UExpressionList (when_entry) [{...] = Undetermined
                                     UYieldExpression [yield null] = UYieldResult(null)
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/AnnotationComplex.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/AnnotationComplex.values.fir.txt
index 216fcd5c82f..02764b6366b 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/AnnotationComplex.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/AnnotationComplex.values.fir.txt
@@ -2,21 +2,48 @@ UFile (package = ) [public abstract annotation Annotation {...]
     UClass (name = Annotation) [public abstract annotation Annotation {...}]
         UAnnotationMethod (name = strings) [public abstract fun strings() : java.lang.String[] = UastEmptyExpression]
     UClass (name = A) [public final class A {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = Annotation) [@Annotation]
         UMethod (name = A) [public fun A() = UastEmptyExpression]
     UClass (name = AnnotationInner) [public abstract annotation AnnotationInner {...}]
         UAnnotationMethod (name = value) [public abstract fun value() : Annotation = UastEmptyExpression]
     UClass (name = B1) [public final class B1 {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>())]
+            UNamedExpression (name = value) [value = <anonymous class>()] = Undetermined
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = Undetermined
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = Undetermined
         UMethod (name = B1) [public fun B1() = UastEmptyExpression]
     UClass (name = B2) [public final class B2 {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>("sv1", "sv2"))]
+            UNamedExpression (name = value) [value = <anonymous class>("sv1", "sv2")] = Undetermined
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>("sv1", "sv2")] = Undetermined
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = Undetermined
+                    ULiteralExpression (value = "sv1") ["sv1"] = Undetermined
+                    ULiteralExpression (value = "sv2") ["sv2"] = Undetermined
         UMethod (name = B2) [public fun B2() = UastEmptyExpression]
     UClass (name = AnnotationArray) [public abstract annotation AnnotationArray {...}]
         UAnnotationMethod (name = value) [public abstract fun value() : Annotation[] = UastEmptyExpression]
     UClass (name = C) [public final class C {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>(arrayOf("sar1", "sar2")))]
+            UNamedExpression (name = value) [value = <anonymous class>(arrayOf("sar1", "sar2"))] = Undetermined
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(arrayOf("sar1", "sar2"))] = Undetermined
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [arrayOf("sar1", "sar2")] = Undetermined
+                        UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                        USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] = Undetermined
+                        ULiteralExpression (value = "sar1") ["sar1"] = Undetermined
+                        ULiteralExpression (value = "sar2") ["sar2"] = Undetermined
         UMethod (name = C) [public fun C() = UastEmptyExpression]
     UClass (name = C2) [public final class C2 {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UAnnotation (fqName = AnnotationArray) [@AnnotationArray(value = <anonymous class>(collectionLiteral["[sar]1", "[sar]2"]))]
+            UNamedExpression (name = value) [value = <anonymous class>(collectionLiteral["[sar]1", "[sar]2"])] = Undetermined
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(collectionLiteral["[sar]1", "[sar]2"])] = Undetermined
+                    UIdentifier (Identifier (Annotation)) [UIdentifier (Identifier (Annotation))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 2)) [collectionLiteral["[sar]1", "[sar]2"]] = Undetermined
+                        UIdentifier (Identifier ([)) [UIdentifier (Identifier ([))]
+                        ULiteralExpression (value = "[sar]1") ["[sar]1"] = Undetermined
+                        ULiteralExpression (value = "[sar]2") ["[sar]2"] = Undetermined
         UMethod (name = C2) [public fun C2() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/AnnotationParameters.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/AnnotationParameters.values.fir.txt
index e60921e50cc..625b4cbd8da 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/AnnotationParameters.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/AnnotationParameters.values.fir.txt
@@ -1,18 +1,61 @@
 UFile (package = ) [public final class AnnotationParametersKt {...]
     UClass (name = AnnotationParametersKt) [public final class AnnotationParametersKt {...}]
-        UMethod (name = foo) [public static final fun foo() : int {...}]
+        UMethod (name = foo) [@RequiresPermission(anyOf = <anonymous class>(1, 2, 3))...}]
+            UAnnotation (fqName = RequiresPermission) [@RequiresPermission(anyOf = <anonymous class>(1, 2, 3))]
+                UNamedExpression (name = anyOf) [anyOf = <anonymous class>(1, 2, 3)] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [<anonymous class>(1, 2, 3)] = external <anonymous class>(1, 2, 3)((long)1, (long)2, (long)3)
+                        UIdentifier (Identifier (intArrayOf)) [UIdentifier (Identifier (intArrayOf))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(1, 2, 3)((long)1, (long)2, (long)3)
+                        ULiteralExpression (value = 1) [1] = (long)1
+                        ULiteralExpression (value = 2) [2] = (long)2
+                        ULiteralExpression (value = 3) [3] = (long)3
+            UAnnotation (fqName = IntRange) [@IntRange(from = 10, to = 0)]
+                UNamedExpression (name = from) [from = 10] = Nothing
+                    ULiteralExpression (value = 10) [10] = (long)10
+                UNamedExpression (name = to) [to = 0] = Nothing
+                    ULiteralExpression (value = 0) [0] = (long)0
+            UAnnotation (fqName = WithDefaultValue) [@WithDefaultValue]
+            UAnnotation (fqName = SuppressLint) [@SuppressLint(value = "Lorem")]
+                UNamedExpression (name = value) [value = "Lorem"] = Nothing
+                    ULiteralExpression (value = "Lorem") ["Lorem"] = "Lorem"
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return 5] = Nothing
                     ULiteralExpression (value = 5) [5] = (long)5
-        UMethod (name = bar) [public static final fun bar() : void {...}]
+        UMethod (name = bar) [@IntRange(from = 0, to = 100)...}]
+            UAnnotation (fqName = IntRange) [@IntRange(from = 0, to = 100)]
+                UNamedExpression (name = from) [from = 0] = Nothing
+                    ULiteralExpression (value = 0) [0] = (long)0
+                UNamedExpression (name = to) [to = 100] = Nothing
+                    ULiteralExpression (value = 100) [100] = (long)100
+            UAnnotation (fqName = SuppressLint) [@SuppressLint(value = "Lorem", value = "Ipsum", value = "Dolor")]
+                UNamedExpression (name = value) [value = "Lorem"] = Nothing
+                    ULiteralExpression (value = "Lorem") ["Lorem"] = "Lorem"
+                UNamedExpression (name = value) [value = "Ipsum"] = Nothing
+                    ULiteralExpression (value = "Ipsum") ["Ipsum"] = "Ipsum"
+                UNamedExpression (name = value) [value = "Dolor"] = Nothing
+                    ULiteralExpression (value = "Dolor") ["Dolor"] = "Dolor"
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return Unit] = Nothing
                     USimpleNameReferenceExpression (identifier = Unit) [Unit] = external Unit()
-        UMethod (name = fooWithArrLiteral) [public static final fun fooWithArrLiteral() : int {...}]
+        UMethod (name = fooWithArrLiteral) [@RequiresPermission(anyOf = collectionLiteral[1, 2, 3])...}]
+            UAnnotation (fqName = RequiresPermission) [@RequiresPermission(anyOf = collectionLiteral[1, 2, 3])]
+                UNamedExpression (name = anyOf) [anyOf = collectionLiteral[1, 2, 3]] = Nothing
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3)) [collectionLiteral[1, 2, 3]] = external collectionLiteral[1, 2, 3]((long)1, (long)2, (long)3)
+                        UIdentifier (Identifier ([)) [UIdentifier (Identifier ([))]
+                        ULiteralExpression (value = 1) [1] = (long)1
+                        ULiteralExpression (value = 2) [2] = (long)2
+                        ULiteralExpression (value = 3) [3] = (long)3
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return 5] = Nothing
                     ULiteralExpression (value = 5) [5] = (long)5
-        UMethod (name = fooWithStrArrLiteral) [public static final fun fooWithStrArrLiteral() : int {...}]
+        UMethod (name = fooWithStrArrLiteral) [@RequiresStrPermission(strs = collectionLiteral["a", "b", "c"])...}]
+            UAnnotation (fqName = RequiresStrPermission) [@RequiresStrPermission(strs = collectionLiteral["a", "b", "c"])]
+                UNamedExpression (name = strs) [strs = collectionLiteral["a", "b", "c"]] = Nothing
+                    UCallExpression (kind = UastCallKind(name='array_initializer'), argCount = 3)) [collectionLiteral["a", "b", "c"]] = external collectionLiteral["a", "b", "c"]("a", "b", "c")
+                        UIdentifier (Identifier ([)) [UIdentifier (Identifier ([))]
+                        ULiteralExpression (value = "a") ["a"] = "a"
+                        ULiteralExpression (value = "b") ["b"] = "b"
+                        ULiteralExpression (value = "c") ["c"] = "c"
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return 3] = Nothing
                     ULiteralExpression (value = 3) [3] = (long)3
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Anonymous.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Anonymous.values.fir.txt
index 91fa11abb19..e950a7c2f1a 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Anonymous.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Anonymous.values.fir.txt
@@ -10,15 +10,32 @@ UFile (package = ) [import java.io.Closeable...]
                             UClass (name = null) [final class null : java.lang.Runnable {...}]
                                 UMethod (name = run) [public fun run() : void {...}]
                                     UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [runnable.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression [runnable.run()] = external run()()
                     USimpleNameReferenceExpression (identifier = runnable) [runnable] = (var runnable = Undetermined)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var runnable2: java.lang.Runnable = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = runnable2) [var runnable2: java.lang.Runnable = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [runnable2.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    USimpleNameReferenceExpression (identifier = runnable2) [runnable2] = (var runnable2 = Undetermined)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [run()] = external run()()
+                        UIdentifier (Identifier (run)) [UIdentifier (Identifier (run))]
+                        USimpleNameReferenceExpression (identifier = run, resolvesTo = null) [run] = external run()()
+                UDeclarationsExpression [var runnable2: java.lang.Runnable = Runnable({ ...})] = Undetermined
+                    ULocalVariable (name = runnable2) [var runnable2: java.lang.Runnable = Runnable({ ...})]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Runnable({ ...})] = external Runnable({
+    println()
+})(Undetermined)
+                            UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
+                            USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null) [Runnable] = external Runnable({
+    println()
+})(Undetermined)
+                            ULambdaExpression [{ ...}] = Undetermined
+                                UBlockExpression [{...}] = external println()()
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] = external println()()
+                                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println()()
+                UQualifiedReferenceExpression [runnable2.run()] = external run()()
+                    USimpleNameReferenceExpression (identifier = runnable2) [runnable2] = (var runnable2 = external Runnable({
+    println()
+})(Undetermined))
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [run()] = external run()()
+                        UIdentifier (Identifier (run)) [UIdentifier (Identifier (run))]
+                        USimpleNameReferenceExpression (identifier = run, resolvesTo = null) [run] = external run()()
                 UDeclarationsExpression [var closeableRunnable: java.lang.Object = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }] = Undetermined
                     ULocalVariable (name = closeableRunnable) [var closeableRunnable: java.lang.Object = anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }]
                         UObjectLiteralExpression [anonymous object : Runnable, Closeable { override fun close() {} override fun run() {} }] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/BrokenMethod.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/BrokenMethod.values.fir.txt
index e7cfb1c9b1e..c89536ff1c8 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/BrokenMethod.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/BrokenMethod.values.fir.txt
@@ -35,5 +35,8 @@ UFile (package = ) [public final class BrokenMethodKt {...]
                                     UParameter (name = $this$doStuff1) [@org.jetbrains.annotations.NotNull var $this$doStuff1: java.lang.Object]
                                         UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
                                     UBlockExpression [{...}] = Nothing
-                                        UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                        UReturnExpression [return <anonymous class>(this)] = Nothing
+                                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(this)] = external <anonymous class>(this)(Undetermined)
+                                                UIdentifier (Identifier (Used)) [UIdentifier (Identifier (Used))]
+                                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(this)(Undetermined)
+                                                UThisExpression (label = null) [this] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.fir.txt
deleted file mode 100644
index 76042018986..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.fir.txt
+++ /dev/null
@@ -1,22 +0,0 @@
-UFile (package = ) [public final class A {...]
-    UClass (name = A) [public final class A {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UMethod (name = A) [public fun A() = UastEmptyExpression]
-    UClass (name = MyAnnotation) [public abstract annotation MyAnnotation {...}]
-        UAnnotationMethod (name = text) [public abstract fun text() : java.lang.String = UastEmptyExpression]
-    UClass (name = B) [public final class B {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UField (name = Companion) [@null public static final var Companion: B.Companion]
-            UAnnotation (fqName = null) [@null]
-        UMethod (name = B) [public fun B() = UastEmptyExpression]
-        UClass (name = InB) [public static final class InB {...}]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-            UMethod (name = InB) [public fun InB() = UastEmptyExpression]
-        UClass (name = Companion) [public static final class Companion {...}]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-            UMethod (name = Companion) [private fun Companion() = UastEmptyExpression]
-    UClass (name = Obj) [public final class Obj {...}]
-        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UField (name = INSTANCE) [@null public static final var INSTANCE: Obj]
-            UAnnotation (fqName = null) [@null]
-        UMethod (name = Obj) [private fun Obj() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.fe10.txt b/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.txt
similarity index 99%
rename from uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.txt
index 0d20a40a0c8..c2aa0299a5c 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ClassAnnotation.values.txt
@@ -27,4 +27,4 @@ UFile (package = ) [public final class A {...]
                 ULiteralExpression (value = "object") ["object"] = Undetermined
         UField (name = INSTANCE) [@null public static final var INSTANCE: Obj]
             UAnnotation (fqName = null) [@null]
-        UMethod (name = Obj) [private fun Obj() = UastEmptyExpression]
+        UMethod (name = Obj) [private fun Obj() = UastEmptyExpression]
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/CommentOwners.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/CommentOwners.values.fir.txt
index 8d91e6779f7..0b93ec995a5 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/CommentOwners.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/CommentOwners.values.fir.txt
@@ -6,26 +6,38 @@ UFile (package = ) [public final class CommentOwnersKt {...]
         UMethod (name = getTopLevelProperty) [public static final fun getTopLevelProperty() : int = UastEmptyExpression]
         UMethod (name = topLevelFun) [public static final fun topLevelFun() : void {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return TODO()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] = external TODO()()
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] = external TODO()()
         UMethod (name = funPlainCall) [public static final fun funPlainCall(@org.jetbrains.annotations.NotNull a: int) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return TODO()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] = external TODO()()
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] = external TODO()()
         UMethod (name = funNamedArgumentsCall) [public static final fun funNamedArgumentsCall(@org.jetbrains.annotations.NotNull a: int) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return TODO()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] = external TODO()()
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] = external TODO()()
         UMethod (name = func) [public static final fun func(@org.jetbrains.annotations.NotNull a: int) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [funPlainCall(42)] = external funPlainCall(42)((long)42)
+                    UIdentifier (Identifier (funPlainCall)) [UIdentifier (Identifier (funPlainCall))]
+                    USimpleNameReferenceExpression (identifier = funPlainCall, resolvesTo = null) [funPlainCall] = external funPlainCall(42)((long)42)
+                    ULiteralExpression (value = 42) [42] = (long)42
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [funNamedArgumentsCall(42)] = external funNamedArgumentsCall(42)((long)42)
+                    UIdentifier (Identifier (funNamedArgumentsCall)) [UIdentifier (Identifier (funNamedArgumentsCall))]
+                    USimpleNameReferenceExpression (identifier = funNamedArgumentsCall, resolvesTo = null) [funNamedArgumentsCall] = external funNamedArgumentsCall(42)((long)42)
+                    ULiteralExpression (value = 42) [42] = (long)42
                 UWhileExpression [while (true) {...}] = Undetermined
                     ULiteralExpression (value = true) [true] = true
                     UBlockExpression [{...}] = Nothing(break)
@@ -44,18 +56,24 @@ UFile (package = ) [public final class CommentOwnersKt {...]
         UMethod (name = TopLevelClass) [public fun TopLevelClass(@org.jetbrains.annotations.NotNull t: int) {...}]
             UParameter (name = t) [@org.jetbrains.annotations.NotNull var t: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
         UMethod (name = getClassLevelProperty) [public final fun getClassLevelProperty() : int = UastEmptyExpression]
         UMethod (name = classLevelMethod) [public final fun classLevelMethod() : void {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return TODO()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] = external TODO()()
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] = external TODO()()
         UClass (name = NestedClass) [public static final class NestedClass {...}]
             UMethod (name = NestedClass) [public fun NestedClass() = UastEmptyExpression]
     UClass (name = MyBooleanEnum) [public final enum MyBooleanEnum {...}]
-        UField (name = TRUE) [@null public static final var TRUE: MyBooleanEnum]
+        UEnumConstant (name = TRUE) [@null TRUE] = Undetermined
             UAnnotation (fqName = null) [@null]
-        UField (name = FALSE) [@null public static final var FALSE: MyBooleanEnum]
+            USimpleNameReferenceExpression (identifier = MyBooleanEnum) [MyBooleanEnum] = external MyBooleanEnum()
+        UEnumConstant (name = FALSE) [@null FALSE] = Undetermined
             UAnnotation (fqName = null) [@null]
+            USimpleNameReferenceExpression (identifier = MyBooleanEnum) [MyBooleanEnum] = external MyBooleanEnum()
         UMethod (name = MyBooleanEnum) [private fun MyBooleanEnum() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Comments.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Comments.values.fir.txt
index 797f84851e9..5e9e3a32bb1 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Comments.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Comments.values.fir.txt
@@ -16,12 +16,15 @@ UFile (package = ) [public abstract interface Pizza {...]
         UMethod (name = getSize) [public fun getSize() : int = UastEmptyExpression]
         UMethod (name = getName) [public fun getName() : java.lang.String {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    UQualifiedReferenceExpression [java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return java.lang.<anonymous class>("Margherita")] = Nothing
+                    UQualifiedReferenceExpression [java.lang.<anonymous class>("Margherita")] = external <anonymous class>("Margherita")("Margherita")
                         UQualifiedReferenceExpression [java.lang] = external lang()
                             USimpleNameReferenceExpression (identifier = java) [java] = external java()
                             USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>("Margherita")] = external <anonymous class>("Margherita")("Margherita")
+                            UIdentifier (Identifier (String)) [UIdentifier (Identifier (String))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>("Margherita")("Margherita")
+                            ULiteralExpression (value = "Margherita") ["Margherita"] = "Margherita"
         UMethod (name = contains) [public fun contains(@org.jetbrains.annotations.NotNull ingredient: Pizza.Ingredient) : boolean {...}]
             UParameter (name = ingredient) [@org.jetbrains.annotations.NotNull var ingredient: Pizza.Ingredient]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ConstructorDelegate.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ConstructorDelegate.values.fir.txt
index 32f674605f2..11c34d5691d 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ConstructorDelegate.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ConstructorDelegate.values.fir.txt
@@ -4,8 +4,11 @@ UFile (package = ) [public final class ConstructorDelegateKt {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return <anonymous class>(i)] = Nothing
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i)] = external <anonymous class>(i)(Undetermined)
+                        UIdentifier (Identifier (BaseImpl)) [UIdentifier (Identifier (BaseImpl))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(i)(Undetermined)
+                        USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
     UClass (name = Base) [public abstract interface Base {...}]
         UMethod (name = print) [public abstract fun print() : void = UastEmptyExpression]
     UClass (name = BaseImpl) [public final class BaseImpl : Base {...}]
@@ -16,12 +19,18 @@ UFile (package = ) [public final class ConstructorDelegateKt {...]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
         UMethod (name = getX) [public final fun getX() : int = UastEmptyExpression]
         UMethod (name = print) [public fun print() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external print(x)(Undetermined)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [print(x)] = external print(x)(Undetermined)
+                    UIdentifier (Identifier (print)) [UIdentifier (Identifier (print))]
+                    USimpleNameReferenceExpression (identifier = print, resolvesTo = null) [print] = external print(x)(Undetermined)
+                    USimpleNameReferenceExpression (identifier = x) [x] = Undetermined
     UClass (name = Derived) [public final class Derived : Base, java.lang.CharSequence {...}]
-        UExpressionList (super_delegation) [super_delegation Base : [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+        UExpressionList (super_delegation) [super_delegation Base : createBase(10)] = Undetermined
             UTypeReferenceExpression (name = Base) [Base] = Undetermined
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [createBase(10)] = Undetermined
+                UIdentifier (Identifier (createBase)) [UIdentifier (Identifier (createBase))]
+                USimpleNameReferenceExpression (identifier = createBase, resolvesTo = null) [createBase] = Undetermined
+                ULiteralExpression (value = 10) [10] = Undetermined
         UExpressionList (super_delegation) [super_delegation java.lang.CharSequence : "abc"] = Undetermined
             UTypeReferenceExpression (name = java.lang.CharSequence) [java.lang.CharSequence] = Undetermined
             ULiteralExpression (value = "abc") ["abc"] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Constructors.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Constructors.values.fir.txt
index 08437b8369f..493b4dcc44c 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Constructors.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Constructors.values.fir.txt
@@ -8,8 +8,15 @@ UFile (package = ) [public final class A {...]
         UMethod (name = A) [public fun A(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(i.toString())(external toString()())
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())] = external <anonymous class>(i.toString())(external toString()())
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(i.toString())(external toString()())
+                    UQualifiedReferenceExpression [i.toString()] = external toString()()
+                        USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
     UClass (name = AWithInit) [public final class AWithInit {...}]
         UField (name = str) [@org.jetbrains.annotations.NotNull private final var str: java.lang.String]
@@ -17,14 +24,23 @@ UFile (package = ) [public final class A {...]
         UMethod (name = AWithInit) [public fun AWithInit(@org.jetbrains.annotations.NotNull str: java.lang.String) {...}]
             UParameter (name = str) [@org.jetbrains.annotations.NotNull var str: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UBlockExpression [{...}] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external println()()
+                UBlockExpression [{...}] = external println()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] = external println()()
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println()()
         UMethod (name = AWithInit) [public fun AWithInit(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(i.toString())(external toString()())
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())] = external <anonymous class>(i.toString())(external toString()())
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(i.toString())(external toString()())
+                    UQualifiedReferenceExpression [i.toString()] = external toString()()
+                        USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
     UClass (name = AWith2Init) [public final class AWith2Init {...}]
         UField (name = str) [@org.jetbrains.annotations.NotNull private final var str: java.lang.String]
@@ -32,16 +48,29 @@ UFile (package = ) [public final class A {...]
         UMethod (name = AWith2Init) [public fun AWith2Init(@org.jetbrains.annotations.NotNull str: java.lang.String) {...}]
             UParameter (name = str) [@org.jetbrains.annotations.NotNull var str: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UBlockExpression [{...}] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UBlockExpression [{...}] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external println(2)((long)2)
+                UBlockExpression [{...}] = external println(1)((long)1)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(1)] = external println(1)((long)1)
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(1)((long)1)
+                        ULiteralExpression (value = 1) [1] = (long)1
+                UBlockExpression [{...}] = external println(2)((long)2)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(2)] = external println(2)((long)2)
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(2)((long)2)
+                        ULiteralExpression (value = 2) [2] = (long)2
         UMethod (name = AWith2Init) [public fun AWith2Init(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(i.toString())(external toString()())
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())] = external <anonymous class>(i.toString())(external toString()())
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(i.toString())(external toString()())
+                    UQualifiedReferenceExpression [i.toString()] = external toString()()
+                        USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
     UClass (name = AOnlyInit) [public final class AOnlyInit {...}]
         UMethod (name = AOnlyInit) [public fun AOnlyInit() = UastEmptyExpression]
@@ -52,17 +81,23 @@ UFile (package = ) [public final class A {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
-                UBinaryExpression (operator = =) [a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                UBinaryExpression (operator = =) [a = i.toString()] = Undetermined
                     USimpleNameReferenceExpression (identifier = a) [a] = external a()
-                    UQualifiedReferenceExpression [i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UQualifiedReferenceExpression [i.toString()] = external toString()()
                         USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = AWithSecondary) [public fun AWithSecondary(@org.jetbrains.annotations.NotNull s: java.lang.String) {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
                 UBinaryExpression (operator = =) [a = s] = Undetermined
                     USimpleNameReferenceExpression (identifier = a) [a] = external a()
                     USimpleNameReferenceExpression (identifier = s) [s] = Undetermined
@@ -77,28 +112,38 @@ UFile (package = ) [public final class A {...]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
-                UBlockExpression [{...}] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UBinaryExpression (operator = =) [a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                UBlockExpression [{...}] = external println()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] = external println()()
+                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println()()
+                UBinaryExpression (operator = =) [a = i.toString()] = Undetermined
                     USimpleNameReferenceExpression (identifier = a) [a] = external a()
-                    UQualifiedReferenceExpression [i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UQualifiedReferenceExpression [i.toString()] = external toString()()
                         USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = AWithSecondaryInit) [public fun AWithSecondaryInit(@org.jetbrains.annotations.NotNull s: java.lang.String) {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external toString()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                    UIdentifier (Identifier ()) [UIdentifier (Identifier ())]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
                 UBinaryExpression (operator = =) [a = s] = Undetermined
                     USimpleNameReferenceExpression (identifier = a) [a] = external a()
                     USimpleNameReferenceExpression (identifier = s) [s] = Undetermined
                 UDeclarationsExpression [var local: java.lang.String = s] = Undetermined
                     ULocalVariable (name = local) [var local: java.lang.String = s]
                         USimpleNameReferenceExpression (identifier = s) [s] = Undetermined
-                UQualifiedReferenceExpression [local.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression [local.toString()] = external toString()()
                     USimpleNameReferenceExpression (identifier = local) [local] = (var local = Undetermined)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                        UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                        USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = getA) [public final fun getA() : java.lang.String = UastEmptyExpression]
         UMethod (name = setA) [public final fun setA(@org.jetbrains.annotations.NotNull value: java.lang.String) : void = UastEmptyExpression]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: java.lang.String]
@@ -111,9 +156,11 @@ UFile (package = ) [public final class A {...]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
                 UBlockExpression [{...}] = Undetermined
-                    UBinaryExpression (operator = =) [a = i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UBinaryExpression (operator = =) [a = i.toString()] = Undetermined
                         USimpleNameReferenceExpression (identifier = a) [a] = Undetermined
-                        UQualifiedReferenceExpression [i.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UQualifiedReferenceExpression [i.toString()] = external toString()()
                             USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                                UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = getA) [public final fun getA() : java.lang.String = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Delegate.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Delegate.values.fir.txt
index b30bea3acfa..ee40451ad05 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Delegate.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Delegate.values.fir.txt
@@ -17,12 +17,32 @@ UFile (package = ) [public final class MyColor {...]
         UMethod (name = getY) [public final fun getY() : int = UastEmptyExpression]
         UMethod (name = getZ) [public final fun getZ() : int = UastEmptyExpression]
     UClass (name = Some) [public final class Some {...}]
-        UField (name = lambda) [@org.jetbrains.annotations.NotNull private final var lambda: kotlin.Lazy<? extends MyColor> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = lambda) [@org.jetbrains.annotations.NotNull private final var lambda: kotlin.Lazy<? extends MyColor> = lazy({ ...})]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-        UField (name = nonLazy) [@org.jetbrains.annotations.NotNull private final var nonLazy: MyColor = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [lazy({ ...})] = external lazy({
+    return <anonymous class>(1, 2, 3)
+})(Undetermined)
+                UIdentifier (Identifier (lazy)) [UIdentifier (Identifier (lazy))]
+                USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null) [lazy] = external lazy({
+    return <anonymous class>(1, 2, 3)
+})(Undetermined)
+                ULambdaExpression [{ ...}] = Undetermined
+                    UBlockExpression [{...}] = Nothing
+                        UReturnExpression [return <anonymous class>(1, 2, 3)] = Nothing
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) [<anonymous class>(1, 2, 3)] = external <anonymous class>(1, 2, 3)((long)1, (long)2, (long)3)
+                                UIdentifier (Identifier (MyColor)) [UIdentifier (Identifier (MyColor))]
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(1, 2, 3)((long)1, (long)2, (long)3)
+                                ULiteralExpression (value = 1) [1] = (long)1
+                                ULiteralExpression (value = 2) [2] = (long)2
+                                ULiteralExpression (value = 3) [3] = (long)3
+        UField (name = nonLazy) [@org.jetbrains.annotations.NotNull private final var nonLazy: MyColor = <anonymous class>(1, 2, 3)]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 3)) [<anonymous class>(1, 2, 3)] = external <anonymous class>(1, 2, 3)((long)1, (long)2, (long)3)
+                UIdentifier (Identifier (MyColor)) [UIdentifier (Identifier (MyColor))]
+                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(1, 2, 3)((long)1, (long)2, (long)3)
+                ULiteralExpression (value = 1) [1] = (long)1
+                ULiteralExpression (value = 2) [2] = (long)2
+                ULiteralExpression (value = 3) [3] = (long)3
         UMethod (name = Some) [public fun Some() = UastEmptyExpression]
         UMethod (name = getDelegate) [public final fun getDelegate() : MyColor = UastEmptyExpression]
         UMethod (name = getLambda) [public final fun getLambda() : kotlin.Lazy<? extends MyColor> = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/DestructuringDeclaration.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/DestructuringDeclaration.values.fir.txt
index 396789930c2..84c09ba0bca 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/DestructuringDeclaration.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/DestructuringDeclaration.values.fir.txt
@@ -10,10 +10,10 @@ UFile (package = ) [public final class DestructuringDeclarationKt {...]
                         UBinaryExpression (operator = <other>) ["foo" <other> 1] = Undetermined
                             ULiteralExpression (value = "foo") ["foo"] = "foo"
                             ULiteralExpression (value = 1) [1] = (long)1
-                UDeclarationsExpression [@null @not-implemented-annotation var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>] = Undetermined
-                    ULocalVariable (name = var465978a0) [@null @not-implemented-annotation var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
+                UDeclarationsExpression [@null @null var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>] = Undetermined
+                    ULocalVariable (name = var465978a0) [@null @null var var465978a0: kotlin.Pair<? extends java.lang.String,? extends java.lang.String> = data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>]
+                        UAnnotation (fqName = null) [@null]
                         UAnnotation (fqName = null) [@null]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
                         UBinaryExpressionWithType [data as kotlin.Pair<? extends java.lang.String,? extends java.lang.String>] = Undetermined
                             USimpleNameReferenceExpression (identifier = data) [data] = Undetermined
                             UTypeReferenceExpression (name = kotlin.Pair<? extends java.lang.String,? extends java.lang.String>) [kotlin.Pair<? extends java.lang.String,? extends java.lang.String>] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Elvis.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Elvis.values.fir.txt
index e6d6c31adac..000e5a5d804 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Elvis.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Elvis.values.fir.txt
@@ -17,20 +17,30 @@ UFile (package = ) [public final class ElvisKt {...]
                         UDeclarationsExpression [var var243c51a0: java.lang.String = elvis {...}] = Undetermined
                             ULocalVariable (name = var243c51a0) [var var243c51a0: java.lang.String = elvis {...}]
                                 UExpressionList (elvis) [elvis {...}] = Undetermined
-                                    UDeclarationsExpression [var varc4aef569: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                                        ULocalVariable (name = varc4aef569) [var varc4aef569: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                                    UIfExpression [if (varc4aef569 != null) varc4aef569 else [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                    UDeclarationsExpression [var varc4aef569: java.lang.String = foo("Lorem ipsum")] = Undetermined
+                                        ULocalVariable (name = varc4aef569) [var varc4aef569: java.lang.String = foo("Lorem ipsum")]
+                                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [foo("Lorem ipsum")] = external foo("Lorem ipsum")("Lorem ipsum")
+                                                UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                                                USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo("Lorem ipsum")("Lorem ipsum")
+                                                ULiteralExpression (value = "Lorem ipsum") ["Lorem ipsum"] = "Lorem ipsum"
+                                    UIfExpression [if (varc4aef569 != null) varc4aef569 else foo("dolor sit amet")] = Undetermined
                                         UBinaryExpression (operator = !=) [varc4aef569 != null] = Undetermined
                                             USimpleNameReferenceExpression (identifier = varc4aef569) [varc4aef569] = Undetermined
                                             ULiteralExpression (value = null) [null] = null
                                         USimpleNameReferenceExpression (identifier = varc4aef569) [varc4aef569] = Undetermined
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                        UIfExpression [if (var243c51a0 != null) var243c51a0 else [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [foo("dolor sit amet")] = external foo("dolor sit amet")("dolor sit amet")
+                                            UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                                            USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo("dolor sit amet")("dolor sit amet")
+                                            ULiteralExpression (value = "dolor sit amet") ["dolor sit amet"] = "dolor sit amet"
+                        UIfExpression [if (var243c51a0 != null) var243c51a0 else bar().toString()] = Undetermined
                             UBinaryExpression (operator = !=) [var243c51a0 != null] = Undetermined
                                 USimpleNameReferenceExpression (identifier = var243c51a0) [var243c51a0] = Undetermined
                                 ULiteralExpression (value = null) [null] = null
                             USimpleNameReferenceExpression (identifier = var243c51a0) [var243c51a0] = Undetermined
-                            UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UQualifiedReferenceExpression [bar().toString()] = external toString()()
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] = external bar()()
+                                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] = external bar()()
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                                    UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ElvisType.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ElvisType.values.fir.txt
index 6704ee04885..c2e8017012c 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ElvisType.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ElvisType.values.fir.txt
@@ -4,8 +4,26 @@ UFile (package = ) [public final class ElvisTypeKt {...]
             UParameter (name = text) [@org.jetbrains.annotations.Nullable var text: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return bar(elvis {...})] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [bar(elvis {...})] = external bar(elvis {
+    var var63c495f9: java.lang.String = text
+    if (var63c495f9 != null) var63c495f9 else return
+})(Undetermined)
+                        UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                        USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] = external bar(elvis {
+    var var63c495f9: java.lang.String = text
+    if (var63c495f9 != null) var63c495f9 else return
+})(Undetermined)
+                        UExpressionList (elvis) [elvis {...}] = Undetermined
+                            UDeclarationsExpression [var var63c495f9: java.lang.String = text] = Nothing
+                                ULocalVariable (name = var63c495f9) [var var63c495f9: java.lang.String = text]
+                                    USimpleNameReferenceExpression (identifier = text) [text] = Undetermined
+                            UIfExpression [if (var63c495f9 != null) var63c495f9 else return] = Undetermined
+                                UBinaryExpression (operator = !=) [var63c495f9 != null] = Undetermined
+                                    USimpleNameReferenceExpression (identifier = var63c495f9) [var63c495f9] = Undetermined
+                                    ULiteralExpression (value = null) [null] = null
+                                USimpleNameReferenceExpression (identifier = var63c495f9) [var63c495f9] = Undetermined
+                                UReturnExpression [return] = Nothing
         UMethod (name = bar) [public static final fun bar(@org.jetbrains.annotations.NotNull o: java.lang.Object) : void {...}]
             UParameter (name = o) [@org.jetbrains.annotations.NotNull var o: java.lang.Object]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/EnumValueMembers.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/EnumValueMembers.values.fir.txt
index c7905cd222f..4a5ccca9f3f 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/EnumValueMembers.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/EnumValueMembers.values.fir.txt
@@ -2,8 +2,15 @@ UFile (package = ) [public final enum Style {...]
     UClass (name = Style) [public final enum Style {...}]
         UField (name = value) [@org.jetbrains.annotations.NotNull private final var value: java.lang.String]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-        UField (name = SHEET) [@null public static final var SHEET: Style]
+        UEnumConstant (name = SHEET) [@null SHEET("foo") {...}] = Undetermined
             UAnnotation (fqName = null) [@null]
+            USimpleNameReferenceExpression (identifier = Style) [Style] = external Style()
+            ULiteralExpression (value = "foo") ["foo"] = "foo"
+            UClass (name = SHEET) [public static final class SHEET : Style {...}]
+                UMethod (name = getExitAnimation) [public fun getExitAnimation() : java.lang.String {...}]
+                    UBlockExpression [{...}] = Nothing
+                        UReturnExpression [return "bar"] = Nothing
+                            ULiteralExpression (value = "bar") ["bar"] = "bar"
         UMethod (name = Style) [private fun Style(@org.jetbrains.annotations.NotNull value: java.lang.String) = UastEmptyExpression]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/EnumValuesConstructors.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/EnumValuesConstructors.values.fir.txt
index c02c2895655..0fe430ccbe7 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/EnumValuesConstructors.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/EnumValuesConstructors.values.fir.txt
@@ -2,14 +2,22 @@ UFile (package = ) [public final enum Style {...]
     UClass (name = Style) [public final enum Style {...}]
         UField (name = value) [@org.jetbrains.annotations.Nullable private final var value: java.lang.String]
             UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
-        UField (name = SYSTEM) [@null public static final var SYSTEM: Style]
+        UEnumConstant (name = SYSTEM) [@null SYSTEM("system")] = Undetermined
             UAnnotation (fqName = null) [@null]
-        UField (name = USER) [@null public static final var USER: Style]
+            USimpleNameReferenceExpression (identifier = Style) [Style] = external Style()
+            ULiteralExpression (value = "system") ["system"] = "system"
+        UEnumConstant (name = USER) [@null USER("user")] = Undetermined
             UAnnotation (fqName = null) [@null]
-        UField (name = INTERNAL) [@null public static final var INTERNAL: Style]
+            USimpleNameReferenceExpression (identifier = Style) [Style] = external Style()
+            ULiteralExpression (value = "user") ["user"] = "user"
+        UEnumConstant (name = INTERNAL) [@null INTERNAL("internal")] = Undetermined
             UAnnotation (fqName = null) [@null]
-        UField (name = UNKNOWN) [@null public static final var UNKNOWN: Style]
+            USimpleNameReferenceExpression (identifier = Style) [Style] = external Style()
+            ULiteralExpression (value = "internal") ["internal"] = "internal"
+        UEnumConstant (name = UNKNOWN) [@null UNKNOWN(null)] = Undetermined
             UAnnotation (fqName = null) [@null]
+            USimpleNameReferenceExpression (identifier = Style) [Style] = external Style()
+            ULiteralExpression (value = null) [null] = null
         UMethod (name = Style) [private fun Style(@org.jetbrains.annotations.Nullable value: java.lang.String) = UastEmptyExpression]
             UParameter (name = value) [@org.jetbrains.annotations.Nullable var value: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/InferenceInsideUnresolvedConstructor.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/InferenceInsideUnresolvedConstructor.values.fir.txt
index d7b89ddc7d7..b6c2dd4f076 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/InferenceInsideUnresolvedConstructor.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/InferenceInsideUnresolvedConstructor.values.fir.txt
@@ -2,8 +2,14 @@ UFile (package = ) [public final class InferenceInsideUnresolvedConstructorKt {.
     UClass (name = InferenceInsideUnresolvedConstructorKt) [public final class InferenceInsideUnresolvedConstructorKt {...}]
         UMethod (name = getBar) [public static final fun getBar() : java.lang.Object {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return <anonymous class>(id(42))] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [<anonymous class>(id(42))] = external <anonymous class>(id(42))(external id(42)((long)42))
+                        UIdentifier (Identifier (Unresolved)) [UIdentifier (Identifier (Unresolved))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(id(42))(external id(42)((long)42))
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [id(42)] = external id(42)((long)42)
+                            UIdentifier (Identifier (id)) [UIdentifier (Identifier (id))]
+                            USimpleNameReferenceExpression (identifier = id, resolvesTo = null) [id] = external id(42)((long)42)
+                            ULiteralExpression (value = 42) [42] = (long)42
         UMethod (name = id) [public static final fun id(@org.jetbrains.annotations.NotNull x: T) : T {...}]
             UParameter (name = x) [@org.jetbrains.annotations.NotNull var x: T]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/InnerNonFixedTypeVariable.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/InnerNonFixedTypeVariable.values.fir.txt
index 5a819717a8f..170818b0064 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/InnerNonFixedTypeVariable.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/InnerNonFixedTypeVariable.values.fir.txt
@@ -3,11 +3,33 @@ UFile (package = ) [public final class InnerNonFixedTypeVariableKt {...]
         UMethod (name = test) [public static final fun test(@org.jetbrains.annotations.NotNull list: java.util.List<? extends java.lang.Object>) : void {...}]
             UParameter (name = list) [@org.jetbrains.annotations.NotNull var list: java.util.List<? extends java.lang.Object>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [list.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    UQualifiedReferenceExpression [list.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(mutableSetOf(), { var it: <ErrorType> ->
+
+
+})(external mutableSetOf()(), Undetermined)
+                UQualifiedReferenceExpression [list.filterIsInstance().<anonymous class>(mutableSetOf(), { var it: <ErrorType> ->...})] = external <anonymous class>(mutableSetOf(), { var it: <ErrorType> ->
+
+
+})(external mutableSetOf()(), Undetermined)
+                    UQualifiedReferenceExpression [list.filterIsInstance()] = external filterIsInstance()()
                         USimpleNameReferenceExpression (identifier = list) [list] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [filterIsInstance()] = external filterIsInstance()()
+                            UIdentifier (Identifier (filterIsInstance)) [UIdentifier (Identifier (filterIsInstance))]
+                            USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null) [filterIsInstance] = external filterIsInstance()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(mutableSetOf(), { var it: <ErrorType> ->...})] = external <anonymous class>(mutableSetOf(), { var it: <ErrorType> ->
+
+
+})(external mutableSetOf()(), Undetermined)
+                        UIdentifier (Identifier (mapTo)) [UIdentifier (Identifier (mapTo))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(mutableSetOf(), { var it: <ErrorType> ->
+
+
+})(external mutableSetOf()(), Undetermined)
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [mutableSetOf()] = external mutableSetOf()()
+                            UIdentifier (Identifier (mutableSetOf)) [UIdentifier (Identifier (mutableSetOf))]
+                            USimpleNameReferenceExpression (identifier = mutableSetOf, resolvesTo = null) [mutableSetOf] = external mutableSetOf()()
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] = Undetermined
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] = Undetermined
     UClass (name = Some) [public final class Some {...}]
         UMethod (name = Some) [public fun Some() = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/LambdaReturn.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/LambdaReturn.values.fir.txt
index caf1ef8ad0e..d45da5a27ee 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/LambdaReturn.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/LambdaReturn.values.fir.txt
@@ -79,18 +79,52 @@ UFile (package = org.jetbrains.uast.kotlin) [package org.jetbrains.uast.kotlin..
                                     UBinaryExpression (operator = +) ["a" + a] = Undetermined
                                         ULiteralExpression (value = "a") ["a"] = "a"
                                         USimpleNameReferenceExpression (identifier = a) [a] = external a()
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [bar({ var it: <ErrorType> ->...})] = external bar({ var it: <ErrorType> ->
+
+    if (it > 5) return
+    var b: int = 1
+    return it + b
+})(Undetermined)
+                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] = external bar({ var it: <ErrorType> ->
+
+    if (it > 5) return
+    var b: int = 1
+    return it + b
+})(Undetermined)
+                    ULambdaExpression [{ var it: <ErrorType> ->...}] = Undetermined
+                        UParameter (name = it) [var it: <ErrorType>]
+                        UBlockExpression [{...}] = Nothing
+                            UIfExpression [if (it > 5) return] = Undetermined
+                                UBinaryExpression (operator = >) [it > 5] = Undetermined
+                                    USimpleNameReferenceExpression (identifier = it) [it] = external it()
+                                    ULiteralExpression (value = 5) [5] = (long)5
+                                UReturnExpression [return] = Nothing
+                            UDeclarationsExpression [var b: int = 1] = Nothing
+                                ULocalVariable (name = b) [var b: int = 1]
+                                    ULiteralExpression (value = 1) [1] = (long)1
+                            UReturnExpression [return it + b] = Nothing
+                                UBinaryExpression (operator = +) [it + b] = Undetermined (depending on: (var b = (long)1))
+                                    USimpleNameReferenceExpression (identifier = it) [it] = external it()
+                                    USimpleNameReferenceExpression (identifier = b) [b] = (var b = (long)1)
                 UDeclarationsExpression [var x: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}] = Nothing
                     ULocalVariable (name = x) [var x: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}]
                         ULambdaExpression [{ ...}] = Undetermined
                             UBlockExpression [{...}] = Undetermined
-                                UDeclarationsExpression [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                                    ULocalVariable (name = vardbcd0724) [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                                UDeclarationsExpression [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = listOf(1, 2)] = Nothing
+                                    ULocalVariable (name = vardbcd0724) [@org.jetbrains.annotations.NotNull var vardbcd0724: java.util.List<? extends java.lang.Integer> = listOf(1, 2)]
                                         UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [listOf(1, 2)] = external listOf(1, 2)((long)1, (long)2)
+                                            UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf(1, 2)((long)1, (long)2)
+                                            ULiteralExpression (value = 1) [1] = (long)1
+                                            ULiteralExpression (value = 2) [2] = (long)2
                 UDeclarationsExpression [var y: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}] = Nothing
                     ULocalVariable (name = y) [var y: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = { ...}]
                         ULambdaExpression [{ ...}] = Undetermined
                             UBlockExpression [{...}] = Nothing
-                                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                UReturnExpression [return listOf(1)] = Nothing
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf(1)] = external listOf(1)((long)1)
+                                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf(1)((long)1)
+                                        ULiteralExpression (value = 1) [1] = (long)1
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Lambdas.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Lambdas.values.fir.txt
index c13eafef7d6..255b5da1b61 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Lambdas.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Lambdas.values.fir.txt
@@ -2,25 +2,58 @@ UFile (package = ) [import java.util.stream.Stream...]
     UImportStatement (isOnDemand = false) [import java.util.stream.Stream]
     UClass (name = LambdasKt) [public final class LambdasKt {...}]
         UMethod (name = foo) [public static final fun foo() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [Stream.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    UQualifiedReferenceExpression [Stream.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external filter({ var it: <ErrorType> ->
+
+    return it.isEmpty()
+})(Undetermined)
+                UQualifiedReferenceExpression [Stream.empty().filter({ var it: <ErrorType> ->...})] = external filter({ var it: <ErrorType> ->
+
+    return it.isEmpty()
+})(Undetermined)
+                    UQualifiedReferenceExpression [Stream.empty()] = external empty()()
                         USimpleNameReferenceExpression (identifier = Stream) [Stream] = external Stream()
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [empty()] = external empty()()
+                            UIdentifier (Identifier (empty)) [UIdentifier (Identifier (empty))]
+                            USimpleNameReferenceExpression (identifier = empty, resolvesTo = null) [empty] = external empty()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [filter({ var it: <ErrorType> ->...})] = external filter({ var it: <ErrorType> ->
+
+    return it.isEmpty()
+})(Undetermined)
+                        UIdentifier (Identifier (filter)) [UIdentifier (Identifier (filter))]
+                        USimpleNameReferenceExpression (identifier = filter, resolvesTo = null) [filter] = external filter({ var it: <ErrorType> ->
+
+    return it.isEmpty()
+})(Undetermined)
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] = Undetermined
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] = Nothing
+                                UReturnExpression [return it.isEmpty()] = Nothing
+                                    UQualifiedReferenceExpression [it.isEmpty()] = external isEmpty()()
+                                        USimpleNameReferenceExpression (identifier = it) [it] = external it()
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isEmpty()] = external isEmpty()()
+                                            UIdentifier (Identifier (isEmpty)) [UIdentifier (Identifier (isEmpty))]
+                                            USimpleNameReferenceExpression (identifier = isEmpty, resolvesTo = null) [isEmpty] = external isEmpty()()
         UMethod (name = doSelectItem) [public static final fun doSelectItem(@org.jetbrains.annotations.NotNull selectItemFunction: kotlin.jvm.functions.Function0<? extends kotlin.Unit>) : void {...}]
             UParameter (name = selectItemFunction) [@org.jetbrains.annotations.NotNull var selectItemFunction: kotlin.jvm.functions.Function0<? extends kotlin.Unit>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external invoke()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] = external invoke()()
+                    UIdentifier (Identifier (selectItemFunction)) [UIdentifier (Identifier (selectItemFunction))]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke()()
                 UDeclarationsExpression [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}] = Undetermined
                     ULocalVariable (name = baz) [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                         ULambdaExpression [fun () {...}] = Undetermined
-                            UBlockExpression [{...}] = Undetermined
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UBlockExpression [{...}] = external <anonymous class>()()
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                                    UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] = external invoke()()
+                    UIdentifier (Identifier (baz)) [UIdentifier (Identifier (baz))]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke()()
         UMethod (name = lambdaInPlaceCall) [public static final fun lambdaInPlaceCall() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                UWhileExpression [while ([!] UnknownKotlinExpression (CALL_EXPRESSION)) {...}] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UWhileExpression [while (invoke()) {...}] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] = external invoke()()
+                        UIdentifier (Identifier ({)) [UIdentifier (Identifier ({))]
+                        USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke()()
                     UBlockExpression [{...}] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/LocalDeclarations.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/LocalDeclarations.values.fir.txt
index f0cb4e85abc..d3e99c7913b 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/LocalDeclarations.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/LocalDeclarations.values.fir.txt
@@ -9,13 +9,17 @@ UFile (package = ) [public final class LocalDeclarationsKt {...]
                     UVariable (name = bar) [var bar: kotlin.jvm.functions.Function0<? extends Local> = fun () {...}]
                         ULambdaExpression [fun () {...}] = Undetermined
                             UBlockExpression [{...}] = Nothing
-                                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                                UReturnExpression [return <anonymous class>()] = Undetermined
+                                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                                        UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
                 UDeclarationsExpression [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}] = Undetermined
                     ULocalVariable (name = baz) [var baz: kotlin.jvm.functions.Function0<? extends kotlin.Unit> = fun () {...}]
                         ULambdaExpression [fun () {...}] = Undetermined
-                            UBlockExpression [{...}] = Undetermined
-                                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UBlockExpression [{...}] = external <anonymous class>()()
+                                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                                    UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
                 UDeclarationsExpression [var someLocalFun: kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.String,? extends java.lang.Integer> = fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {...}] = Undetermined
                     UVariable (name = someLocalFun) [var someLocalFun: kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.String,? extends java.lang.Integer> = fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {...}]
                         ULambdaExpression [fun (@org.jetbrains.annotations.NotNull var text: java.lang.String) {...}] = Undetermined
@@ -24,7 +28,11 @@ UFile (package = ) [public final class LocalDeclarationsKt {...]
                             UBlockExpression [{...}] = Nothing
                                 UReturnExpression [return 42] = Undetermined
                                     ULiteralExpression (value = 42) [42] = (long)42
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION) == [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    UBinaryExpression (operator = ==) [[!] UnknownKotlinExpression (CALL_EXPRESSION) == [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return bar() == <anonymous class>()] = Nothing
+                    UBinaryExpression (operator = ==) [bar() == <anonymous class>()] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] = external bar()()
+                            UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                            USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] = external bar()()
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                            UIdentifier (Identifier (Local)) [UIdentifier (Identifier (Local))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.fir.txt
deleted file mode 100644
index abfbf5c2018..00000000000
--- a/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.fir.txt
+++ /dev/null
@@ -1,9 +0,0 @@
-UFile (package = ) [public final class LocalVariableWithAnnotationKt {...]
-    UClass (name = LocalVariableWithAnnotationKt) [public final class LocalVariableWithAnnotationKt {...}]
-        UMethod (name = foo) [public static final fun foo() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                UDeclarationsExpression [@not-implemented-annotation var bar: java.lang.String = "lorem ipsum"] = Undetermined
-                    ULocalVariable (name = bar) [@not-implemented-annotation var bar: java.lang.String = "lorem ipsum"]
-                        UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-                        ULiteralExpression (value = "lorem ipsum") ["lorem ipsum"] = "lorem ipsum"
-    UClass (name = TestAnnotation) [public abstract annotation TestAnnotation {...}]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.fe10.txt b/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.txt
similarity index 97%
rename from uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.fe10.txt
rename to uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.txt
index 8200ff25da7..937c7506999 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.fe10.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/LocalVariableWithAnnotation.values.txt
@@ -6,4 +6,4 @@ UFile (package = ) [public final class LocalVariableWithAnnotationKt {...]
                     ULocalVariable (name = bar) [@TestAnnotation var bar: java.lang.String = "lorem ipsum"]
                         UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
                         ULiteralExpression (value = "lorem ipsum") ["lorem ipsum"] = "lorem ipsum"
-    UClass (name = TestAnnotation) [public abstract annotation TestAnnotation {...}]
+    UClass (name = TestAnnotation) [public abstract annotation TestAnnotation {...}]
\ No newline at end of file
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/NonTrivialIdentifiers.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/NonTrivialIdentifiers.values.fir.txt
index 463f9111b0f..bad850351a8 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/NonTrivialIdentifiers.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/NonTrivialIdentifiers.values.fir.txt
@@ -3,17 +3,53 @@ UFile (package = ) [public final class NonTrivialIdentifiersKt {...]
         UMethod (name = main) [public static final fun main(@org.jetbrains.annotations.Nullable a: A) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.Nullable var a: A]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var p: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = p) [var p: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external invoke({
+    invoke({
+        invoke()
+    })
+})(Undetermined)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] = external invoke()()
+                    UIdentifier (Identifier (()) [UIdentifier (Identifier (())]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke()()
+                UDeclarationsExpression [var p: A = <anonymous class>()] = Undetermined
+                    ULocalVariable (name = p) [var p: A = <anonymous class>()]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [invoke({ ...})] = external invoke({
+    invoke({
+        invoke()
+    })
+})(Undetermined)
+                    UIdentifier (Identifier ({)) [UIdentifier (Identifier ({))]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke({
+    invoke({
+        invoke()
+    })
+})(Undetermined)
+                    ULambdaExpression [{ ...}] = Undetermined
+                        UBlockExpression [{...}] = external invoke({
+    invoke()
+})(Undetermined)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [invoke({ ...})] = external invoke({
+    invoke()
+})(Undetermined)
+                                UIdentifier (Identifier (p)) [UIdentifier (Identifier (p))]
+                                USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke({
+    invoke()
+})(Undetermined)
+                                ULambdaExpression [{ ...}] = Undetermined
+                                    UBlockExpression [{...}] = external invoke()()
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] = external invoke()()
+                                            UIdentifier (Identifier (()) [UIdentifier (Identifier (())]
+                                            USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke()()
     UClass (name = A) [public final class A {...}]
         UMethod (name = A) [public fun A() = UastEmptyExpression]
         UMethod (name = invoke) [public final fun invoke() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external invoke()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [invoke()] = external invoke()()
+                    UIdentifier (Identifier (()) [UIdentifier (Identifier (())]
+                    USimpleNameReferenceExpression (identifier = invoke, resolvesTo = null) [invoke] = external invoke()()
         UMethod (name = invoke) [public final fun invoke(@org.jetbrains.annotations.NotNull f: kotlin.jvm.functions.Function0<? extends kotlin.Unit>) : void {...}]
             UParameter (name = f) [@org.jetbrains.annotations.NotNull var f: kotlin.jvm.functions.Function0<? extends kotlin.Unit>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ParameterPropertyWithAnnotation.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ParameterPropertyWithAnnotation.values.fir.txt
index d0ebbf32f09..a991a606da1 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ParameterPropertyWithAnnotation.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ParameterPropertyWithAnnotation.values.fir.txt
@@ -7,21 +7,25 @@ UFile (package = ) [public abstract annotation MyAnnotation {...]
     UClass (name = Test1) [public final class Test1 {...}]
         UField (name = bar) [@org.jetbrains.annotations.NotNull private var bar: int]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-        UMethod (name = Test1) [public fun Test1(@org.jetbrains.annotations.NotNull bar: int) = UastEmptyExpression]
-            UParameter (name = bar) [@org.jetbrains.annotations.NotNull var bar: int]
+        UMethod (name = Test1) [public fun Test1(@org.jetbrains.annotations.NotNull @MyAnnotation bar: int) = UastEmptyExpression]
+            UParameter (name = bar) [@org.jetbrains.annotations.NotNull @MyAnnotation var bar: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-        UMethod (name = getBar) [public final fun getBar() : int = UastEmptyExpression]
-        UMethod (name = setBar) [public final fun setBar(value: int) : void = UastEmptyExpression]
+                UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
+        UMethod (name = getBar) [@MyAnnotation...public final fun getBar() : int = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
+        UMethod (name = setBar) [@MyAnnotation...public final fun setBar(value: int) : void = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
             UParameter (name = value) [var value: int]
     UClass (name = Test2) [public final class Test2 {...}]
-        UField (name = bar) [@org.jetbrains.annotations.NotNull @not-implemented-annotation private var bar: int]
+        UField (name = bar) [@org.jetbrains.annotations.NotNull @MyAnnotation5 private var bar: int]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UMethod (name = Test2) [public fun Test2(@org.jetbrains.annotations.NotNull @not-implemented-annotation bar: int) = UastEmptyExpression]
-            UParameter (name = bar) [@org.jetbrains.annotations.NotNull @not-implemented-annotation var bar: int]
+            UAnnotation (fqName = MyAnnotation5) [@MyAnnotation5]
+        UMethod (name = Test2) [public fun Test2(@org.jetbrains.annotations.NotNull bar: int) = UastEmptyExpression]
+            UParameter (name = bar) [@org.jetbrains.annotations.NotNull var bar: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-        UMethod (name = getBar) [public final fun getBar() : int = UastEmptyExpression]
-        UMethod (name = setBar) [public final fun setBar(@MyAnnotation3 value: int) : void = UastEmptyExpression]
+        UMethod (name = getBar) [@MyAnnotation...public final fun getBar() : int = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation) [@MyAnnotation]
+        UMethod (name = setBar) [@MyAnnotation2...public final fun setBar(@MyAnnotation3 value: int) : void = UastEmptyExpression]
+            UAnnotation (fqName = MyAnnotation2) [@MyAnnotation2]
             UParameter (name = value) [@MyAnnotation3 var value: int]
                 UAnnotation (fqName = MyAnnotation3) [@MyAnnotation3]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ParametersDisorder.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ParametersDisorder.values.fir.txt
index 0919e2c505d..724a2423278 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ParametersDisorder.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ParametersDisorder.values.fir.txt
@@ -23,45 +23,127 @@ UFile (package = ) [public final class ParametersDisorderKt {...]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
         UMethod (name = call) [public static final fun call() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression ["abc".[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external with(<anonymous class>(), {
+    "def".with2Receivers(8, 7.0)
+})(external <anonymous class>()(), Undetermined)
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [global(2.2, 2)] = external global(2.2, 2)((float)2.200000047683716, (long)2)
+                    UIdentifier (Identifier (global)) [UIdentifier (Identifier (global))]
+                    USimpleNameReferenceExpression (identifier = global, resolvesTo = null) [global] = external global(2.2, 2)((float)2.200000047683716, (long)2)
+                    ULiteralExpression (value = 2.2) [2.2] = (float)2.200000047683716
+                    ULiteralExpression (value = 2) [2] = (long)2
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [withDefault("bbb")] = external withDefault("bbb")("bbb")
+                    UIdentifier (Identifier (withDefault)) [UIdentifier (Identifier (withDefault))]
+                    USimpleNameReferenceExpression (identifier = withDefault, resolvesTo = null) [withDefault] = external withDefault("bbb")("bbb")
+                    ULiteralExpression (value = "bbb") ["bbb"] = "bbb"
+                UQualifiedReferenceExpression ["abc".withReceiver(1, 1.2)] = external withReceiver(1, 1.2)((long)1, (float)1.2000000476837158)
                     ULiteralExpression (value = "abc") ["abc"] = "abc"
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [Math.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [withReceiver(1, 1.2)] = external withReceiver(1, 1.2)((long)1, (float)1.2000000476837158)
+                        UIdentifier (Identifier (withReceiver)) [UIdentifier (Identifier (withReceiver))]
+                        USimpleNameReferenceExpression (identifier = withReceiver, resolvesTo = null) [withReceiver] = external withReceiver(1, 1.2)((long)1, (float)1.2000000476837158)
+                        ULiteralExpression (value = 1) [1] = (long)1
+                        ULiteralExpression (value = 1.2) [1.2] = (float)1.2000000476837158
+                UQualifiedReferenceExpression [Math.atan2(1.3, 3.4)] = external atan2(1.3, 3.4)(1.3, 3.4)
                     USimpleNameReferenceExpression (identifier = Math) [Math] = external Math()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [atan2(1.3, 3.4)] = external atan2(1.3, 3.4)(1.3, 3.4)
+                        UIdentifier (Identifier (atan2)) [UIdentifier (Identifier (atan2))]
+                        USimpleNameReferenceExpression (identifier = atan2, resolvesTo = null) [atan2] = external atan2(1.3, 3.4)(1.3, 3.4)
+                        ULiteralExpression (value = 1.3) [1.3] = 1.3
+                        ULiteralExpression (value = 3.4) [3.4] = 3.4
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>("param1", "param2")] = external <anonymous class>("param1", "param2")("param1", "param2")
+                    UIdentifier (Identifier (unresolvedMethod)) [UIdentifier (Identifier (unresolvedMethod))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>("param1", "param2")("param1", "param2")
+                    ULiteralExpression (value = "param1") ["param1"] = "param1"
+                    ULiteralExpression (value = "param2") ["param2"] = "param2"
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", 1, 2, 3)] = external format("%i %i %i", 1, 2, 3)("%i %i %i", (long)1, (long)2, (long)3)
                     UQualifiedReferenceExpression [java.lang.String] = external String()
                         UQualifiedReferenceExpression [java.lang] = external lang()
                             USimpleNameReferenceExpression (identifier = java) [java] = external java()
                             USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
                         USimpleNameReferenceExpression (identifier = String) [String] = external String()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 4)) [format("%i %i %i", 1, 2, 3)] = external format("%i %i %i", 1, 2, 3)("%i %i %i", (long)1, (long)2, (long)3)
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] = external format("%i %i %i", 1, 2, 3)("%i %i %i", (long)1, (long)2, (long)3)
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] = "%i %i %i"
+                        ULiteralExpression (value = 1) [1] = (long)1
+                        ULiteralExpression (value = 2) [2] = (long)2
+                        ULiteralExpression (value = 3) [3] = (long)3
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", arrayOf(1, 2, 3))] = external format("%i %i %i", arrayOf(1, 2, 3))("%i %i %i", external arrayOf(1, 2, 3)((long)1, (long)2, (long)3))
                     UQualifiedReferenceExpression [java.lang.String] = external String()
                         UQualifiedReferenceExpression [java.lang] = external lang()
                             USimpleNameReferenceExpression (identifier = java) [java] = external java()
                             USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
                         USimpleNameReferenceExpression (identifier = String) [String] = external String()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [format("%i %i %i", arrayOf(1, 2, 3))] = external format("%i %i %i", arrayOf(1, 2, 3))("%i %i %i", external arrayOf(1, 2, 3)((long)1, (long)2, (long)3))
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] = external format("%i %i %i", arrayOf(1, 2, 3))("%i %i %i", external arrayOf(1, 2, 3)((long)1, (long)2, (long)3))
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] = "%i %i %i"
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [arrayOf(1, 2, 3)] = external arrayOf(1, 2, 3)((long)1, (long)2, (long)3)
+                            UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] = external arrayOf(1, 2, 3)((long)1, (long)2, (long)3)
+                            ULiteralExpression (value = 1) [1] = (long)1
+                            ULiteralExpression (value = 2) [2] = (long)2
+                            ULiteralExpression (value = 3) [3] = (long)3
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))] = external format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))("%i %i %i", external arrayOf(1, 2, 3)((long)1, (long)2, (long)3), external arrayOf(4, 5, 6)((long)4, (long)5, (long)6))
                     UQualifiedReferenceExpression [java.lang.String] = external String()
                         UQualifiedReferenceExpression [java.lang] = external lang()
                             USimpleNameReferenceExpression (identifier = java) [java] = external java()
                             USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
                         USimpleNameReferenceExpression (identifier = String) [String] = external String()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [java.lang.String.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))] = external format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))("%i %i %i", external arrayOf(1, 2, 3)((long)1, (long)2, (long)3), external arrayOf(4, 5, 6)((long)4, (long)5, (long)6))
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] = external format("%i %i %i", arrayOf(1, 2, 3), arrayOf(4, 5, 6))("%i %i %i", external arrayOf(1, 2, 3)((long)1, (long)2, (long)3), external arrayOf(4, 5, 6)((long)4, (long)5, (long)6))
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] = "%i %i %i"
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [arrayOf(1, 2, 3)] = external arrayOf(1, 2, 3)((long)1, (long)2, (long)3)
+                            UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] = external arrayOf(1, 2, 3)((long)1, (long)2, (long)3)
+                            ULiteralExpression (value = 1) [1] = (long)1
+                            ULiteralExpression (value = 2) [2] = (long)2
+                            ULiteralExpression (value = 3) [3] = (long)3
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 3)) [arrayOf(4, 5, 6)] = external arrayOf(4, 5, 6)((long)4, (long)5, (long)6)
+                            UIdentifier (Identifier (arrayOf)) [UIdentifier (Identifier (arrayOf))]
+                            USimpleNameReferenceExpression (identifier = arrayOf, resolvesTo = null) [arrayOf] = external arrayOf(4, 5, 6)((long)4, (long)5, (long)6)
+                            ULiteralExpression (value = 4) [4] = (long)4
+                            ULiteralExpression (value = 5) [5] = (long)5
+                            ULiteralExpression (value = 6) [6] = (long)6
+                UQualifiedReferenceExpression [java.lang.String.format("%i %i %i", "".chunked(2).toTypedArray())] = external format("%i %i %i", "".chunked(2).toTypedArray())("%i %i %i", external toTypedArray()())
                     UQualifiedReferenceExpression [java.lang.String] = external String()
                         UQualifiedReferenceExpression [java.lang] = external lang()
                             USimpleNameReferenceExpression (identifier = java) [java] = external java()
                             USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
                         USimpleNameReferenceExpression (identifier = String) [String] = external String()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [format("%i %i %i", "".chunked(2).toTypedArray())] = external format("%i %i %i", "".chunked(2).toTypedArray())("%i %i %i", external toTypedArray()())
+                        UIdentifier (Identifier (format)) [UIdentifier (Identifier (format))]
+                        USimpleNameReferenceExpression (identifier = format, resolvesTo = null) [format] = external format("%i %i %i", "".chunked(2).toTypedArray())("%i %i %i", external toTypedArray()())
+                        ULiteralExpression (value = "%i %i %i") ["%i %i %i"] = "%i %i %i"
+                        UQualifiedReferenceExpression ["".chunked(2).toTypedArray()] = external toTypedArray()()
+                            UQualifiedReferenceExpression ["".chunked(2)] = external chunked(2)((long)2)
+                                ULiteralExpression (value = "") [""] = ""
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [chunked(2)] = external chunked(2)((long)2)
+                                    UIdentifier (Identifier (chunked)) [UIdentifier (Identifier (chunked))]
+                                    USimpleNameReferenceExpression (identifier = chunked, resolvesTo = null) [chunked] = external chunked(2)((long)2)
+                                    ULiteralExpression (value = 2) [2] = (long)2
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toTypedArray()] = external toTypedArray()()
+                                UIdentifier (Identifier (toTypedArray)) [UIdentifier (Identifier (toTypedArray))]
+                                USimpleNameReferenceExpression (identifier = toTypedArray, resolvesTo = null) [toTypedArray] = external toTypedArray()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [with(<anonymous class>(), { ...})] = external with(<anonymous class>(), {
+    "def".with2Receivers(8, 7.0)
+})(external <anonymous class>()(), Undetermined)
+                    UIdentifier (Identifier (with)) [UIdentifier (Identifier (with))]
+                    USimpleNameReferenceExpression (identifier = with, resolvesTo = null) [with] = external with(<anonymous class>(), {
+    "def".with2Receivers(8, 7.0)
+})(external <anonymous class>()(), Undetermined)
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                        UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                    ULambdaExpression [{ ...}] = Undetermined
+                        UBlockExpression [{...}] = external with2Receivers(8, 7.0)((long)8, (float)7.0)
+                            UQualifiedReferenceExpression ["def".with2Receivers(8, 7.0)] = external with2Receivers(8, 7.0)((long)8, (float)7.0)
+                                ULiteralExpression (value = "def") ["def"] = "def"
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [with2Receivers(8, 7.0)] = external with2Receivers(8, 7.0)((long)8, (float)7.0)
+                                    UIdentifier (Identifier (with2Receivers)) [UIdentifier (Identifier (with2Receivers))]
+                                    USimpleNameReferenceExpression (identifier = with2Receivers, resolvesTo = null) [with2Receivers] = external with2Receivers(8, 7.0)((long)8, (float)7.0)
+                                    ULiteralExpression (value = 8) [8] = (long)8
+                                    ULiteralExpression (value = 7.0) [7.0] = (float)7.0
         UMethod (name = objectLiteral) [public static final fun objectLiteral() : void {...}]
             UBlockExpression [{...}] = Undetermined
                 UObjectLiteralExpression [anonymous object : Parent(b = 1, a = "foo") { }] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/PropertyAccessors.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/PropertyAccessors.values.fir.txt
index 1f1a837aa72..8424d40e3af 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/PropertyAccessors.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/PropertyAccessors.values.fir.txt
@@ -3,15 +3,20 @@ UFile (package = ) [public final class PropertyTest {...]
         UMethod (name = PropertyTest) [public fun PropertyTest() = UastEmptyExpression]
         UMethod (name = getStringRepresentation) [public final fun getStringRepresentation() : java.lang.String {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return this.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    UQualifiedReferenceExpression [this.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return this.toString()] = Nothing
+                    UQualifiedReferenceExpression [this.toString()] = external toString()()
                         UThisExpression (label = null) [this] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = setStringRepresentation) [public final fun setStringRepresentation(@org.jetbrains.annotations.NotNull value: java.lang.String) : void {...}]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external setDataFromString(value)(external value())
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [setDataFromString(value)] = external setDataFromString(value)(external value())
+                    UIdentifier (Identifier (setDataFromString)) [UIdentifier (Identifier (setDataFromString))]
+                    USimpleNameReferenceExpression (identifier = setDataFromString, resolvesTo = null) [setDataFromString] = external setDataFromString(value)(external value())
+                    USimpleNameReferenceExpression (identifier = value) [value] = external value()
         UMethod (name = setDataFromString) [public final fun setDataFromString(@org.jetbrains.annotations.NotNull data: java.lang.String) : void {...}]
             UParameter (name = data) [@org.jetbrains.annotations.NotNull var data: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/PropertyDelegate.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/PropertyDelegate.values.fir.txt
index 10a7bae18a2..d91ae5dada0 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/PropertyDelegate.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/PropertyDelegate.values.fir.txt
@@ -5,5 +5,15 @@ UFile (package = ) [public final class PropertyDelegateKt {...]
             UBlockExpression [{...}] = Undetermined
                 UDeclarationsExpression [var sdCardPathLocal: java.lang.String] = Undetermined
                     ULocalVariable (name = sdCardPathLocal) [var sdCardPathLocal: java.lang.String]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [lazy({ ...})] = external lazy({
+    return "/sdcard"
+})(Undetermined)
+                            UIdentifier (Identifier (lazy)) [UIdentifier (Identifier (lazy))]
+                            USimpleNameReferenceExpression (identifier = lazy, resolvesTo = null) [lazy] = external lazy({
+    return "/sdcard"
+})(Undetermined)
+                            ULambdaExpression [{ ...}] = Undetermined
+                                UBlockExpression [{...}] = Nothing
+                                    UReturnExpression [return "/sdcard"] = Nothing
+                                        ULiteralExpression (value = "/sdcard") ["/sdcard"] = "/sdcard"
         UMethod (name = getAnnotatedDelegate) [public static final fun getAnnotatedDelegate() : int = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/PropertyReferences.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/PropertyReferences.values.fir.txt
index 1704e105ecf..1267f38bb47 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/PropertyReferences.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/PropertyReferences.values.fir.txt
@@ -2,18 +2,21 @@ UFile (package = ) [public final class PropertyReferencesKt {...]
     UClass (name = PropertyReferencesKt) [public final class PropertyReferencesKt {...}]
         UMethod (name = properties) [public static final fun properties() : void {...}]
             UBlockExpression [{...}] = external mutableProp()
-                UDeclarationsExpression [var a: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = a) [var a: A = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var a: A = <anonymous class>(17)] = Undetermined
+                    ULocalVariable (name = a) [var a: A = <anonymous class>(17)]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(17)] = external <anonymous class>(17)((long)17)
+                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(17)((long)17)
+                            ULiteralExpression (value = 17) [17] = (long)17
                 UDeclarationsExpression [var x: int = -a.mutableProp] = Undetermined
                     ULocalVariable (name = x) [var x: int = -a.mutableProp]
                         UPrefixExpression (operator = -) [-a.mutableProp] = Undetermined
                             UQualifiedReferenceExpression [a.mutableProp] = external mutableProp()
-                                USimpleNameReferenceExpression (identifier = a) [a] = (var a = Undetermined)
+                                USimpleNameReferenceExpression (identifier = a) [a] = (var a = external <anonymous class>(17)((long)17))
                                 USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] = external mutableProp()
                 UBinaryExpression (operator = =) [a.mutableProp = 1] = Undetermined
                     UQualifiedReferenceExpression [a.mutableProp] = external mutableProp()
-                        USimpleNameReferenceExpression (identifier = a) [a] = (var a = Undetermined)
+                        USimpleNameReferenceExpression (identifier = a) [a] = (var a = external <anonymous class>(17)((long)17))
                         USimpleNameReferenceExpression (identifier = mutableProp) [mutableProp] = external mutableProp()
                     ULiteralExpression (value = 1) [1] = (long)1
                 UBinaryExpression (operator = +=) [a.mutableProp += x] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/PropertyWithAnnotation.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/PropertyWithAnnotation.values.fir.txt
index 68eab4d0d16..f199d4001ba 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/PropertyWithAnnotation.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/PropertyWithAnnotation.values.fir.txt
@@ -1,11 +1,13 @@
 UFile (package = ) [public final class PropertyWithAnnotationKt {...]
     UClass (name = PropertyWithAnnotationKt) [public final class PropertyWithAnnotationKt {...}]
-        UField (name = prop1) [@org.jetbrains.annotations.NotNull @not-implemented-annotation private static final var prop1: int = 0]
+        UField (name = prop1) [@org.jetbrains.annotations.NotNull @TestAnnotation private static final var prop1: int = 0]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
             ULiteralExpression (value = 0) [0] = (long)0
-        UMethod (name = getProp1) [public static final fun getProp1() : int = UastEmptyExpression]
-        UMethod (name = getProp2) [public static final fun getProp2() : int {...}]
+        UMethod (name = getProp1) [@TestAnnotation...public static final fun getProp1() : int = UastEmptyExpression]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
+        UMethod (name = getProp2) [@TestAnnotation...}]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return 0] = Nothing
                     ULiteralExpression (value = 0) [0] = (long)0
@@ -13,7 +15,8 @@ UFile (package = ) [public final class PropertyWithAnnotationKt {...]
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return 0] = Nothing
                     ULiteralExpression (value = 0) [0] = (long)0
-        UMethod (name = setProp3) [public static final fun setProp3(@org.jetbrains.annotations.NotNull value: int) : void {...}]
+        UMethod (name = setProp3) [@TestAnnotation...}]
+            UAnnotation (fqName = TestAnnotation) [@TestAnnotation]
             UParameter (name = value) [@org.jetbrains.annotations.NotNull var value: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/QualifiedConstructorCall.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/QualifiedConstructorCall.values.fir.txt
index 8182080cb8f..7e86e1f18e5 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/QualifiedConstructorCall.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/QualifiedConstructorCall.values.fir.txt
@@ -5,11 +5,13 @@ UFile (package = A.B.C) [package A.B.C...]
         UMethod (name = Bar) [public fun Bar() = UastEmptyExpression]
         UMethod (name = getFoo) [public final fun getFoo() : A.B.C.Foo {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return A.B.C.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    UQualifiedReferenceExpression [A.B.C.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return A.B.C.<anonymous class>()] = Nothing
+                    UQualifiedReferenceExpression [A.B.C.<anonymous class>()] = external <anonymous class>()()
                         UQualifiedReferenceExpression [A.B.C] = external C()
                             UQualifiedReferenceExpression [A.B] = external B()
                                 USimpleNameReferenceExpression (identifier = A) [A] = external A()
                                 USimpleNameReferenceExpression (identifier = B) [B] = external B()
                             USimpleNameReferenceExpression (identifier = C) [C] = external C()
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                            UIdentifier (Identifier (Foo)) [UIdentifier (Identifier (Foo))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ReceiverFun.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ReceiverFun.values.fir.txt
index f59c81524cb..f25bd2d91c7 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ReceiverFun.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ReceiverFun.values.fir.txt
@@ -1,21 +1,25 @@
 UFile (package = ) [public final class ReceiverFunKt {...]
     UClass (name = ReceiverFunKt) [public final class ReceiverFunKt {...}]
-        UMethod (name = foo) [public static final fun foo(@not-implemented-annotation @org.jetbrains.annotations.NotNull $this$foo: java.lang.String) : int {...}]
-            UParameter (name = $this$foo) [@not-implemented-annotation @org.jetbrains.annotations.NotNull var $this$foo: java.lang.String]
-                UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UMethod (name = foo) [public static final fun foo(@MyReceiverAnnotation @org.jetbrains.annotations.NotNull $this$foo: java.lang.String) : int {...}]
+            UParameter (name = $this$foo) [@MyReceiverAnnotation @org.jetbrains.annotations.NotNull var $this$foo: java.lang.String]
+                UAnnotation (fqName = MyReceiverAnnotation) [@MyReceiverAnnotation]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
                 UReturnExpression [return this.length] = Nothing
                     UQualifiedReferenceExpression [this.length] = external length()
                         UThisExpression (label = null) [this] = Undetermined
                         USimpleNameReferenceExpression (identifier = length) [length] = external length()
-        UMethod (name = getRx) [public static final fun getRx(@not-implemented-annotation @org.jetbrains.annotations.NotNull $this$rx: java.lang.String) : kotlin.text.Regex {...}]
-            UParameter (name = $this$rx) [@not-implemented-annotation @org.jetbrains.annotations.NotNull var $this$rx: java.lang.String]
-                UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+        UMethod (name = getRx) [public static final fun getRx(@MyReceiverAnnotation(name = "RegExp") @org.jetbrains.annotations.NotNull $this$rx: java.lang.String) : kotlin.text.Regex {...}]
+            UParameter (name = $this$rx) [@MyReceiverAnnotation(name = "RegExp") @org.jetbrains.annotations.NotNull var $this$rx: java.lang.String]
+                UAnnotation (fqName = MyReceiverAnnotation) [@MyReceiverAnnotation(name = "RegExp")]
+                    UNamedExpression (name = name) [name = "RegExp"] = Undetermined
+                        ULiteralExpression (value = "RegExp") ["RegExp"] = "RegExp"
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return toRegex()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toRegex()] = external toRegex()()
+                        UIdentifier (Identifier (toRegex)) [UIdentifier (Identifier (toRegex))]
+                        USimpleNameReferenceExpression (identifier = toRegex, resolvesTo = null) [toRegex] = external toRegex()()
     UClass (name = MyReceiverAnnotation) [public abstract annotation MyReceiverAnnotation {...}]
         UAnnotationMethod (name = name) [public abstract fun name() : java.lang.String = UastEmptyExpression]
             ULiteralExpression (value = "") [""] = ""
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ReifiedResolve.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ReifiedResolve.values.fir.txt
index 27e0abc736c..ab69e19734e 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ReifiedResolve.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ReifiedResolve.values.fir.txt
@@ -2,16 +2,29 @@ UFile (package = ) [public final class ReifiedResolveKt {...]
     UClass (name = ReifiedResolveKt) [public final class ReifiedResolveKt {...}]
         UMethod (name = resolve) [public static final fun resolve() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var x: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = x) [var x: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var y: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = y) [var y: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var z: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = z) [var z: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] = external foo()()
+                    UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                    USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo()()
+                UDeclarationsExpression [var x: java.lang.String = foo()] = Undetermined
+                    ULocalVariable (name = x) [var x: java.lang.String = foo()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] = external foo()()
+                            UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                            USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo()()
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] = external bar()()
+                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                    USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] = external bar()()
+                UDeclarationsExpression [var y: java.lang.String = bar()] = Undetermined
+                    ULocalVariable (name = y) [var y: java.lang.String = bar()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [bar()] = external bar()()
+                            UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                            USimpleNameReferenceExpression (identifier = bar, resolvesTo = null) [bar] = external bar()()
+                UDeclarationsExpression [var z: java.util.List<? extends java.lang.String> = listOf("foo").filterIsInstance()] = Undetermined
+                    ULocalVariable (name = z) [var z: java.util.List<? extends java.lang.String> = listOf("foo").filterIsInstance()]
+                        UQualifiedReferenceExpression [listOf("foo").filterIsInstance()] = external filterIsInstance()()
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("foo")] = external listOf("foo")("foo")
+                                UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                                USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf("foo")("foo")
+                                ULiteralExpression (value = "foo") ["foo"] = "foo"
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [filterIsInstance()] = external filterIsInstance()()
+                                UIdentifier (Identifier (filterIsInstance)) [UIdentifier (Identifier (filterIsInstance))]
+                                USimpleNameReferenceExpression (identifier = filterIsInstance, resolvesTo = null) [filterIsInstance] = external filterIsInstance()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Resolve.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Resolve.values.fir.txt
index 15cff5be899..cfedf51a9c2 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Resolve.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Resolve.values.fir.txt
@@ -1,76 +1,150 @@
 UFile (package = ) [public final class ResolveKt {...]
     UClass (name = ResolveKt) [public final class ResolveKt {...}]
         UMethod (name = bar) [public static final fun bar() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).size] = external size()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(1, 2)((long)1, (long)2)
+                UQualifiedReferenceExpression [<anonymous class>().foo()] = external foo()()
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                        UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] = external foo()()
+                        UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo()()
+                UQualifiedReferenceExpression [<anonymous class>().inlineFoo()] = external inlineFoo()()
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                        UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [inlineFoo()] = external inlineFoo()()
+                        UIdentifier (Identifier (inlineFoo)) [UIdentifier (Identifier (inlineFoo))]
+                        USimpleNameReferenceExpression (identifier = inlineFoo, resolvesTo = null) [inlineFoo] = external inlineFoo()()
+                UQualifiedReferenceExpression [listOf(<anonymous class>()).forEach({ var it: <ErrorType> ->...})] = external forEach({ var it: <ErrorType> ->
+
+    println(it)
+})(Undetermined)
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf(<anonymous class>())] = external listOf(<anonymous class>())(external <anonymous class>()())
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf(<anonymous class>())(external <anonymous class>()())
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                            UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [forEach({ var it: <ErrorType> ->...})] = external forEach({ var it: <ErrorType> ->
+
+    println(it)
+})(Undetermined)
+                        UIdentifier (Identifier (forEach)) [UIdentifier (Identifier (forEach))]
+                        USimpleNameReferenceExpression (identifier = forEach, resolvesTo = null) [forEach] = external forEach({ var it: <ErrorType> ->
+
+    println(it)
+})(Undetermined)
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] = Undetermined
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] = external println(it)(external it())
+                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(it)] = external println(it)(external it())
+                                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(it)(external it())
+                                    USimpleNameReferenceExpression (identifier = it) [it] = external it()
+                UQualifiedReferenceExpression [listOf("").joinToString()] = external joinToString()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] = external listOf("")("")
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf("")("")
+                        ULiteralExpression (value = "") [""] = ""
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [joinToString()] = external joinToString()()
+                        UIdentifier (Identifier (joinToString)) [UIdentifier (Identifier (joinToString))]
+                        USimpleNameReferenceExpression (identifier = joinToString, resolvesTo = null) [joinToString] = external joinToString()()
+                UQualifiedReferenceExpression [listOf("").size] = external size()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] = external listOf("")("")
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf("")("")
+                        ULiteralExpression (value = "") [""] = ""
                     USimpleNameReferenceExpression (identifier = size) [size] = external size()
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).indices] = external indices()
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression [listOf("").indices] = external indices()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] = external listOf("")("")
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf("")("")
+                        ULiteralExpression (value = "") [""] = ""
                     USimpleNameReferenceExpression (identifier = indices) [indices] = external indices()
-                UDeclarationsExpression [var date: java.util.Date = java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = date) [var date: java.util.Date = java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UQualifiedReferenceExpression [java.util.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var date: java.util.Date = java.util.<anonymous class>()] = Undetermined
+                    ULocalVariable (name = date) [var date: java.util.Date = java.util.<anonymous class>()]
+                        UQualifiedReferenceExpression [java.util.<anonymous class>()] = external <anonymous class>()()
                             UQualifiedReferenceExpression [java.util] = external util()
                                 USimpleNameReferenceExpression (identifier = java) [java] = external java()
                                 USimpleNameReferenceExpression (identifier = util) [util] = external util()
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                                UIdentifier (Identifier (Date)) [UIdentifier (Identifier (Date))]
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
                 UBinaryExpression (operator = =) [date.time = 1000] = Undetermined
                     UQualifiedReferenceExpression [date.time] = external time()
-                        USimpleNameReferenceExpression (identifier = date) [date] = (var date = Undetermined)
+                        USimpleNameReferenceExpression (identifier = date) [date] = (var date = external <anonymous class>()())
                         USimpleNameReferenceExpression (identifier = time) [time] = external time()
                     ULiteralExpression (value = 1000) [1000] = (long)1000
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).entries.[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).entries.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                        UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).entries] = external entries()
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression [listOf("").last()] = external last()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf("")] = external listOf("")("")
+                        UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                        USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf("")("")
+                        ULiteralExpression (value = "") [""] = ""
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [last()] = external last()()
+                        UIdentifier (Identifier (last)) [UIdentifier (Identifier (last))]
+                        USimpleNameReferenceExpression (identifier = last, resolvesTo = null) [last] = external last()()
+                UQualifiedReferenceExpression [mutableMapOf(1 <other> "1").entries.first().setValue("123")] = external setValue("123")("123")
+                    UQualifiedReferenceExpression [mutableMapOf(1 <other> "1").entries.first()] = external first()()
+                        UQualifiedReferenceExpression [mutableMapOf(1 <other> "1").entries] = external entries()
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [mutableMapOf(1 <other> "1")] = external mutableMapOf(1 <other> "1")(Undetermined)
+                                UIdentifier (Identifier (mutableMapOf)) [UIdentifier (Identifier (mutableMapOf))]
+                                USimpleNameReferenceExpression (identifier = mutableMapOf, resolvesTo = null) [mutableMapOf] = external mutableMapOf(1 <other> "1")(Undetermined)
+                                UBinaryExpression (operator = <other>) [1 <other> "1"] = Undetermined
+                                    ULiteralExpression (value = 1) [1] = (long)1
+                                    ULiteralExpression (value = "1") ["1"] = "1"
                             USimpleNameReferenceExpression (identifier = entries) [entries] = external entries()
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [first()] = external first()()
+                            UIdentifier (Identifier (first)) [UIdentifier (Identifier (first))]
+                            USimpleNameReferenceExpression (identifier = first, resolvesTo = null) [first] = external first()()
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [setValue("123")] = external setValue("123")("123")
+                        UIdentifier (Identifier (setValue)) [UIdentifier (Identifier (setValue))]
+                        USimpleNameReferenceExpression (identifier = setValue, resolvesTo = null) [setValue] = external setValue("123")("123")
+                        ULiteralExpression (value = "123") ["123"] = "123"
                 UDeclarationsExpression [var intRange: kotlin.ranges.LongRange = 0 .. 3] = Undetermined
                     ULocalVariable (name = intRange) [var intRange: kotlin.ranges.LongRange = 0 .. 3]
                         UBinaryExpression (operator = ..) [0 .. 3] = Undetermined
                             ULiteralExpression (value = 0) [0] = (long)0
                             ULiteralExpression (value = 3) [3] = (long)3
-                UQualifiedReferenceExpression [intRange.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression [intRange.contains(2 as int)] = external contains(2 as int)(2)
                     USimpleNameReferenceExpression (identifier = intRange) [intRange] = (var intRange = Undetermined)
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [contains(2 as int)] = external contains(2 as int)(2)
+                        UIdentifier (Identifier (contains)) [UIdentifier (Identifier (contains))]
+                        USimpleNameReferenceExpression (identifier = contains, resolvesTo = null) [contains] = external contains(2 as int)(2)
+                        UBinaryExpressionWithType [2 as int] = 2
+                            ULiteralExpression (value = 2) [2] = (long)2
+                            UTypeReferenceExpression (name = int) [int] = Undetermined
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(1, 2)] = external <anonymous class>(1, 2)((long)1, (long)2)
+                    UIdentifier (Identifier (IntRange)) [UIdentifier (Identifier (IntRange))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(1, 2)((long)1, (long)2)
+                    ULiteralExpression (value = 1) [1] = (long)1
+                    ULiteralExpression (value = 2) [2] = (long)2
         UMethod (name = barT) [public static final fun barT(@org.jetbrains.annotations.NotNull t: T) : void {...}]
             UParameter (name = t) [@org.jetbrains.annotations.NotNull var t: T]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [t.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external foo()()
+                UQualifiedReferenceExpression [t.foo()] = external foo()()
                     USimpleNameReferenceExpression (identifier = t) [t] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] = external foo()()
+                        UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo()()
         UMethod (name = barTL) [public static final fun barTL(@org.jetbrains.annotations.NotNull listT: T) : void {...}]
             UParameter (name = listT) [@org.jetbrains.annotations.NotNull var listT: T]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [listT.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression [listT.isEmpty()] = external isEmpty()()
                     USimpleNameReferenceExpression (identifier = listT) [listT] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [isEmpty()] = external isEmpty()()
+                        UIdentifier (Identifier (isEmpty)) [UIdentifier (Identifier (isEmpty))]
+                        USimpleNameReferenceExpression (identifier = isEmpty, resolvesTo = null) [isEmpty] = external isEmpty()()
                 UForEachExpression [for (a : listT) {...}] = Undetermined
                     USimpleNameReferenceExpression (identifier = listT) [listT] = Undetermined
-                    UBlockExpression [{...}] = Undetermined
-                        UQualifiedReferenceExpression [a.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UBlockExpression [{...}] = external foo()()
+                        UQualifiedReferenceExpression [a.foo()] = external foo()()
                             USimpleNameReferenceExpression (identifier = a) [a] = external a()
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [foo()] = external foo()()
+                                UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                                USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo()()
     UClass (name = A) [public class A {...}]
         UMethod (name = A) [public fun A() = UastEmptyExpression]
         UMethod (name = foo) [public final fun foo() : void {...}]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/SAM.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/SAM.values.fir.txt
index 2bb00829f3f..22e2fd99a03 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/SAM.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/SAM.values.fir.txt
@@ -12,13 +12,23 @@ UFile (package = ) [import java.lang.Thread...]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             ULambdaExpression [{ ...}] = Undetermined
                 UBlockExpression [{...}] = Undetermined
-        UField (name = baz) [@org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = baz) [@org.jetbrains.annotations.NotNull private static final var baz: java.lang.Runnable = java.lang.Runnable({ ...})]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UQualifiedReferenceExpression [java.lang.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UQualifiedReferenceExpression [java.lang.Runnable({ ...})] = external Runnable({
+
+})(Undetermined)
                 UQualifiedReferenceExpression [java.lang] = external lang()
                     USimpleNameReferenceExpression (identifier = java) [java] = external java()
                     USimpleNameReferenceExpression (identifier = lang) [lang] = external lang()
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Runnable({ ...})] = external Runnable({
+
+})(Undetermined)
+                    UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
+                    USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null) [Runnable] = external Runnable({
+
+})(Undetermined)
+                    ULambdaExpression [{ ...}] = Undetermined
+                        UBlockExpression [{...}] = Undetermined
         UMethod (name = getNotSam) [public static final fun getNotSam() : kotlin.jvm.functions.Function0<? extends kotlin.Unit> = UastEmptyExpression]
         UMethod (name = getFoo) [public static final fun getFoo() : java.lang.Runnable = UastEmptyExpression]
         UMethod (name = setFoo) [public static final fun setFoo(@org.jetbrains.annotations.NotNull value: java.lang.Runnable) : void = UastEmptyExpression]
@@ -36,7 +46,15 @@ UFile (package = ) [import java.lang.Thread...]
                             ULambdaExpression [{ ...}] = Undetermined
                                 UBlockExpression [{...}] = Undetermined
                             UTypeReferenceExpression (name = java.lang.Runnable) [java.lang.Runnable] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [runRunnable({ ...})] = external runRunnable({
+
+})(Undetermined)
+                    UIdentifier (Identifier (runRunnable)) [UIdentifier (Identifier (runRunnable))]
+                    USimpleNameReferenceExpression (identifier = runRunnable, resolvesTo = null) [runRunnable] = external runRunnable({
+
+})(Undetermined)
+                    ULambdaExpression [{ ...}] = Undetermined
+                        UBlockExpression [{...}] = Undetermined
                 UReturnExpression [return { ...}] = Nothing
                     ULambdaExpression [{ ...}] = Undetermined
                         UBlockExpression [{...}] = Undetermined
@@ -45,31 +63,118 @@ UFile (package = ) [import java.lang.Thread...]
             UParameter (name = r) [@org.jetbrains.annotations.NotNull var r: java.lang.Runnable]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return <anonymous class>()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                        UIdentifier (Identifier (r)) [UIdentifier (Identifier (r))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
         UMethod (name = test1) [public static final fun test1() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                UDeclarationsExpression [var thread1: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = thread1) [var thread1: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var thread1: java.lang.Thread = <anonymous class>({ ...})] = Undetermined
+                    ULocalVariable (name = thread1) [var thread1: java.lang.Thread = <anonymous class>({ ...})]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>({ ...})] = external <anonymous class>({
+    println("hello1")
+})(Undetermined)
+                            UIdentifier (Identifier (Thread)) [UIdentifier (Identifier (Thread))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>({
+    println("hello1")
+})(Undetermined)
+                            ULambdaExpression [{ ...}] = Undetermined
+                                UBlockExpression [{...}] = external println("hello1")("hello1")
+                                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("hello1")] = external println("hello1")("hello1")
+                                        UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                        USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println("hello1")("hello1")
+                                        ULiteralExpression (value = "hello1") ["hello1"] = "hello1"
         UMethod (name = test2) [public static final fun test2() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                UDeclarationsExpression [var thread2: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = thread2) [var thread2: java.lang.Thread = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var thread2: java.lang.Thread = <anonymous class>(Runnable({ ...}))] = Undetermined
+                    ULocalVariable (name = thread2) [var thread2: java.lang.Thread = <anonymous class>(Runnable({ ...}))]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(Runnable({ ...}))] = external <anonymous class>(Runnable({
+    println("hello2")
+}))(external Runnable({
+    println("hello2")
+})(Undetermined))
+                            UIdentifier (Identifier (Thread)) [UIdentifier (Identifier (Thread))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(Runnable({
+    println("hello2")
+}))(external Runnable({
+    println("hello2")
+})(Undetermined))
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Runnable({ ...})] = external Runnable({
+    println("hello2")
+})(Undetermined)
+                                UIdentifier (Identifier (Runnable)) [UIdentifier (Identifier (Runnable))]
+                                USimpleNameReferenceExpression (identifier = Runnable, resolvesTo = null) [Runnable] = external Runnable({
+    println("hello2")
+})(Undetermined)
+                                ULambdaExpression [{ ...}] = Undetermined
+                                    UBlockExpression [{...}] = external println("hello2")("hello2")
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("hello2")] = external println("hello2")("hello2")
+                                            UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                                            USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println("hello2")("hello2")
+                                            ULiteralExpression (value = "hello2") ["hello2"] = "hello2"
         UMethod (name = test3) [public static final fun test3() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external ambiguousSamAcceptor(Callable({
+    return "Callable"
+}))(external Callable({
+    return "Callable"
+})(Undetermined))
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [ambiguousSamAcceptor(Supplier({ ...}))] = external ambiguousSamAcceptor(Supplier({
+    return "Supplier"
+}))(external Supplier({
+    return "Supplier"
+})(Undetermined))
+                    UIdentifier (Identifier (ambiguousSamAcceptor)) [UIdentifier (Identifier (ambiguousSamAcceptor))]
+                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null) [ambiguousSamAcceptor] = external ambiguousSamAcceptor(Supplier({
+    return "Supplier"
+}))(external Supplier({
+    return "Supplier"
+})(Undetermined))
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Supplier({ ...})] = external Supplier({
+    return "Supplier"
+})(Undetermined)
+                        UIdentifier (Identifier (Supplier)) [UIdentifier (Identifier (Supplier))]
+                        USimpleNameReferenceExpression (identifier = Supplier, resolvesTo = null) [Supplier] = external Supplier({
+    return "Supplier"
+})(Undetermined)
+                        ULambdaExpression [{ ...}] = Undetermined
+                            UBlockExpression [{...}] = Nothing
+                                UReturnExpression [return "Supplier"] = Nothing
+                                    ULiteralExpression (value = "Supplier") ["Supplier"] = "Supplier"
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [ambiguousSamAcceptor(Callable({ ...}))] = external ambiguousSamAcceptor(Callable({
+    return "Callable"
+}))(external Callable({
+    return "Callable"
+})(Undetermined))
+                    UIdentifier (Identifier (ambiguousSamAcceptor)) [UIdentifier (Identifier (ambiguousSamAcceptor))]
+                    USimpleNameReferenceExpression (identifier = ambiguousSamAcceptor, resolvesTo = null) [ambiguousSamAcceptor] = external ambiguousSamAcceptor(Callable({
+    return "Callable"
+}))(external Callable({
+    return "Callable"
+})(Undetermined))
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [Callable({ ...})] = external Callable({
+    return "Callable"
+})(Undetermined)
+                        UIdentifier (Identifier (Callable)) [UIdentifier (Identifier (Callable))]
+                        USimpleNameReferenceExpression (identifier = Callable, resolvesTo = null) [Callable] = external Callable({
+    return "Callable"
+})(Undetermined)
+                        ULambdaExpression [{ ...}] = Undetermined
+                            UBlockExpression [{...}] = Nothing
+                                UReturnExpression [return "Callable"] = Nothing
+                                    ULiteralExpression (value = "Callable") ["Callable"] = "Callable"
         UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.function.Supplier<java.lang.String>) : java.lang.String {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.util.function.Supplier<java.lang.String>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return TODO()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] = external TODO()()
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] = external TODO()()
         UMethod (name = ambiguousSamAcceptor) [public static final fun ambiguousSamAcceptor(@org.jetbrains.annotations.NotNull s: java.util.concurrent.Callable<java.lang.String>) : java.lang.String {...}]
             UParameter (name = s) [@org.jetbrains.annotations.NotNull var s: java.util.concurrent.Callable<java.lang.String>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return TODO()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [TODO()] = external TODO()()
+                        UIdentifier (Identifier (TODO)) [UIdentifier (Identifier (TODO))]
+                        USimpleNameReferenceExpression (identifier = TODO, resolvesTo = null) [TODO] = external TODO()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Simple.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Simple.values.fir.txt
index f4645038d19..547d8f64a32 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Simple.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Simple.values.fir.txt
@@ -5,6 +5,9 @@ UFile (package = ) [public final class Simple {...]
             ULiteralExpression (value = "Mary") ["Mary"] = "Mary"
         UMethod (name = Simple) [public fun Simple() = UastEmptyExpression]
         UMethod (name = method) [public final fun method() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external println("Hello, world!")("Hello, world!")
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("Hello, world!")] = external println("Hello, world!")("Hello, world!")
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println("Hello, world!")("Hello, world!")
+                    ULiteralExpression (value = "Hello, world!") ["Hello, world!"] = "Hello, world!"
         UMethod (name = getProperty) [public final fun getProperty() : java.lang.String = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/SimpleAnnotated.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/SimpleAnnotated.values.fir.txt
index f4cd68bccb3..8688ab5113c 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/SimpleAnnotated.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/SimpleAnnotated.values.fir.txt
@@ -1,11 +1,22 @@
 UFile (package = ) [public final class SimpleAnnotated {...]
     UClass (name = SimpleAnnotated) [public final class SimpleAnnotated {...}]
-        UField (name = property) [@org.jetbrains.annotations.NotNull @not-implemented-annotation private final var property: java.lang.String = "Mary"]
+        UField (name = property) [@org.jetbrains.annotations.NotNull @kotlin.SinceKotlin(version = "1.0") private final var property: java.lang.String = "Mary"]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
+            UAnnotation (fqName = kotlin.SinceKotlin) [@kotlin.SinceKotlin(version = "1.0")]
+                UNamedExpression (name = version) [version = "1.0"] = Undetermined
+                    ULiteralExpression (value = "1.0") ["1.0"] = "1.0"
             ULiteralExpression (value = "Mary") ["Mary"] = "Mary"
         UMethod (name = SimpleAnnotated) [public fun SimpleAnnotated() = UastEmptyExpression]
-        UMethod (name = method) [public final fun method() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-        UMethod (name = getProperty) [public final fun getProperty() : java.lang.String = UastEmptyExpression]
+        UMethod (name = method) [@kotlin.Suppress(names = "abc")...}]
+            UAnnotation (fqName = kotlin.Suppress) [@kotlin.Suppress(names = "abc")]
+                UNamedExpression (name = names) [names = "abc"] = Undetermined
+                    ULiteralExpression (value = "abc") ["abc"] = "abc"
+            UBlockExpression [{...}] = external println("Hello, world!")("Hello, world!")
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println("Hello, world!")] = external println("Hello, world!")("Hello, world!")
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println("Hello, world!")("Hello, world!")
+                    ULiteralExpression (value = "Hello, world!") ["Hello, world!"] = "Hello, world!"
+        UMethod (name = getProperty) [@kotlin.SinceKotlin(version = "1.0")...public final fun getProperty() : java.lang.String = UastEmptyExpression]
+            UAnnotation (fqName = kotlin.SinceKotlin) [@kotlin.SinceKotlin(version = "1.0")]
+                UNamedExpression (name = version) [version = "1.0"] = Undetermined
+                    ULiteralExpression (value = "1.0") ["1.0"] = "1.0"
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplex.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplex.values.fir.txt
index 6d93c973cca..a854cf276a7 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplex.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplex.values.fir.txt
@@ -25,15 +25,18 @@ UFile (package = ) [public final class StringTemplateComplexKt {...]
                     ULiteralExpression (value = "literal") ["literal"] = "literal"
                     USimpleNameReferenceExpression (identifier = case4) [case4] = Undetermined
                 ULiteralExpression (value = " z") [" z"] = " z"
-        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"]
+        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.repeat(4) + " z"]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UPolyadicExpression (operator = +) ["a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"] = Undetermined
+            UPolyadicExpression (operator = +) ["a " + "literal" + case4.repeat(4) + " z"] = Undetermined
                 ULiteralExpression (value = "a ") ["a "] = "a "
-                UQualifiedReferenceExpression ["literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression ["literal" + case4.repeat(4)] = external repeat(4)((long)4)
                     UPolyadicExpression (operator = +) ["literal" + case4] = Undetermined
                         ULiteralExpression (value = "literal") ["literal"] = "literal"
                         USimpleNameReferenceExpression (identifier = case4) [case4] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [repeat(4)] = external repeat(4)((long)4)
+                        UIdentifier (Identifier (repeat)) [UIdentifier (Identifier (repeat))]
+                        USimpleNameReferenceExpression (identifier = repeat, resolvesTo = null) [repeat] = external repeat(4)((long)4)
+                        ULiteralExpression (value = 4) [4] = (long)4
                 ULiteralExpression (value = " z") [" z"] = " z"
         UField (name = empty) [@org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
@@ -53,12 +56,19 @@ UFile (package = ) [public final class StringTemplateComplexKt {...]
                     USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = template1) [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UPolyadicExpression (operator = +) ["." + [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(baz)] = external println(baz)(external baz())
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(baz)(external baz())
+                    USimpleNameReferenceExpression (identifier = baz) [baz] = external baz()
+                UDeclarationsExpression [var template1: java.lang.String = simpleForTemplate()] = Undetermined
+                    ULocalVariable (name = template1) [var template1: java.lang.String = simpleForTemplate()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] = external simpleForTemplate()()
+                            UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                            USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] = external simpleForTemplate()()
+                UDeclarationsExpression [var template2: java.lang.String = "." + simpleForTemplate()] = Undetermined
+                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + simpleForTemplate()]
+                        UPolyadicExpression (operator = +) ["." + simpleForTemplate()] = Undetermined
                             ULiteralExpression (value = ".") ["."] = "."
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] = external simpleForTemplate()()
+                                UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] = external simpleForTemplate()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplexForUInjectionHost.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplexForUInjectionHost.values.fir.txt
index 8d5fb2c3d32..894c1d58a5f 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplexForUInjectionHost.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateComplexForUInjectionHost.values.fir.txt
@@ -25,15 +25,18 @@ UFile (package = ) [public final class StringTemplateComplexForUInjectionHostKt
                     ULiteralExpression (value = "literal") ["literal"] = "literal"
                     USimpleNameReferenceExpression (identifier = case4) [case4] = Undetermined
                 ULiteralExpression (value = " z") [" z"] = " z"
-        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"]
+        UField (name = literalInLiteral2) [@org.jetbrains.annotations.NotNull private static final var literalInLiteral2: java.lang.String = "a " + "literal" + case4.repeat(4) + " z"]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UPolyadicExpression (operator = +) ["a " + "literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION) + " z"] = Undetermined
+            UPolyadicExpression (operator = +) ["a " + "literal" + case4.repeat(4) + " z"] = Undetermined
                 ULiteralExpression (value = "a ") ["a "] = "a "
-                UQualifiedReferenceExpression ["literal" + case4.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UQualifiedReferenceExpression ["literal" + case4.repeat(4)] = external repeat(4)((long)4)
                     UPolyadicExpression (operator = +) ["literal" + case4] = Undetermined
                         ULiteralExpression (value = "literal") ["literal"] = "literal"
                         USimpleNameReferenceExpression (identifier = case4) [case4] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [repeat(4)] = external repeat(4)((long)4)
+                        UIdentifier (Identifier (repeat)) [UIdentifier (Identifier (repeat))]
+                        USimpleNameReferenceExpression (identifier = repeat, resolvesTo = null) [repeat] = external repeat(4)((long)4)
+                        ULiteralExpression (value = 4) [4] = (long)4
                 ULiteralExpression (value = " z") [" z"] = " z"
         UField (name = empty) [@org.jetbrains.annotations.NotNull private static final var empty: java.lang.String = ""]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
@@ -53,12 +56,19 @@ UFile (package = ) [public final class StringTemplateComplexForUInjectionHostKt
                     USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
         UMethod (name = foo) [public static final fun foo() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = template1) [var template1: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UPolyadicExpression (operator = +) ["." + [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [println(baz)] = external println(baz)(external baz())
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println(baz)(external baz())
+                    USimpleNameReferenceExpression (identifier = baz) [baz] = external baz()
+                UDeclarationsExpression [var template1: java.lang.String = simpleForTemplate()] = Undetermined
+                    ULocalVariable (name = template1) [var template1: java.lang.String = simpleForTemplate()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] = external simpleForTemplate()()
+                            UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                            USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] = external simpleForTemplate()()
+                UDeclarationsExpression [var template2: java.lang.String = "." + simpleForTemplate()] = Undetermined
+                    ULocalVariable (name = template2) [var template2: java.lang.String = "." + simpleForTemplate()]
+                        UPolyadicExpression (operator = +) ["." + simpleForTemplate()] = Undetermined
                             ULiteralExpression (value = ".") ["."] = "."
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleForTemplate()] = external simpleForTemplate()()
+                                UIdentifier (Identifier (simpleForTemplate)) [UIdentifier (Identifier (simpleForTemplate))]
+                                USimpleNameReferenceExpression (identifier = simpleForTemplate, resolvesTo = null) [simpleForTemplate] = external simpleForTemplate()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateInClass.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateInClass.values.fir.txt
index a07c3ac0d06..08ace1fc467 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateInClass.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/StringTemplateInClass.values.fir.txt
@@ -1,9 +1,12 @@
 UFile (package = ) [public final class Demo {...]
     UClass (name = Demo) [public final class Demo {...}]
-        UField (name = foo) [@null private final var foo: error.NonExistentClass = X.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = foo) [@null private final var foo: error.NonExistentClass = X.<anonymous class>("lorem")]
             UAnnotation (fqName = null) [@null]
-            UQualifiedReferenceExpression [X.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UQualifiedReferenceExpression [X.<anonymous class>("lorem")] = external <anonymous class>("lorem")("lorem")
                 USimpleNameReferenceExpression (identifier = X) [X] = external X()
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [<anonymous class>("lorem")] = external <anonymous class>("lorem")("lorem")
+                    UIdentifier (Identifier (bar)) [UIdentifier (Identifier (bar))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>("lorem")("lorem")
+                    ULiteralExpression (value = "lorem") ["lorem"] = "lorem"
         UMethod (name = Demo) [public fun Demo() = UastEmptyExpression]
         UMethod (name = getFoo) [public final fun getFoo() : error.NonExistentClass = UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/SuperCalls.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/SuperCalls.values.fir.txt
index d706397c5a8..7b795076b05 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/SuperCalls.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/SuperCalls.values.fir.txt
@@ -6,8 +6,13 @@ UFile (package = ) [public final class SuperCallsKt {...]
                 ULiteralExpression (value = "textForAnon") ["textForAnon"] = "textForAnon"
                 UClass (name = null) [final class null : A {...}]
                     UMethod (name = bar) [public final fun bar() : void {...}]
-                        UBlockExpression [{...}] = Undetermined
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UBlockExpression [{...}] = external cons(anonymous object : A("inner literal") { })(Undetermined)
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [cons(anonymous object : A("inner literal") { })] = external cons(anonymous object : A("inner literal") { })(Undetermined)
+                                UIdentifier (Identifier (cons)) [UIdentifier (Identifier (cons))]
+                                USimpleNameReferenceExpression (identifier = cons, resolvesTo = null) [cons] = external cons(anonymous object : A("inner literal") { })(Undetermined)
+                                UObjectLiteralExpression [anonymous object : A("inner literal") { }] = Undetermined
+                                    ULiteralExpression (value = "inner literal") ["inner literal"] = "inner literal"
+                                    UClass (name = null) [final class null : A {...}]
                     UClass (name = InnerClass) [public final class InnerClass : A {...}]
                         UMethod (name = InnerClass) [public fun InnerClass() = UastEmptyExpression]
         UMethod (name = getAnon) [public static final fun getAnon() : A = UastEmptyExpression]
@@ -24,8 +29,15 @@ UFile (package = ) [public final class SuperCallsKt {...]
         UMethod (name = A) [public fun A(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(i.toString())(external toString()())
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i.toString())] = external <anonymous class>(i.toString())(external toString()())
+                    UIdentifier (Identifier (this)) [UIdentifier (Identifier (this))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(i.toString())(external toString()())
+                    UQualifiedReferenceExpression [i.toString()] = external toString()()
+                        USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
         UMethod (name = getStr) [public final fun getStr() : java.lang.String = UastEmptyExpression]
         UMethod (name = foo) [public fun foo(@org.jetbrains.annotations.NotNull a: long) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: long]
@@ -35,27 +47,41 @@ UFile (package = ) [public final class SuperCallsKt {...]
         UMethod (name = B) [public fun B(@org.jetbrains.annotations.NotNull param: java.lang.String) {...}]
             UParameter (name = param) [@org.jetbrains.annotations.NotNull var param: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(param)(Undetermined)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(param)] = external <anonymous class>(param)(Undetermined)
+                    UIdentifier (Identifier (A)) [UIdentifier (Identifier (A))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(param)(Undetermined)
+                    USimpleNameReferenceExpression (identifier = param) [param] = Undetermined
     UClass (name = C) [public final class C : A {...}]
         UMethod (name = C) [public fun C(@org.jetbrains.annotations.NotNull p: java.lang.String) {...}]
             UParameter (name = p) [@org.jetbrains.annotations.NotNull var p: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
+            UBlockExpression [{...}] = external <anonymous class>(p)(Undetermined)
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(p)] = external <anonymous class>(p)(Undetermined)
+                    UIdentifier (Identifier (super)) [UIdentifier (Identifier (super))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(p)(Undetermined)
+                    USimpleNameReferenceExpression (identifier = p) [p] = Undetermined
         UMethod (name = C) [public fun C(@org.jetbrains.annotations.NotNull i: int) {...}]
             UParameter (name = i) [@org.jetbrains.annotations.NotNull var i: int]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UastEmptyExpression [UastEmptyExpression] = Undetermined
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external println()()
+                UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(i)] = external <anonymous class>(i)(Undetermined)
+                    UIdentifier (Identifier (super)) [UIdentifier (Identifier (super))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(i)(Undetermined)
+                    USimpleNameReferenceExpression (identifier = i) [i] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [println()] = external println()()
+                    UIdentifier (Identifier (println)) [UIdentifier (Identifier (println))]
+                    USimpleNameReferenceExpression (identifier = println, resolvesTo = null) [println] = external println()()
         UMethod (name = foo) [public fun foo(@org.jetbrains.annotations.NotNull a: long) : void {...}]
             UParameter (name = a) [@org.jetbrains.annotations.NotNull var a: long]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            UBlockExpression [{...}] = Undetermined
-                UQualifiedReferenceExpression [super.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external foo(a)(Undetermined)
+                UQualifiedReferenceExpression [super.foo(a)] = external foo(a)(Undetermined)
                     USuperExpression (label = null) [super] = Undetermined
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [foo(a)] = external foo(a)(Undetermined)
+                        UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                        USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] = external foo(a)(Undetermined)
+                        USimpleNameReferenceExpression (identifier = a) [a] = Undetermined
     UClass (name = O) [public final class O : A {...}]
         UField (name = INSTANCE) [@null public static final var INSTANCE: O]
             UAnnotation (fqName = null) [@null]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/Suspend.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/Suspend.values.fir.txt
index 388cf9c82b6..a2afe1efc3a 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/Suspend.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/Suspend.values.fir.txt
@@ -2,17 +2,25 @@ UFile (package = test.pkg) [package test.pkg...]
     UClass (name = SuspendKt) [public final class SuspendKt {...}]
         UMethod (name = top) [public static final fun top() : int {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    UQualifiedReferenceExpression [[!] UnknownKotlinExpression (CALL_EXPRESSION).[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return <anonymous class>().inner()] = Nothing
+                    UQualifiedReferenceExpression [<anonymous class>().inner()] = external inner()()
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                            UIdentifier (Identifier (Context)) [UIdentifier (Identifier (Context))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [inner()] = external inner()()
+                            UIdentifier (Identifier (inner)) [UIdentifier (Identifier (inner))]
+                            USimpleNameReferenceExpression (identifier = inner, resolvesTo = null) [inner] = external inner()()
     UClass (name = Context) [public final class Context {...}]
         UMethod (name = Context) [public fun Context() = UastEmptyExpression]
         UMethod (name = inner) [public final fun inner() : int {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return suspendPrivate()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [suspendPrivate()] = external suspendPrivate()()
+                        UIdentifier (Identifier (suspendPrivate)) [UIdentifier (Identifier (suspendPrivate))]
+                        USimpleNameReferenceExpression (identifier = suspendPrivate, resolvesTo = null) [suspendPrivate] = external suspendPrivate()()
         UMethod (name = suspendPrivate) [private final fun suspendPrivate() : int {...}]
             UBlockExpression [{...}] = Nothing
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UReturnExpression [return inner()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [inner()] = external inner()()
+                        UIdentifier (Identifier (inner)) [UIdentifier (Identifier (inner))]
+                        USimpleNameReferenceExpression (identifier = inner, resolvesTo = null) [inner] = external inner()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/TryCatch.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/TryCatch.values.fir.txt
index 9f57d51c086..b40a8530f24 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/TryCatch.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/TryCatch.values.fir.txt
@@ -2,17 +2,23 @@ UFile (package = ) [public final class TryCatch {...]
     UClass (name = TryCatch) [public final class TryCatch {...}]
         UMethod (name = TryCatch) [public fun TryCatch() = UastEmptyExpression]
         UMethod (name = catches) [public final fun catches() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                UTryExpression [try {...}] = Undetermined
-                    UBlockExpression [{...}] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UBlockExpression [{...}] = external finalizer()()
+                UTryExpression [try {...}] = external finalizer()()
+                    UBlockExpression [{...}] = external body()()
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [body()] = external body()()
+                            UIdentifier (Identifier (body)) [UIdentifier (Identifier (body))]
+                            USimpleNameReferenceExpression (identifier = body, resolvesTo = null) [body] = external body()()
                     UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull var e: java.lang.Throwable) {...}]
                         UParameter (name = e) [@org.jetbrains.annotations.NotNull var e: java.lang.Throwable]
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                        UBlockExpression [{...}] = Undetermined
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    UBlockExpression [{...}] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                        UBlockExpression [{...}] = external catcher()()
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [catcher()] = external catcher()()
+                                UIdentifier (Identifier (catcher)) [UIdentifier (Identifier (catcher))]
+                                USimpleNameReferenceExpression (identifier = catcher, resolvesTo = null) [catcher] = external catcher()()
+                    UBlockExpression [{...}] = external finalizer()()
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [finalizer()] = external finalizer()()
+                            UIdentifier (Identifier (finalizer)) [UIdentifier (Identifier (finalizer))]
+                            USimpleNameReferenceExpression (identifier = finalizer, resolvesTo = null) [finalizer] = external finalizer()()
         UMethod (name = body) [public final fun body() : void {...}]
             UBlockExpression [{...}] = Undetermined
         UMethod (name = catcher) [public final fun catcher() : void {...}]
@@ -21,19 +27,30 @@ UFile (package = ) [public final class TryCatch {...]
             UBlockExpression [{...}] = Undetermined
     UClass (name = TryCatchAnnotations) [public final class TryCatchAnnotations {...}]
         UMethod (name = TryCatchAnnotations) [public fun TryCatchAnnotations() = UastEmptyExpression]
-        UMethod (name = catches) [public final fun catches() : void {...}]
-            UBlockExpression [{...}] = Undetermined
-                UTryExpression [try {...}] = Undetermined
-                    UBlockExpression [{...}] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull @not-implemented-annotation var e: java.lang.Throwable) {...}]
-                        UParameter (name = e) [@org.jetbrains.annotations.NotNull @not-implemented-annotation var e: java.lang.Throwable]
+        UMethod (name = catches) [@java.lang.SuppressWarnings(value = "Something")...}]
+            UAnnotation (fqName = java.lang.SuppressWarnings) [@java.lang.SuppressWarnings(value = "Something")]
+                UNamedExpression (name = value) [value = "Something"] = Undetermined
+                    ULiteralExpression (value = "Something") ["Something"] = "Something"
+            UBlockExpression [{...}] = external finalizer()()
+                UTryExpression [try {...}] = external finalizer()()
+                    UBlockExpression [{...}] = external body()()
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [body()] = external body()()
+                            UIdentifier (Identifier (body)) [UIdentifier (Identifier (body))]
+                            USimpleNameReferenceExpression (identifier = body, resolvesTo = null) [body] = external body()()
+                    UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull @java.lang.SuppressWarnings(value = "Something") var e: java.lang.Throwable) {...}]
+                        UParameter (name = e) [@org.jetbrains.annotations.NotNull @java.lang.SuppressWarnings(value = "Something") var e: java.lang.Throwable]
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-                            UAnnotation (fqName = not-implemented-annotation) [@not-implemented-annotation]
-                        UBlockExpression [{...}] = Undetermined
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    UBlockExpression [{...}] = Undetermined
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                            UAnnotation (fqName = java.lang.SuppressWarnings) [@java.lang.SuppressWarnings(value = "Something")]
+                                UNamedExpression (name = value) [value = "Something"] = Undetermined
+                                    ULiteralExpression (value = "Something") ["Something"] = "Something"
+                        UBlockExpression [{...}] = external catcher()()
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [catcher()] = external catcher()()
+                                UIdentifier (Identifier (catcher)) [UIdentifier (Identifier (catcher))]
+                                USimpleNameReferenceExpression (identifier = catcher, resolvesTo = null) [catcher] = external catcher()()
+                    UBlockExpression [{...}] = external finalizer()()
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [finalizer()] = external finalizer()()
+                            UIdentifier (Identifier (finalizer)) [UIdentifier (Identifier (finalizer))]
+                            USimpleNameReferenceExpression (identifier = finalizer, resolvesTo = null) [finalizer] = external finalizer()()
         UMethod (name = body) [public final fun body() : void {...}]
             UBlockExpression [{...}] = Undetermined
         UMethod (name = catcher) [public final fun catcher() : void {...}]
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/TypeInAnnotation.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/TypeInAnnotation.values.fir.txt
index b2756dbd82c..a6022db1282 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/TypeInAnnotation.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/TypeInAnnotation.values.fir.txt
@@ -1,5 +1,6 @@
 UFile (package = ) [public final class C {...]
     UClass (name = C) [public final class C {...}]
         UMethod (name = C) [public fun C() = UastEmptyExpression]
-        UMethod (name = foo) [public final fun foo() : void {...}]
+        UMethod (name = foo) [@null...}]
+            UAnnotation (fqName = null) [@null]
             UBlockExpression [{...}] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/TypeReferences.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/TypeReferences.values.fir.txt
index 2c2e0acb252..0f65898f512 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/TypeReferences.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/TypeReferences.values.fir.txt
@@ -20,7 +20,7 @@ UFile (package = ) [public final class TypeReferencesKt {...]
         UMethod (name = parameterizedFoo) [public static final fun parameterizedFoo(@org.jetbrains.annotations.Nullable arg: T) : void {...}]
             UParameter (name = arg) [@org.jetbrains.annotations.Nullable var arg: T]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
-            UBlockExpression [{...}] = Undetermined
+            UBlockExpression [{...}] = external parameterizedFoo(emptyList())(external emptyList()())
                 UDeclarationsExpression [var a: T = arg] = Undetermined
                     ULocalVariable (name = a) [var a: T = arg]
                         USimpleNameReferenceExpression (identifier = arg) [arg] = Undetermined
@@ -36,18 +36,46 @@ UFile (package = ) [public final class TypeReferencesKt {...]
                                     ULiteralExpression (value = null) [null] = null
                                 USimpleNameReferenceExpression (identifier = var708e23eb) [var708e23eb] = Undetermined
                                 UReturnExpression [return] = Nothing
-                UDeclarationsExpression [var tl: java.util.List<? extends T> = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = tl) [var tl: java.util.List<? extends T> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                UDeclarationsExpression [var tsl: java.util.List<? extends java.lang.String> = tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = tsl) [var tsl: java.util.List<? extends java.lang.String> = tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        UQualifiedReferenceExpression [tl.[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                            USimpleNameReferenceExpression (identifier = tl) [tl] = (var tl = Undetermined)
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var tl: java.util.List<? extends T> = listOf(at)] = Undetermined
+                    ULocalVariable (name = tl) [var tl: java.util.List<? extends T> = listOf(at)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [listOf(at)] = external listOf(at)((var at = Undetermined))
+                            UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf(at)((var at = Undetermined))
+                            USimpleNameReferenceExpression (identifier = at) [at] = (var at = Undetermined)
+                UDeclarationsExpression [var tsl: java.util.List<? extends java.lang.String> = tl.map({ var it: <ErrorType> ->...})] = Undetermined
+                    ULocalVariable (name = tsl) [var tsl: java.util.List<? extends java.lang.String> = tl.map({ var it: <ErrorType> ->...})]
+                        UQualifiedReferenceExpression [tl.map({ var it: <ErrorType> ->...})] = external map({ var it: <ErrorType> ->
+
+    return it.toString()
+})(Undetermined)
+                            USimpleNameReferenceExpression (identifier = tl) [tl] = (var tl = external listOf(at)((var at = Undetermined)))
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [map({ var it: <ErrorType> ->...})] = external map({ var it: <ErrorType> ->
+
+    return it.toString()
+})(Undetermined)
+                                UIdentifier (Identifier (map)) [UIdentifier (Identifier (map))]
+                                USimpleNameReferenceExpression (identifier = map, resolvesTo = null) [map] = external map({ var it: <ErrorType> ->
+
+    return it.toString()
+})(Undetermined)
+                                ULambdaExpression [{ var it: <ErrorType> ->...}] = Undetermined
+                                    UParameter (name = it) [var it: <ErrorType>]
+                                    UBlockExpression [{...}] = Nothing
+                                        UReturnExpression [return it.toString()] = Undetermined
+                                            UQualifiedReferenceExpression [it.toString()] = external toString()()
+                                                USimpleNameReferenceExpression (identifier = it) [it] = external it()
+                                                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] = external toString()()
+                                                    UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                                    USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] = external toString()()
                 UDeclarationsExpression [var lls: java.util.List<? extends java.util.List<? extends java.lang.String>>] = Undetermined
                     ULocalVariable (name = lls) [var lls: java.util.List<? extends java.util.List<? extends java.lang.String>>]
                 UDeclarationsExpression [var llsAliased: java.util.List] = Undetermined
                     ULocalVariable (name = llsAliased) [var llsAliased: java.util.List]
                 UDeclarationsExpression [var llt: java.util.List<? extends java.util.List<? extends T>>] = Undetermined
                     ULocalVariable (name = llt) [var llt: java.util.List<? extends java.util.List<? extends T>>]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [parameterizedFoo(emptyList())] = external parameterizedFoo(emptyList())(external emptyList()())
+                    UIdentifier (Identifier (parameterizedFoo)) [UIdentifier (Identifier (parameterizedFoo))]
+                    USimpleNameReferenceExpression (identifier = parameterizedFoo, resolvesTo = null) [parameterizedFoo] = external parameterizedFoo(emptyList())(external emptyList()())
+                    UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [emptyList()] = external emptyList()()
+                        UIdentifier (Identifier (emptyList)) [UIdentifier (Identifier (emptyList))]
+                        USimpleNameReferenceExpression (identifier = emptyList, resolvesTo = null) [emptyList] = external emptyList()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/UnexpectedContainerException.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/UnexpectedContainerException.values.fir.txt
index 8d493424cd3..122f00dd962 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/UnexpectedContainerException.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/UnexpectedContainerException.values.fir.txt
@@ -11,5 +11,7 @@ UFile (package = ) [public abstract interface Callback {...]
             UParameter (name = factory) [@org.jetbrains.annotations.NotNull var factory: kotlin.jvm.functions.Function0<? extends T>]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UThrowExpression [throw [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Nothing
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UThrowExpression [throw <anonymous class>()] = Nothing
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 0)) [<anonymous class>()] = external <anonymous class>()()
+                        UIdentifier (Identifier (UnsupportedOperationException)) [UIdentifier (Identifier (UnsupportedOperationException))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>()()
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/WhenAndDestructing.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/WhenAndDestructing.values.fir.txt
index 9cc6f67e638..c404906389a 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/WhenAndDestructing.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/WhenAndDestructing.values.fir.txt
@@ -4,9 +4,13 @@ UFile (package = ) [public final class WhenAndDestructingKt {...]
             UParameter (name = string) [@org.jetbrains.annotations.NotNull var string: java.lang.String]
                 UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             UBlockExpression [{...}] = Nothing
-                UDeclarationsExpression [var arr: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = arr) [var arr: java.util.List<? extends java.lang.String> = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var arr: java.util.List<? extends java.lang.String> = listOf("1", "2")] = Undetermined
+                    ULocalVariable (name = arr) [var arr: java.util.List<? extends java.lang.String> = listOf("1", "2")]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [listOf("1", "2")] = external listOf("1", "2")("1", "2")
+                            UIdentifier (Identifier (listOf)) [UIdentifier (Identifier (listOf))]
+                            USimpleNameReferenceExpression (identifier = listOf, resolvesTo = null) [listOf] = external listOf("1", "2")("1", "2")
+                            ULiteralExpression (value = "1") ["1"] = "1"
+                            ULiteralExpression (value = "2") ["2"] = "2"
                 USwitchExpression [switch (string)  {...] = Nothing
                     USimpleNameReferenceExpression (identifier = string) [string] = Undetermined
                     UExpressionList (when) [    "aaaa" -> {...    ] = Nothing
@@ -24,7 +28,7 @@ UFile (package = ) [public final class WhenAndDestructingKt {...]
                                 UDeclarationsExpression [@null var var837f2350: java.util.List<? extends java.lang.String> = arr] = Undetermined
                                     ULocalVariable (name = var837f2350) [@null var var837f2350: java.util.List<? extends java.lang.String> = arr]
                                         UAnnotation (fqName = null) [@null]
-                                        USimpleNameReferenceExpression (identifier = arr) [arr] = (var arr = Undetermined)
+                                        USimpleNameReferenceExpression (identifier = arr) [arr] = (var arr = external listOf("1", "2")("1", "2"))
                                 UYieldExpression [yield return bindingContext] = UYieldResult(Nothing)
                                     UReturnExpression [return bindingContext] = Nothing
                                         USimpleNameReferenceExpression (identifier = bindingContext) [bindingContext] = Undetermined
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/WhenStringLiteral.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/WhenStringLiteral.values.fir.txt
index e608dcd560d..f17d91b85ea 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/WhenStringLiteral.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/WhenStringLiteral.values.fir.txt
@@ -1,8 +1,10 @@
 UFile (package = ) [public final class WhenStringLiteralKt {...]
     UClass (name = WhenStringLiteralKt) [public final class WhenStringLiteralKt {...}]
-        UField (name = a) [@org.jetbrains.annotations.Nullable private static final var a: java.lang.String = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = a) [@org.jetbrains.annotations.Nullable private static final var a: java.lang.String = readLine()]
             UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [readLine()] = external readLine()()
+                UIdentifier (Identifier (readLine)) [UIdentifier (Identifier (readLine))]
+                USimpleNameReferenceExpression (identifier = readLine, resolvesTo = null) [readLine] = external readLine()()
         UField (name = b) [@org.jetbrains.annotations.NotNull private static final var b: int = switch (a)  {...]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
             USwitchExpression [switch (a)  {...] = Phi((long)1, (long)2)
diff --git a/uast/uast-kotlin-fir/testData/legacyValues/ea101715.values.fir.txt b/uast/uast-kotlin-fir/testData/legacyValues/ea101715.values.fir.txt
index 0e7d439ea08..527b166a558 100644
--- a/uast/uast-kotlin-fir/testData/legacyValues/ea101715.values.fir.txt
+++ b/uast/uast-kotlin-fir/testData/legacyValues/ea101715.values.fir.txt
@@ -2,9 +2,12 @@ UFile (package = ) [public final class Ea101715Kt {...]
     UClass (name = Ea101715Kt) [public final class Ea101715Kt {...}]
         UMethod (name = a) [public static final fun a() : void {...}]
             UBlockExpression [{...}] = Undetermined
-                UDeclarationsExpression [var a: Obj = [!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
-                    ULocalVariable (name = a) [var a: Obj = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)] = Undetermined
+                UDeclarationsExpression [var a: Obj = <anonymous class>(555)] = Undetermined
+                    ULocalVariable (name = a) [var a: Obj = <anonymous class>(555)]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(555)] = external <anonymous class>(555)((long)555)
+                            UIdentifier (Identifier (Obj)) [UIdentifier (Identifier (Obj))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] = external <anonymous class>(555)((long)555)
+                            ULiteralExpression (value = 555) [555] = (long)555
     UClass (name = Obj) [public final class Obj {...}]
         UField (name = INSTANCE) [@null public static final var INSTANCE: Obj]
             UAnnotation (fqName = null) [@null]
diff --git a/uast/uast-kotlin-fir/testData/type/accessArrayOfInlineClass.types.fir.txt b/uast/uast-kotlin-fir/testData/type/accessArrayOfInlineClass.types.fir.txt
index 4470981dfc9..7811b978fd1 100644
--- a/uast/uast-kotlin-fir/testData/type/accessArrayOfInlineClass.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/accessArrayOfInlineClass.types.fir.txt
@@ -1,28 +1,45 @@
 UFile (package = ) [public final class AccessArrayOfInlineClassKt {...]
     UClass (name = AccessArrayOfInlineClassKt) [public final class AccessArrayOfInlineClassKt {...}]
-        UField (name = xs) [@org.jetbrains.annotations.NotNull private static final var xs: Z[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
+        UField (name = xs) [@org.jetbrains.annotations.NotNull private static final var xs: Z[] = <anonymous class>(2, { var it: <ErrorType> ->...})]
             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
-            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(2, { var it: <ErrorType> ->...})] : PsiType:Z[]
+                UIdentifier (Identifier (Array)) [UIdentifier (Identifier (Array))]
+                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Z[]
+                ULiteralExpression (value = 2) [2] : PsiType:int
+                ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super Integer, ? extends Z>
+                    UParameter (name = it) [var it: <ErrorType>]
+                    UBlockExpression [{...}] : PsiType:Z
+                        UReturnExpression [return <anonymous class>(42)]
+                            UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(42)] : PsiType:Z
+                                UIdentifier (Identifier (Z)) [UIdentifier (Identifier (Z))]
+                                USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Z
+                                ULiteralExpression (value = 42) [42] : PsiType:int
         UMethod (name = getXs) [public static final fun getXs() : Z[] = UastEmptyExpression]
         UMethod (name = box) [public static final fun box() : java.lang.String {...}]
             UBlockExpression [{...}] : PsiType:Void
-                UBinaryExpression (operator = =) [xs[0] = [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UBinaryExpression (operator = =) [xs[0] = <anonymous class>(12)] : PsiType:Unit
                     UArrayAccessExpression [xs[0]] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = xs) [xs] : PsiType:Z[]
                         ULiteralExpression (value = 0) [0] : PsiType:int
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(12)] : PsiType:Z
+                        UIdentifier (Identifier (Z)) [UIdentifier (Identifier (Z))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Z
+                        ULiteralExpression (value = 12) [12] : PsiType:int
                 UDeclarationsExpression [var t: Z = xs[0]]
                     ULocalVariable (name = t) [var t: Z = xs[0]]
                         UArrayAccessExpression [xs[0]] : PsiType:Z
                             USimpleNameReferenceExpression (identifier = xs) [xs] : PsiType:Z[]
                             ULiteralExpression (value = 0) [0] : PsiType:int
-                UIfExpression [if (t.data != 12) throw [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Unit
+                UIfExpression [if (t.data != 12) throw <anonymous class>(t)] : PsiType:Unit
                     UBinaryExpression (operator = !=) [t.data != 12] : PsiType:boolean
                         UQualifiedReferenceExpression [t.data] : PsiType:int
                             USimpleNameReferenceExpression (identifier = t) [t] : PsiType:Z
                             USimpleNameReferenceExpression (identifier = data) [data] : PsiType:int
                         ULiteralExpression (value = 12) [12] : PsiType:int
-                    UThrowExpression [throw [!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:Void
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                    UThrowExpression [throw <anonymous class>(t)] : PsiType:Void
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 1)) [<anonymous class>(t)] : PsiType:AssertionError
+                            UIdentifier (Identifier (AssertionError)) [UIdentifier (Identifier (AssertionError))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:AssertionError
+                            USimpleNameReferenceExpression (identifier = t) [t] : PsiType:Z
                 UReturnExpression [return "OK"] : PsiType:Void
                     ULiteralExpression (value = "OK") ["OK"] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/type/arrayConstructorsSimple.types.fir.txt b/uast/uast-kotlin-fir/testData/type/arrayConstructorsSimple.types.fir.txt
index 6a8b42da269..7da9e3a101a 100644
--- a/uast/uast-kotlin-fir/testData/type/arrayConstructorsSimple.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/arrayConstructorsSimple.types.fir.txt
@@ -3,35 +3,129 @@ UFile (package = ) [import kotlin.test.assertEquals...]
     UClass (name = ArrayConstructorsSimpleKt) [public final class ArrayConstructorsSimpleKt {...}]
         UMethod (name = simpleIntArray) [public static final fun simpleIntArray() : java.lang.Integer[] {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>(3, { var it: <ErrorType> ->...})]
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(3, { var it: <ErrorType> ->...})] : PsiType:Integer[]
+                        UIdentifier (Identifier (Array)) [UIdentifier (Identifier (Array))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Integer[]
+                        ULiteralExpression (value = 3) [3] : PsiType:int
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super Integer, ? extends Integer>
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] : PsiType:int
+                                UReturnExpression [return it]
+                                    USimpleNameReferenceExpression (identifier = it) [it] : PsiType:int
         UMethod (name = simpleDoubleArray) [public static final fun simpleDoubleArray() : java.lang.Double[] {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>(3, { var it: <ErrorType> ->...})]
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(3, { var it: <ErrorType> ->...})] : PsiType:Double[]
+                        UIdentifier (Identifier (Array)) [UIdentifier (Identifier (Array))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:Double[]
+                        ULiteralExpression (value = 3) [3] : PsiType:int
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super Integer, ? extends Double>
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] : PsiType:double
+                                UReturnExpression [return it.toDouble() + 0.1]
+                                    UBinaryExpression (operator = +) [it.toDouble() + 0.1] : PsiType:double
+                                        UQualifiedReferenceExpression [it.toDouble()] : PsiType:double
+                                            USimpleNameReferenceExpression (identifier = it) [it] : PsiType:int
+                                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toDouble()] : PsiType:double
+                                                UIdentifier (Identifier (toDouble)) [UIdentifier (Identifier (toDouble))]
+                                                USimpleNameReferenceExpression (identifier = toDouble, resolvesTo = null) [toDouble] : PsiType:double
+                                        ULiteralExpression (value = 0.1) [0.1] : PsiType:double
         UMethod (name = simpleStringArray) [public static final fun simpleStringArray() : java.lang.String[] {...}]
             UBlockExpression [{...}]
-                UReturnExpression [return [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UReturnExpression [return <anonymous class>(3, { var it: <ErrorType> ->...})]
+                    UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(3, { var it: <ErrorType> ->...})] : PsiType:String[]
+                        UIdentifier (Identifier (Array)) [UIdentifier (Identifier (Array))]
+                        USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:String[]
+                        ULiteralExpression (value = 3) [3] : PsiType:int
+                        ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super Integer, ? extends String>
+                            UParameter (name = it) [var it: <ErrorType>]
+                            UBlockExpression [{...}] : PsiType:String
+                                UReturnExpression [return it.toString()]
+                                    UQualifiedReferenceExpression [it.toString()] : PsiType:String
+                                        USimpleNameReferenceExpression (identifier = it) [it] : PsiType:int
+                                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                                            UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                            USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
         UMethod (name = box) [public static final fun box() : java.lang.String {...}]
             UBlockExpression [{...}] : PsiType:Void
-                UDeclarationsExpression [var ia: java.lang.Integer[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = ia) [var ia: java.lang.Integer[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var da: java.lang.Double[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = da) [var da: java.lang.Double[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                UDeclarationsExpression [var sa: java.lang.String[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = sa) [var sa: java.lang.String[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var ia: java.lang.Integer[] = simpleIntArray()]
+                    ULocalVariable (name = ia) [var ia: java.lang.Integer[] = simpleIntArray()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleIntArray()] : PsiType:Integer[]
+                            UIdentifier (Identifier (simpleIntArray)) [UIdentifier (Identifier (simpleIntArray))]
+                            USimpleNameReferenceExpression (identifier = simpleIntArray, resolvesTo = null) [simpleIntArray] : PsiType:Integer[]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(0, ia[0])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = 0) [0] : PsiType:int
+                    UArrayAccessExpression [ia[0]] : PsiType:int
+                        USimpleNameReferenceExpression (identifier = ia) [ia] : PsiType:Integer[]
+                        ULiteralExpression (value = 0) [0] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(1, ia[1])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = 1) [1] : PsiType:int
+                    UArrayAccessExpression [ia[1]] : PsiType:int
+                        USimpleNameReferenceExpression (identifier = ia) [ia] : PsiType:Integer[]
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(2, ia[2])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = 2) [2] : PsiType:int
+                    UArrayAccessExpression [ia[2]] : PsiType:int
+                        USimpleNameReferenceExpression (identifier = ia) [ia] : PsiType:Integer[]
+                        ULiteralExpression (value = 2) [2] : PsiType:int
+                UDeclarationsExpression [var da: java.lang.Double[] = simpleDoubleArray()]
+                    ULocalVariable (name = da) [var da: java.lang.Double[] = simpleDoubleArray()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleDoubleArray()] : PsiType:Double[]
+                            UIdentifier (Identifier (simpleDoubleArray)) [UIdentifier (Identifier (simpleDoubleArray))]
+                            USimpleNameReferenceExpression (identifier = simpleDoubleArray, resolvesTo = null) [simpleDoubleArray] : PsiType:Double[]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(0.1, da[0])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = 0.1) [0.1] : PsiType:double
+                    UArrayAccessExpression [da[0]] : PsiType:double
+                        USimpleNameReferenceExpression (identifier = da) [da] : PsiType:Double[]
+                        ULiteralExpression (value = 0) [0] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(1.1, da[1])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = 1.1) [1.1] : PsiType:double
+                    UArrayAccessExpression [da[1]] : PsiType:double
+                        USimpleNameReferenceExpression (identifier = da) [da] : PsiType:Double[]
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>(2.1, da[2])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = 2.1) [2.1] : PsiType:double
+                    UArrayAccessExpression [da[2]] : PsiType:double
+                        USimpleNameReferenceExpression (identifier = da) [da] : PsiType:Double[]
+                        ULiteralExpression (value = 2) [2] : PsiType:int
+                UDeclarationsExpression [var sa: java.lang.String[] = simpleStringArray()]
+                    ULocalVariable (name = sa) [var sa: java.lang.String[] = simpleStringArray()]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [simpleStringArray()] : PsiType:String[]
+                            UIdentifier (Identifier (simpleStringArray)) [UIdentifier (Identifier (simpleStringArray))]
+                            USimpleNameReferenceExpression (identifier = simpleStringArray, resolvesTo = null) [simpleStringArray] : PsiType:String[]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>("0", sa[0])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = "0") ["0"] : PsiType:String
+                    UArrayAccessExpression [sa[0]] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = sa) [sa] : PsiType:String[]
+                        ULiteralExpression (value = 0) [0] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>("1", sa[1])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = "1") ["1"] : PsiType:String
+                    UArrayAccessExpression [sa[1]] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = sa) [sa] : PsiType:String[]
+                        ULiteralExpression (value = 1) [1] : PsiType:int
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [<anonymous class>("2", sa[2])] : PsiType:NonExistentClass
+                    UIdentifier (Identifier (assertEquals)) [UIdentifier (Identifier (assertEquals))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:NonExistentClass
+                    ULiteralExpression (value = "2") ["2"] : PsiType:String
+                    UArrayAccessExpression [sa[2]] : PsiType:String
+                        USimpleNameReferenceExpression (identifier = sa) [sa] : PsiType:String[]
+                        ULiteralExpression (value = 2) [2] : PsiType:int
                 UReturnExpression [return "OK"] : PsiType:Void
                     ULiteralExpression (value = "OK") ["OK"] : PsiType:String
diff --git a/uast/uast-kotlin-fir/testData/type/arrayGetAssignMultiIndex.types.fir.txt b/uast/uast-kotlin-fir/testData/type/arrayGetAssignMultiIndex.types.fir.txt
index 1fe52b98675..876f3ed0d74 100644
--- a/uast/uast-kotlin-fir/testData/type/arrayGetAssignMultiIndex.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/arrayGetAssignMultiIndex.types.fir.txt
@@ -33,9 +33,17 @@ UFile (package = ) [public final class ArrayGetAssignMultiIndexKt {...]
                     USimpleNameReferenceExpression (identifier = elem) [elem] : PsiType:String
         UMethod (name = box) [public static final fun box() : java.lang.String {...}]
             UBlockExpression [{...}] : PsiType:Void
-                UDeclarationsExpression [var s: java.lang.String[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                    ULocalVariable (name = s) [var s: java.lang.String[] = [!] UnknownKotlinExpression (CALL_EXPRESSION)]
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var s: java.lang.String[] = <anonymous class>(1, { var it: <ErrorType> ->...})]
+                    ULocalVariable (name = s) [var s: java.lang.String[] = <anonymous class>(1, { var it: <ErrorType> ->...})]
+                        UCallExpression (kind = UastCallKind(name='constructor_call'), argCount = 2)) [<anonymous class>(1, { var it: <ErrorType> ->...})] : PsiType:String[]
+                            UIdentifier (Identifier (Array)) [UIdentifier (Identifier (Array))]
+                            USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>] : PsiType:String[]
+                            ULiteralExpression (value = 1) [1] : PsiType:int
+                            ULambdaExpression [{ var it: <ErrorType> ->...}] : PsiType:Function1<? super Integer, ? extends String>
+                                UParameter (name = it) [var it: <ErrorType>]
+                                UBlockExpression [{...}] : PsiType:String
+                                    UReturnExpression [return ""]
+                                        ULiteralExpression (value = "") [""] : PsiType:String
                 UBinaryExpression (operator = =) [s[1, --1] = "O"] : PsiType:Unit
                     UArrayAccessExpression [s[1, --1]] : PsiType:Unit
                         USimpleNameReferenceExpression (identifier = s) [s] : PsiType:String[]
diff --git a/uast/uast-kotlin-fir/testData/type/typeCast.types.fir.txt b/uast/uast-kotlin-fir/testData/type/typeCast.types.fir.txt
index 000b8abaa60..5e710fbbad6 100644
--- a/uast/uast-kotlin-fir/testData/type/typeCast.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/typeCast.types.fir.txt
@@ -22,10 +22,13 @@ UFile (package = ) [import java.lang.Runnable...]
                             UTypeReferenceExpression (name = java.lang.Runnable) [java.lang.Runnable]
         UMethod (name = box) [public static final fun box() : java.lang.String {...}]
             UBlockExpression [{...}] : PsiType:Void
-                UDeclarationsExpression [var x: java.lang.Object = [!] UnknownKotlinExpression (CALL_EXPRESSION) as java.lang.Object]
-                    ULocalVariable (name = x) [var x: java.lang.Object = [!] UnknownKotlinExpression (CALL_EXPRESSION) as java.lang.Object]
-                        UBinaryExpressionWithType [[!] UnknownKotlinExpression (CALL_EXPRESSION) as java.lang.Object] : PsiType:Object
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var x: java.lang.Object = stringConsumer("Hi") as java.lang.Object]
+                    ULocalVariable (name = x) [var x: java.lang.Object = stringConsumer("Hi") as java.lang.Object]
+                        UBinaryExpressionWithType [stringConsumer("Hi") as java.lang.Object] : PsiType:Object
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [stringConsumer("Hi")] : PsiType:Unit
+                                UIdentifier (Identifier (stringConsumer)) [UIdentifier (Identifier (stringConsumer))]
+                                USimpleNameReferenceExpression (identifier = stringConsumer, resolvesTo = null) [stringConsumer] : PsiType:Unit
+                                ULiteralExpression (value = "Hi") ["Hi"] : PsiType:String
                             UTypeReferenceExpression (name = java.lang.Object) [java.lang.Object]
                 UIfExpression [if (x != Unit) return "Fail: " + x] : PsiType:Unit
                     UBinaryExpression (operator = !=) [x != Unit] : PsiType:boolean
@@ -35,10 +38,13 @@ UFile (package = ) [import java.lang.Runnable...]
                         UPolyadicExpression (operator = +) ["Fail: " + x] : PsiType:String
                             ULiteralExpression (value = "Fail: ") ["Fail: "] : PsiType:String
                             USimpleNameReferenceExpression (identifier = x) [x] : PsiType:Object
-                UDeclarationsExpression [var y: java.lang.Object = [!] UnknownKotlinExpression (CALL_EXPRESSION) as java.lang.Object]
-                    ULocalVariable (name = y) [var y: java.lang.Object = [!] UnknownKotlinExpression (CALL_EXPRESSION) as java.lang.Object]
-                        UBinaryExpressionWithType [[!] UnknownKotlinExpression (CALL_EXPRESSION) as java.lang.Object] : PsiType:Object
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UDeclarationsExpression [var y: java.lang.Object = stringConsumer("Hi, again") as java.lang.Object]
+                    ULocalVariable (name = y) [var y: java.lang.Object = stringConsumer("Hi, again") as java.lang.Object]
+                        UBinaryExpressionWithType [stringConsumer("Hi, again") as java.lang.Object] : PsiType:Object
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [stringConsumer("Hi, again")] : PsiType:Unit
+                                UIdentifier (Identifier (stringConsumer)) [UIdentifier (Identifier (stringConsumer))]
+                                USimpleNameReferenceExpression (identifier = stringConsumer, resolvesTo = null) [stringConsumer] : PsiType:Unit
+                                ULiteralExpression (value = "Hi, again") ["Hi, again"] : PsiType:String
                             UTypeReferenceExpression (name = java.lang.Object) [java.lang.Object]
                 UIfExpression [if (y != Unit) return "Fail: " + y] : PsiType:Unit
                     UBinaryExpression (operator = !=) [y != Unit] : PsiType:boolean
@@ -54,9 +60,13 @@ UFile (package = ) [import java.lang.Runnable...]
                             UClass (name = null) [final class null : java.lang.Runnable {...}]
                                 UMethod (name = run) [public fun run() : void {...}]
                                     UBlockExpression [{...}] : PsiType:Unit
-                UIfExpression [if ([!] UnknownKotlinExpression (CALL_EXPRESSION) !== UastEmptyExpression <other> UastEmptyExpression) return "Fail: " + r] : PsiType:Unit
-                    UBinaryExpression (operator = !==) [[!] UnknownKotlinExpression (CALL_EXPRESSION) !== UastEmptyExpression <other> UastEmptyExpression] : PsiType:boolean
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UIfExpression [if (foo(r, true) !== UastEmptyExpression <other> UastEmptyExpression) return "Fail: " + r] : PsiType:Unit
+                    UBinaryExpression (operator = !==) [foo(r, true) !== UastEmptyExpression <other> UastEmptyExpression] : PsiType:boolean
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [foo(r, true)] : PsiType:Runnable
+                            UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                            USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Runnable
+                            USimpleNameReferenceExpression (identifier = r) [r] : PsiType:Object
+                            ULiteralExpression (value = true) [true] : PsiType:boolean
                         UBinaryExpression (operator = <other>) [UastEmptyExpression <other> UastEmptyExpression] : PsiType:NonExistentClass
                             UastEmptyExpression [UastEmptyExpression]
                             UastEmptyExpression [UastEmptyExpression]
@@ -64,9 +74,13 @@ UFile (package = ) [import java.lang.Runnable...]
                         UPolyadicExpression (operator = +) ["Fail: " + r] : PsiType:String
                             ULiteralExpression (value = "Fail: ") ["Fail: "] : PsiType:String
                             USimpleNameReferenceExpression (identifier = r) [r] : PsiType:Object
-                UIfExpression [if ([!] UnknownKotlinExpression (CALL_EXPRESSION) !== UastEmptyExpression <other> UastEmptyExpression) return "Fail: " + r] : PsiType:Unit
-                    UBinaryExpression (operator = !==) [[!] UnknownKotlinExpression (CALL_EXPRESSION) !== UastEmptyExpression <other> UastEmptyExpression] : PsiType:boolean
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UIfExpression [if (foo(r, false) !== UastEmptyExpression <other> UastEmptyExpression) return "Fail: " + r] : PsiType:Unit
+                    UBinaryExpression (operator = !==) [foo(r, false) !== UastEmptyExpression <other> UastEmptyExpression] : PsiType:boolean
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 2)) [foo(r, false)] : PsiType:Runnable
+                            UIdentifier (Identifier (foo)) [UIdentifier (Identifier (foo))]
+                            USimpleNameReferenceExpression (identifier = foo, resolvesTo = null) [foo] : PsiType:Runnable
+                            USimpleNameReferenceExpression (identifier = r) [r] : PsiType:Object
+                            ULiteralExpression (value = false) [false] : PsiType:boolean
                         UBinaryExpression (operator = <other>) [UastEmptyExpression <other> UastEmptyExpression] : PsiType:NonExistentClass
                             UastEmptyExpression [UastEmptyExpression]
                             UastEmptyExpression [UastEmptyExpression]
diff --git a/uast/uast-kotlin-fir/testData/type/typeCheck.types.fir.txt b/uast/uast-kotlin-fir/testData/type/typeCheck.types.fir.txt
index da891c8b236..33faa46394d 100644
--- a/uast/uast-kotlin-fir/testData/type/typeCheck.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/typeCheck.types.fir.txt
@@ -4,12 +4,14 @@ UFile (package = ) [public final class TypeCheckKt {...]
             UParameter (name = $this$asString) [@org.jetbrains.annotations.Nullable var $this$asString: java.lang.Object]
                 UAnnotation (fqName = org.jetbrains.annotations.Nullable) [@org.jetbrains.annotations.Nullable]
             UBlockExpression [{...}] : PsiType:Void
-                UReturnExpression [return if (x !is java.lang.String) x.[!] UnknownKotlinExpression (CALL_EXPRESSION) else x] : PsiType:Void
-                    UIfExpression [if (x !is java.lang.String) x.[!] UnknownKotlinExpression (CALL_EXPRESSION) else x] : PsiType:String
+                UReturnExpression [return if (x !is java.lang.String) x.toString() else x] : PsiType:Void
+                    UIfExpression [if (x !is java.lang.String) x.toString() else x] : PsiType:String
                         UBinaryExpressionWithType [x !is java.lang.String] : PsiType:boolean
                             USimpleNameReferenceExpression (identifier = x) [x] : PsiType:NonExistentClass
                             UTypeReferenceExpression (name = java.lang.String) [java.lang.String]
-                        UQualifiedReferenceExpression [x.[!] UnknownKotlinExpression (CALL_EXPRESSION)] : PsiType:String
+                        UQualifiedReferenceExpression [x.toString()] : PsiType:String
                             USimpleNameReferenceExpression (identifier = x) [x] : PsiType:NonExistentClass
-                            [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                            UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [toString()] : PsiType:String
+                                UIdentifier (Identifier (toString)) [UIdentifier (Identifier (toString))]
+                                USimpleNameReferenceExpression (identifier = toString, resolvesTo = null) [toString] : PsiType:String
                         USimpleNameReferenceExpression (identifier = x) [x] : PsiType:NonExistentClass
diff --git a/uast/uast-kotlin-fir/testData/type/unresolved.types.fir.txt b/uast/uast-kotlin-fir/testData/type/unresolved.types.fir.txt
index 9da84e59982..3d1f055f7f0 100644
--- a/uast/uast-kotlin-fir/testData/type/unresolved.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/unresolved.types.fir.txt
@@ -14,7 +14,10 @@ UFile (package = ) [public final class UnresolvedKt {...]
             UParameter (name = prop) [@null var prop: error.NonExistentClass]
                 UAnnotation (fqName = null) [@null]
             UBlockExpression [{...}]
-                UastEmptyExpression [UastEmptyExpression]
+                UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [<anonymous class>(prop)]
+                    UIdentifier (Identifier (UnresolvedBase)) [UIdentifier (Identifier (UnresolvedBase))]
+                    USimpleNameReferenceExpression (identifier = <anonymous class>, resolvesTo = null) [<anonymous class>]
+                    USimpleNameReferenceExpression (identifier = prop) [prop] : PsiType:NonExistentClass
         UMethod (name = getProp) [public final fun getProp() : error.NonExistentClass = UastEmptyExpression]
         UMethod (name = bar) [public fun bar() : error.NonExistentClass {...}]
             UBlockExpression [{...}] : PsiType:Unit
diff --git a/uast/uast-kotlin-fir/testData/type/withGeneric.types.fir.txt b/uast/uast-kotlin-fir/testData/type/withGeneric.types.fir.txt
index f2b7c93d0d5..aae4bc9b50f 100644
--- a/uast/uast-kotlin-fir/testData/type/withGeneric.types.fir.txt
+++ b/uast/uast-kotlin-fir/testData/type/withGeneric.types.fir.txt
@@ -30,15 +30,19 @@ UFile (package = ) [public final class WithGenericKt {...]
                     UTypeReferenceExpression (name = java.lang.String) [java.lang.String]
         UMethod (name = box) [public static final fun box() : java.lang.String {...}]
             UBlockExpression [{...}] : PsiType:Void
-                UIfExpression [if ([!] UnknownKotlinExpression (CALL_EXPRESSION) != null) return "fail: test1"] : PsiType:Unit
-                    UBinaryExpression (operator = !=) [[!] UnknownKotlinExpression (CALL_EXPRESSION) != null] : PsiType:boolean
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UIfExpression [if (test1() != null) return "fail: test1"] : PsiType:Unit
+                    UBinaryExpression (operator = !=) [test1() != null] : PsiType:boolean
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [test1()] : PsiType:Integer
+                            UIdentifier (Identifier (test1)) [UIdentifier (Identifier (test1))]
+                            USimpleNameReferenceExpression (identifier = test1, resolvesTo = null) [test1] : PsiType:Integer
                         ULiteralExpression (value = null) [null] : PsiType:Void
                     UReturnExpression [return "fail: test1"] : PsiType:Void
                         ULiteralExpression (value = "fail: test1") ["fail: test1"] : PsiType:String
-                UIfExpression [if ([!] UnknownKotlinExpression (CALL_EXPRESSION) != null) return "fail: test2"] : PsiType:Unit
-                    UBinaryExpression (operator = !=) [[!] UnknownKotlinExpression (CALL_EXPRESSION) != null] : PsiType:boolean
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                UIfExpression [if (test2() != null) return "fail: test2"] : PsiType:Unit
+                    UBinaryExpression (operator = !=) [test2() != null] : PsiType:boolean
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [test2()] : PsiType:Integer
+                            UIdentifier (Identifier (test2)) [UIdentifier (Identifier (test2))]
+                            USimpleNameReferenceExpression (identifier = test2, resolvesTo = null) [test2] : PsiType:Integer
                         ULiteralExpression (value = null) [null] : PsiType:Void
                     UReturnExpression [return "fail: test2"] : PsiType:Void
                         ULiteralExpression (value = "fail: test2") ["fail: test2"] : PsiType:String
@@ -47,7 +51,9 @@ UFile (package = ) [public final class WithGenericKt {...]
                         ULiteralExpression (value = "fail") ["fail"] : PsiType:String
                 UTryExpression [try {...] : PsiType:Object
                     UBlockExpression [{...}] : PsiType:int
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 0)) [test3()] : PsiType:int
+                            UIdentifier (Identifier (test3)) [UIdentifier (Identifier (test3))]
+                            USimpleNameReferenceExpression (identifier = test3, resolvesTo = null) [test3] : PsiType:int
                     UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull var e: java.lang.NullPointerException) {...}]
                         UParameter (name = e) [@org.jetbrains.annotations.NotNull var e: java.lang.NullPointerException]
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
@@ -63,7 +69,10 @@ UFile (package = ) [public final class WithGenericKt {...]
                         ULiteralExpression (value = "fail: test3") ["fail: test3"] : PsiType:String
                 UTryExpression [try {...] : PsiType:Unit
                     UBlockExpression [{...}] : PsiType:Unit
-                        [!] UnknownKotlinExpression (CALL_EXPRESSION) [[!] UnknownKotlinExpression (CALL_EXPRESSION)]
+                        UCallExpression (kind = UastCallKind(name='method_call'), argCount = 1)) [castToString(null)] : PsiType:Unit
+                            UIdentifier (Identifier (castToString)) [UIdentifier (Identifier (castToString))]
+                            USimpleNameReferenceExpression (identifier = castToString, resolvesTo = null) [castToString] : PsiType:Unit
+                            ULiteralExpression (value = null) [null] : PsiType:Void
                     UCatchClause (e) [catch (@org.jetbrains.annotations.NotNull var e: java.lang.Exception) {...}]
                         UParameter (name = e) [@org.jetbrains.annotations.NotNull var e: java.lang.Exception]
                             UAnnotation (fqName = org.jetbrains.annotations.NotNull) [@org.jetbrains.annotations.NotNull]
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinConverter.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinConverter.kt
index 4f278ba3a51..11ab26f99e6 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinConverter.kt
+++ b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinConverter.kt
@@ -5,20 +5,16 @@

 package org.jetbrains.uast.kotlin

-import com.intellij.openapi.components.ServiceManager
 import com.intellij.openapi.util.registry.Registry
 import com.intellij.psi.*
-import com.intellij.psi.impl.source.tree.LeafPsiElement
 import org.jetbrains.annotations.TestOnly
 import org.jetbrains.kotlin.asJava.LightClassUtil
 import org.jetbrains.kotlin.asJava.classes.KtLightClass
 import org.jetbrains.kotlin.asJava.elements.*
 import org.jetbrains.kotlin.asJava.findFacadeClass
 import org.jetbrains.kotlin.asJava.toLightClass
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocName
 import org.jetbrains.kotlin.lexer.KtTokens
 import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
 import org.jetbrains.kotlin.utils.addToStdlib.safeAs
 import org.jetbrains.uast.*
 import org.jetbrains.uast.expressions.UInjectionHost
@@ -27,116 +23,16 @@ import org.jetbrains.uast.kotlin.psi.*

 internal object KotlinConverter : BaseKotlinConverter {

-    override fun convertAnnotation(annotationEntry: KtAnnotationEntry, givenParent: UElement?): UAnnotation {
-        return KotlinUAnnotation(annotationEntry, givenParent)
-    }
-
-    override fun convertPsiElement(
-        element: PsiElement?,
-        givenParent: UElement?,
-        requiredTypes: Array<out Class<out UElement>>
-    ): UElement? {
-        if (element == null) return null
-
-        fun <P : PsiElement> build(ctor: (P, UElement?) -> UElement): () -> UElement? {
-            return {
-                @Suppress("UNCHECKED_CAST")
-                ctor(element as P, givenParent)
-            }
-        }
-
-        return with (requiredTypes) { when (element) {
-            is KtParameterList -> el<UDeclarationsExpression> {
-                val declarationsExpression = KotlinUDeclarationsExpression(null, givenParent, null)
-                declarationsExpression.apply {
-                    declarations = element.parameters.mapIndexed { i, p ->
-                        KotlinUParameter(UastKotlinPsiParameter.create(p, element, declarationsExpression, i), p, this)
-                    }
-                }
-            }
-            is KtClassBody -> el<UExpressionList>(build(KotlinUExpressionList.Companion::createClassBody))
-            is KtCatchClause -> el<UCatchClause>(build(::KotlinUCatchClause))
-            is KtVariableDeclaration ->
-                if (element is KtProperty && !element.isLocal) {
-                    convertNonLocalProperty(element, givenParent, this).firstOrNull()
-                }
-                else {
-                    el<UVariable> { convertVariablesDeclaration(element, givenParent).declarations.singleOrNull() }
-                        ?: expr<UDeclarationsExpression> { convertExpression(element, givenParent, requiredTypes) }
-                }
-
-            is KtExpression -> convertExpression(element, givenParent, requiredTypes)
-            is KtLambdaArgument -> element.getLambdaExpression()?.let { convertExpression(it, givenParent, requiredTypes) }
-            is KtLightElementBase -> {
-                val expression = element.kotlinOrigin
-                when (expression) {
-                    is KtExpression -> convertExpression(expression, givenParent, requiredTypes)
-                    else -> el<UExpression> { UastEmptyExpression(givenParent) }
-                }
-            }
-            is KtLiteralStringTemplateEntry, is KtEscapeStringTemplateEntry ->
-                el<ULiteralExpression>(build(::KotlinStringULiteralExpression))
-            is KtStringTemplateEntry ->
-                element.expression?.let { convertExpression(it, givenParent, requiredTypes) }
-                    ?: expr<UExpression> { UastEmptyExpression(givenParent) }
-            is KtWhenEntry -> el<USwitchClauseExpressionWithBody>(build(::KotlinUSwitchEntry))
-            is KtWhenCondition -> convertWhenCondition(element, givenParent, requiredTypes)
-            is KtTypeReference ->
-                requiredTypes.accommodate(
-                    alternative { KotlinUTypeReferenceExpression(element, givenParent) },
-                    alternative { convertReceiverParameter(element) }
-                ).firstOrNull()
-            is KtConstructorDelegationCall ->
-                el<UCallExpression> { KotlinUFunctionCallExpression(element, givenParent) }
-            is KtSuperTypeCallEntry ->
-                el<UExpression> {
-                    (element.getParentOfType<KtClassOrObject>(true)?.parent as? KtObjectLiteralExpression)
-                        ?.toUElementOfType<UExpression>()
-                        ?: KotlinUFunctionCallExpression(element, givenParent)
-                }
-            is KtImportDirective -> el<UImportStatement>(build(::KotlinUImportStatement))
-            is PsiComment -> el<UComment>(build(::UComment))
-            is KDocName -> {
-                if (element.getQualifier() == null)
-                    el<USimpleNameReferenceExpression> {
-                        element.lastChild?.let { psiIdentifier ->
-                            KotlinStringUSimpleReferenceExpression(psiIdentifier.text, givenParent, element, element)
-                        }
-                    }
-                else el<UQualifiedReferenceExpression>(build(::KotlinDocUQualifiedReferenceExpression))
-            }
-            else -> {
-                if (element is LeafPsiElement) {
-                    if (element.elementType in identifiersTokens)
-                        if (element.elementType != KtTokens.OBJECT_KEYWORD ||
-                            element.getParentOfType<KtObjectDeclaration>(false)?.nameIdentifier == null
-                        )
-                            el<UIdentifier>(build(::KotlinUIdentifier))
-                        else null
-                    else if (element.elementType in KtTokens.OPERATIONS && element.parent is KtOperationReferenceExpression)
-                        el<UIdentifier>(build(::KotlinUIdentifier))
-                    else if (element.elementType == KtTokens.LBRACKET && element.parent is KtCollectionLiteralExpression)
-                        el<UIdentifier> {
-                            UIdentifier(
-                                element,
-                                KotlinUCollectionLiteralExpression(
-                                    element.parent as KtCollectionLiteralExpression,
-                                    null
-                                )
-                            )
-                        }
-                    else null
-                } else null
-            }
-        }}
-    }
-
     var forceUInjectionHost = Registry.`is`("kotlin.uast.force.uinjectionhost", false)
         @TestOnly
         set(value) {
             field = value
         }

+    override fun forceUInjectionHost(): Boolean {
+        return forceUInjectionHost
+    }
+
     override fun convertExpression(
         expression: KtExpression,
         givenParent: UElement?,
@@ -154,16 +50,20 @@ internal object KotlinConverter : BaseKotlinConverter {

             is KtStringTemplateExpression -> {
                 when {
-                    forceUInjectionHost || requiredTypes.contains(UInjectionHost::class.java) ->
+                    forceUInjectionHost || requiredTypes.contains(UInjectionHost::class.java) -> {
                         expr<UInjectionHost> { KotlinStringTemplateUPolyadicExpression(expression, givenParent) }
+                    }
                     expression.entries.isEmpty() -> {
                         expr<ULiteralExpression> { KotlinStringULiteralExpression(expression, givenParent, "") }
                     }
-
-                    expression.entries.size == 1 -> convertEntry(expression.entries[0], givenParent, requiredTypes)
-
-                    else ->
-                        expr<KotlinStringTemplateUPolyadicExpression> { KotlinStringTemplateUPolyadicExpression(expression, givenParent) }
+                    expression.entries.size == 1 -> {
+                        convertStringTemplateEntry(expression.entries[0], givenParent, requiredTypes)
+                    }
+                    else -> {
+                        expr<KotlinStringTemplateUPolyadicExpression> {
+                            KotlinStringTemplateUPolyadicExpression(expression, givenParent)
+                        }
+                    }
                 }
             }
             is KtDestructuringDeclaration -> expr<UDeclarationsExpression> {
@@ -255,16 +155,6 @@ internal object KotlinConverter : BaseKotlinConverter {
         }}
     }

-    private fun convertEnumEntry(original: KtEnumEntry, givenParent: UElement?): UElement? {
-        return LightClassUtil.getLightClassBackingField(original)?.let { psiField ->
-            if (psiField is KtLightField && psiField is PsiEnumConstant) {
-                KotlinUEnumConstant(psiField, psiField.kotlinOrigin, givenParent)
-            } else {
-                null
-            }
-        }
-    }
-
     override fun convertDeclaration(
         element: PsiElement,
         givenParent: UElement?,
@@ -373,7 +263,7 @@ internal object KotlinConverter : BaseKotlinConverter {
                     if (requiredTypes.isAssignableFrom(KotlinUNestedAnnotation::class.java) &&
                         !requiredTypes.isAssignableFrom(UCallExpression::class.java)
                     ) {
-                        el<UAnnotation> { KotlinUNestedAnnotation.tryCreate(original, givenParent) }
+                        el<UAnnotation> { KotlinUNestedAnnotation.create(original, givenParent) }
                     } else null
                 is KtLightAnnotationForSourceEntry -> convertDeclarationOrElement(original.kotlinOrigin, givenParent, requiredTypes)
                 is KtDelegatedSuperTypeEntry -> el<KotlinSupertypeDelegationUExpression> {
@@ -400,33 +290,6 @@ internal object KotlinConverter : BaseKotlinConverter {
         return getContainingLightClass(original)
     }

-    fun convertDeclarationOrElement(
-        element: PsiElement,
-        givenParent: UElement?,
-        expectedTypes: Array<out Class<out UElement>>
-    ): UElement? {
-        return if (element is UElement) element
-        else convertDeclaration(element, givenParent, expectedTypes)
-            ?: KotlinConverter.convertPsiElement(element, givenParent, expectedTypes)
-    }
-
-    private fun convertToPropertyAlternatives(
-        methods: LightClassUtil.PropertyAccessorsPsiMethods?,
-        givenParent: UElement?,
-    ): Array<UElementAlternative<*>> = if (methods != null) arrayOf(
-        alternative { methods.backingField?.let { KotlinUField(it, (it as? KtLightElement<*, *>)?.kotlinOrigin, givenParent) } },
-        alternative { methods.getter?.let { convertDeclaration(it, givenParent, arrayOf(UMethod::class.java)) as? UMethod } },
-        alternative { methods.setter?.let { convertDeclaration(it, givenParent, arrayOf(UMethod::class.java)) as? UMethod } }
-    ) else emptyArray()
-
-    fun convertNonLocalProperty(
-        property: KtProperty,
-        givenParent: UElement?,
-        expectedTypes: Array<out Class<out UElement>>
-    ): Sequence<UElement> =
-        expectedTypes.accommodate(*convertToPropertyAlternatives(LightClassUtil.getLightClassPropertyMethods(property), givenParent))
-
-
     fun convertParameter(
         element: KtParameter,
         givenParent: UElement?,
@@ -451,24 +314,6 @@ internal object KotlinConverter : BaseKotlinConverter {
         *convertToPropertyAlternatives(LightClassUtil.getLightClassPropertyMethods(element), givenParent)
     )

-    fun convertClassOrObject(
-        element: KtClassOrObject,
-        givenParent: UElement?,
-        expectedTypes: Array<out Class<out UElement>>
-    ): Sequence<UElement> {
-        val ktLightClass = element.toLightClass() ?: return emptySequence()
-        val uClass = KotlinUClass.create(ktLightClass, givenParent)
-        return expectedTypes.accommodate(
-            alternative { uClass },
-            alternative primaryConstructor@{
-                val primaryConstructor = element.primaryConstructor ?: return@primaryConstructor null
-                uClass.methods.asSequence()
-                    .filter { it.sourcePsi == primaryConstructor }
-                    .firstOrNull()
-            }
-        )
-    }
-
     fun convertKtFile(
         element: KtFile,
         givenParent: UElement?,
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastLanguagePlugin.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastLanguagePlugin.kt
index 43a5e87145c..327dfb89ec1 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastLanguagePlugin.kt
+++ b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastLanguagePlugin.kt
@@ -23,10 +23,6 @@ import org.jetbrains.kotlin.asJava.classes.KtLightClassForFacade
 import org.jetbrains.kotlin.descriptors.ConstructorDescriptor
 import org.jetbrains.kotlin.descriptors.FunctionDescriptor
 import org.jetbrains.kotlin.idea.KotlinLanguage
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocLink
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocName
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocSection
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocTag
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.resolve.BindingContext
 import org.jetbrains.kotlin.resolve.calls.callUtil.getResolvedCall
@@ -40,7 +36,6 @@ import org.jetbrains.uast.util.ClassSetsWrapper
 class KotlinUastLanguagePlugin : UastLanguagePlugin {
     override val priority = 10

-
     override val language: Language
         get() = KotlinLanguage.INSTANCE

@@ -82,7 +77,7 @@ class KotlinUastLanguagePlugin : UastLanguagePlugin {
         val parent = element.parent
         val parentUElement = convertElementWithParent(parent, null) ?: return null

-        val uExpression = KotlinUFunctionCallExpression(element, parentUElement, resolvedCall)
+        val uExpression = KotlinUFunctionCallExpression(element, parentUElement)
         val method = uExpression.resolve() ?: return null
         if (method.name != methodName) return null
         return UastLanguagePlugin.ResolvedMethod(uExpression, method)
@@ -104,7 +99,7 @@ class KotlinUastLanguagePlugin : UastLanguagePlugin {
         val parent = KotlinConverter.unwrapElements(element.parent) ?: return null
         val parentUElement = convertElementWithParent(parent, null) ?: return null

-        val uExpression = KotlinUFunctionCallExpression(element, parentUElement, resolvedCall)
+        val uExpression = KotlinUFunctionCallExpression(element, parentUElement)
         val method = uExpression.resolve() ?: return null
         val containingClass = method.containingClass ?: return null
         return UastLanguagePlugin.ResolvedConstructor(uExpression, method, containingClass)
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt
index 20812327ffa..5e811bac555 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt
+++ b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt
@@ -5,32 +5,35 @@

 package org.jetbrains.uast.kotlin

+import com.intellij.psi.PsiClass
 import com.intellij.psi.PsiElement
 import com.intellij.psi.PsiMethod
 import com.intellij.psi.PsiType
 import org.jetbrains.kotlin.builtins.createFunctionType
 import org.jetbrains.kotlin.codegen.state.KotlinTypeMapper
 import org.jetbrains.kotlin.config.LanguageVersionSettings
-import org.jetbrains.kotlin.descriptors.CallableDescriptor
+import org.jetbrains.kotlin.descriptors.*
+import org.jetbrains.kotlin.name.FqNameUnsafe
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
+import org.jetbrains.kotlin.psi.psiUtil.parents
 import org.jetbrains.kotlin.resolve.BindingContext
+import org.jetbrains.kotlin.resolve.CompileTimeConstantUtils
 import org.jetbrains.kotlin.resolve.bindingContextUtil.isUsedAsResultOfLambda
 import org.jetbrains.kotlin.resolve.calls.callUtil.getResolvedCall
 import org.jetbrains.kotlin.resolve.calls.callUtil.getType
 import org.jetbrains.kotlin.resolve.calls.components.isVararg
+import org.jetbrains.kotlin.resolve.calls.model.ArgumentMatch
 import org.jetbrains.kotlin.resolve.calls.model.ResolvedCall
 import org.jetbrains.kotlin.resolve.constants.UnsignedErrorValueTypeConstant
+import org.jetbrains.kotlin.resolve.descriptorUtil.annotationClass
 import org.jetbrains.kotlin.resolve.descriptorUtil.builtIns
-import org.jetbrains.kotlin.types.CommonSupertypes
-import org.jetbrains.kotlin.types.KotlinType
-import org.jetbrains.kotlin.types.TypeUtils
-import org.jetbrains.kotlin.types.isError
+import org.jetbrains.kotlin.resolve.descriptorUtil.fqNameUnsafe
+import org.jetbrains.kotlin.resolve.source.getPsi
+import org.jetbrains.kotlin.types.*
 import org.jetbrains.kotlin.types.typeUtil.TypeNullability
 import org.jetbrains.kotlin.types.typeUtil.nullability
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
-import org.jetbrains.uast.UastSpecialExpressionKind
+import org.jetbrains.uast.*
 import org.jetbrains.uast.kotlin.psi.UastKotlinPsiParameterBase

 interface KotlinUastResolveProviderService : BaseKotlinUastResolveProviderService {
@@ -38,15 +41,44 @@ interface KotlinUastResolveProviderService : BaseKotlinUastResolveProviderServic
     fun getTypeMapper(element: KtElement): KotlinTypeMapper?
     fun getLanguageVersionSettings(element: KtElement): LanguageVersionSettings

+    override val languagePlugin: UastLanguagePlugin
+        get() = kotlinUastPlugin
+
     override val baseKotlinConverter: BaseKotlinConverter
         get() = KotlinConverter

-    override fun convertParent(uElement: UElement): UElement? {
-        return convertParentImpl(uElement)
+    override fun convertValueArguments(ktCallElement: KtCallElement, parent: UElement): List<UNamedExpression>? {
+        val resolvedCall = ktCallElement.getResolvedCall(ktCallElement.analyze()) ?: return null
+        return resolvedCall.valueArguments.entries.mapNotNull {
+            val arguments = it.value.arguments
+            val name = it.key.name.asString()
+            when {
+                arguments.size == 1 ->
+                    KotlinUNamedExpression.create(name, arguments.first(), parent)
+                arguments.size > 1 ->
+                    KotlinUNamedExpression.create(name, arguments, parent)
+                else -> null
+            }
+        }
+    }
+
+    override fun findAttributeValueExpression(uAnnotation: KotlinUAnnotation, arg: ValueArgument): UExpression? {
+        val annotationEntry = uAnnotation.sourcePsi
+        val resolvedCall = annotationEntry.getResolvedCall(annotationEntry.analyze())
+        val mapping = resolvedCall?.getArgumentMapping(arg)
+        return (mapping as? ArgumentMatch)?.let { match ->
+            val namedExpression = uAnnotation.attributeValues.find { it.name == match.valueParameter.name.asString() }
+            namedExpression?.expression as? KotlinUVarargExpression ?: namedExpression
+        }
     }

-    override fun convertParent(uElement: UElement, parent: PsiElement?): UElement? {
-        return convertParentImpl(uElement, parent)
+    override fun findDefaultValueForAnnotationAttribute(ktCallElement: KtCallElement, name: String): KtExpression? {
+        val parameter = ktCallElement.resolveToClassDescriptor()
+            ?.unsubstitutedPrimaryConstructor
+            ?.valueParameters
+            ?.find { it.name.asString() == name } ?: return null
+
+        return (parameter.source.getPsi() as? KtParameter)?.defaultValue
     }

     override fun getArgumentForParameter(ktCallElement: KtCallElement, index: Int, parent: UElement): UExpression? {
@@ -115,6 +147,73 @@ interface KotlinUastResolveProviderService : BaseKotlinUastResolveProviderServic
         return resolveToPsiMethod(ktElement)
     }

+    override fun isResolvedToExtension(ktCallElement: KtCallElement): Boolean {
+        val resolvedCall = ktCallElement.getResolvedCall(ktCallElement.analyze()) ?: return false
+        return resolvedCall.extensionReceiver != null
+    }
+
+    override fun resolvedFunctionName(ktCallElement: KtCallElement): String? {
+        val resolvedCall = ktCallElement.getResolvedCall(ktCallElement.analyze()) ?: return null
+        return resolvedCall.resultingDescriptor.name.asString()
+    }
+
+    override fun qualifiedAnnotationName(ktCallElement: KtCallElement): String? {
+        return ktCallElement.resolveToClassDescriptor().takeUnless(ErrorUtils::isError)
+            ?.fqNameUnsafe
+            ?.takeIf(FqNameUnsafe::isSafe)
+            ?.toSafe()
+            ?.toString()
+    }
+
+    override fun callKind(ktCallElement: KtCallElement): UastCallKind {
+        val resolvedCall = ktCallElement.getResolvedCall(ktCallElement.analyze()) ?: return UastCallKind.METHOD_CALL
+        return when {
+            resolvedCall.resultingDescriptor is ConstructorDescriptor -> UastCallKind.CONSTRUCTOR_CALL
+            isAnnotationArgumentArrayInitializer(ktCallElement, resolvedCall) -> UastCallKind.NESTED_ARRAY_INITIALIZER
+            else -> UastCallKind.METHOD_CALL
+        }
+    }
+
+    private fun isAnnotationArgumentArrayInitializer(
+        ktCallElement: KtCallElement,
+        resolvedCall: ResolvedCall<out CallableDescriptor>
+    ): Boolean {
+        // KtAnnotationEntry (or KtCallExpression when annotation is nested) -> KtValueArgumentList -> KtValueArgument -> arrayOf call
+        val isAnnotationArgument = when (val elementAt2 = ktCallElement.parents.elementAtOrNull(2)) {
+            is KtAnnotationEntry -> true
+            is KtCallExpression -> elementAt2.getParentOfType<KtAnnotationEntry>(true, KtDeclaration::class.java) != null
+            else -> false
+        }
+        if (!isAnnotationArgument) return false
+
+        return CompileTimeConstantUtils.isArrayFunctionCall(resolvedCall)
+    }
+
+    override fun isAnnotationConstructorCall(ktCallElement: KtCallElement): Boolean {
+        val classDescriptor = ktCallElement.resolveToClassDescriptor() ?: return false
+        return classDescriptor.kind == ClassKind.ANNOTATION_CLASS
+    }
+
+    override fun resolveToClassIfConstructorCall(ktCallElement: KtCallElement, source: UElement): PsiClass? {
+        return resolveToClassIfConstructorCallImpl(ktCallElement, source) as? PsiClass
+    }
+
+    override fun resolveToClass(ktAnnotationEntry: KtAnnotationEntry): PsiClass? {
+        val classDescriptor = ktAnnotationEntry.resolveToClassDescriptor() ?: return null
+        return ktAnnotationEntry.calleeExpression?.let { ktExpression ->
+            resolveToDeclarationImpl(ktExpression, classDescriptor) as? PsiClass
+        }
+    }
+
+    private fun <T : KtCallElement> T.resolveToClassDescriptor(): ClassDescriptor? =
+        when (this) {
+            is KtAnnotationEntry ->
+                this.analyze()[BindingContext.ANNOTATION, this]?.annotationClass
+            is KtCallExpression ->
+                (this.getResolvedCall(this.analyze())?.resultingDescriptor as? ClassConstructorDescriptor)?.constructedClass
+            else -> null
+        }
+
     override fun resolveToDeclaration(ktExpression: KtExpression): PsiElement? {
         if (ktExpression is KtExpressionWithLabel) {
             return ktExpression.analyze()[BindingContext.LABEL_TARGET, ktExpression.getTargetLabel()]
@@ -126,6 +225,12 @@ interface KotlinUastResolveProviderService : BaseKotlinUastResolveProviderServic
         return ktTypeReference.toPsiType(source)
     }

+    override fun getReceiverType(ktCallElement: KtCallElement, source: UElement): PsiType? {
+        val resolvedCall = ktCallElement.getResolvedCall(ktCallElement.analyze()) ?: return null
+        val receiver = resolvedCall.dispatchReceiver ?: resolvedCall.extensionReceiver ?: return null
+        return receiver.type.toPsiType(source, ktCallElement, boxed = true)
+    }
+
     override fun getDoubleColonReceiverType(ktDoubleColonExpression: KtDoubleColonExpression, source: UElement): PsiType? {
         val ktType =
             ktDoubleColonExpression.analyze()[BindingContext.DOUBLE_COLON_LHS, ktDoubleColonExpression.receiverExpression]?.type
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinConstructorUMethod.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinConstructorUMethod.kt
deleted file mode 100644
index 830192bbe18..00000000000
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinConstructorUMethod.kt
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.PsiMethod
-import org.jetbrains.kotlin.asJava.elements.KtLightMethod
-import org.jetbrains.kotlin.psi.KtCallElement
-import org.jetbrains.kotlin.psi.KtClassOrObject
-import org.jetbrains.kotlin.psi.KtDeclaration
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
-
-class KotlinConstructorUMethod(
-    ktClass: KtClassOrObject?,
-    psi: PsiMethod,
-    kotlinOrigin: KtDeclaration?,
-    givenParent: UElement?
-) : BaseKotlinConstructorUMethod(ktClass, psi, kotlinOrigin, givenParent) {
-    constructor(
-        ktClass: KtClassOrObject?,
-        psi: KtLightMethod,
-        givenParent: UElement?
-    ) : this(ktClass, psi, psi.kotlinOrigin, givenParent)
-
-    override fun buildDelegationCall(delegationCall: KtCallElement, uastParent: UElement): UExpression {
-        return KotlinUFunctionCallExpression(delegationCall, uastParent)
-    }
-}
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinSecondaryConstructorWithInitializersUMethod.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinSecondaryConstructorWithInitializersUMethod.kt
deleted file mode 100644
index 307ffc7ecb1..00000000000
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinSecondaryConstructorWithInitializersUMethod.kt
+++ /dev/null
@@ -1,23 +0,0 @@
-/*
- * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin
-
-import org.jetbrains.kotlin.asJava.elements.KtLightMethod
-import org.jetbrains.kotlin.psi.KtCallElement
-import org.jetbrains.kotlin.psi.KtClassOrObject
-import org.jetbrains.uast.UElement
-import org.jetbrains.uast.UExpression
-
-class KotlinSecondaryConstructorWithInitializersUMethod(
-    ktClass: KtClassOrObject?,
-    psi: KtLightMethod,
-    givenParent: UElement?
-) : BaseKotlinSecondaryConstructorWithInitializersUMethod(ktClass, psi, givenParent) {
-
-    override fun buildDelegationCall(delegationCall: KtCallElement, uastParent: UElement): UExpression {
-        return KotlinUFunctionCallExpression(delegationCall, uastParent)
-    }
-}
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotation.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotation.kt
deleted file mode 100644
index 9d4311426cf..00000000000
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUAnnotation.kt
+++ /dev/null
@@ -1,168 +0,0 @@
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.PsiAnnotation
-import com.intellij.psi.PsiClass
-import com.intellij.psi.PsiElement
-import com.intellij.psi.ResolveResult
-import org.jetbrains.kotlin.asJava.toLightAnnotation
-import org.jetbrains.kotlin.descriptors.ClassConstructorDescriptor
-import org.jetbrains.kotlin.descriptors.ClassDescriptor
-import org.jetbrains.kotlin.descriptors.ClassKind
-import org.jetbrains.kotlin.descriptors.annotations.AnnotationUseSiteTarget
-import org.jetbrains.kotlin.name.FqNameUnsafe
-import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.resolve.BindingContext
-import org.jetbrains.kotlin.resolve.calls.callUtil.getResolvedCall
-import org.jetbrains.kotlin.resolve.calls.model.ArgumentMatch
-import org.jetbrains.kotlin.resolve.calls.model.ResolvedCall
-import org.jetbrains.kotlin.resolve.descriptorUtil.annotationClass
-import org.jetbrains.kotlin.resolve.descriptorUtil.fqNameUnsafe
-import org.jetbrains.kotlin.resolve.source.getPsi
-import org.jetbrains.kotlin.types.ErrorUtils
-import org.jetbrains.kotlin.utils.addToStdlib.firstIsInstanceOrNull
-import org.jetbrains.kotlin.utils.addToStdlib.safeAs
-import org.jetbrains.uast.*
-import org.jetbrains.uast.kotlin.internal.multiResolveResults
-
-abstract class KotlinUAnnotationBase<T : KtCallElement>(
-    final override val sourcePsi: T,
-    givenParent: UElement?
-) : KotlinAbstractUElement(givenParent), UAnnotationEx, UAnchorOwner, UMultiResolvable {
-
-    abstract override val javaPsi: PsiAnnotation?
-
-    final override val psi: PsiElement = sourcePsi
-
-    protected abstract fun annotationUseSiteTarget(): AnnotationUseSiteTarget?
-
-    private val resolvedCall: ResolvedCall<*>? get () = sourcePsi.getResolvedCall(sourcePsi.analyze())
-
-    override val qualifiedName: String? by lz {
-        computeClassDescriptor().takeUnless(ErrorUtils::isError)
-            ?.fqNameUnsafe
-            ?.takeIf(FqNameUnsafe::isSafe)
-            ?.toSafe()
-            ?.toString()
-    }
-
-    override val attributeValues: List<UNamedExpression> by lz {
-        resolvedCall?.valueArguments?.entries?.mapNotNull {
-            val arguments = it.value.arguments
-            val name = it.key.name.asString()
-            when {
-                arguments.size == 1 ->
-                    KotlinUNamedExpression.create(name, arguments.first(), this)
-                arguments.size > 1 ->
-                    KotlinUNamedExpression.create(name, arguments, this)
-                else -> null
-            }
-        } ?: emptyList()
-    }
-
-    protected abstract fun computeClassDescriptor(): ClassDescriptor?
-
-    override fun resolve(): PsiClass? = computeClassDescriptor()?.let {
-        sourcePsi.calleeExpression?.let { ktExpression -> resolveToDeclarationImpl(ktExpression, it) }
-    } as? PsiClass
-
-    override fun findAttributeValue(name: String?): UExpression? =
-        findDeclaredAttributeValue(name) ?: findAttributeDefaultValue(name ?: "value")
-
-    fun findAttributeValueExpression(arg: ValueArgument): UExpression? {
-        val mapping = resolvedCall?.getArgumentMapping(arg)
-        return (mapping as? ArgumentMatch)?.let { match ->
-            val namedExpression = attributeValues.find { it.name == match.valueParameter.name.asString() }
-            namedExpression?.expression as? KotlinUVarargExpression ?: namedExpression
-        }
-    }
-
-    override fun findDeclaredAttributeValue(name: String?): UExpression? {
-        return attributeValues.find {
-            it.name == name ||
-                    (name == null && it.name == "value") ||
-                    (name == "value" && it.name == null)
-        }?.expression
-    }
-
-    private fun findAttributeDefaultValue(name: String): UExpression? {
-        val parameter = computeClassDescriptor()
-            ?.unsubstitutedPrimaryConstructor
-            ?.valueParameters
-            ?.find { it.name.asString() == name } ?: return null
-
-        val defaultValue = (parameter.source.getPsi() as? KtParameter)?.defaultValue ?: return null
-        return getLanguagePlugin().convertWithParent(defaultValue)
-    }
-
-    override fun convertParent(): UElement? {
-        sourcePsi.parent.safeAs<KtAnnotatedExpression>()?.let {
-            return it.baseExpression?.let { KotlinConverter.convertExpression(it, null, DEFAULT_EXPRESSION_TYPES_LIST) }
-        }
-
-        val superParent = super.convertParent() ?: return null
-        if (annotationUseSiteTarget() == AnnotationUseSiteTarget.RECEIVER) {
-            (superParent.uastParent as? KotlinUMethod)?.uastParameters?.firstIsInstanceOrNull<KotlinReceiverUParameter>()?.let {
-                return it
-            }
-        }
-        return superParent
-    }
-
-    override fun multiResolve(): Iterable<ResolveResult> = sourcePsi.multiResolveResults().asIterable()
-}
-
-class KotlinUAnnotation(
-    annotationEntry: KtAnnotationEntry,
-    givenParent: UElement?
-) : KotlinUAnnotationBase<KtAnnotationEntry>(annotationEntry, givenParent), UAnnotation {
-
-    override val javaPsi = annotationEntry.toLightAnnotation()
-
-    override fun computeClassDescriptor(): ClassDescriptor? =
-        sourcePsi.analyze()[BindingContext.ANNOTATION, sourcePsi]?.annotationClass
-
-    override fun annotationUseSiteTarget() = sourcePsi.useSiteTarget?.getAnnotationUseSiteTarget()
-
-    override val uastAnchor by lazy {
-        KotlinUIdentifier(
-            javaPsi?.nameReferenceElement,
-            annotationEntry.typeReference?.nameElement,
-            this
-        )
-    }
-
-}
-
-class KotlinUNestedAnnotation private constructor(
-    original: KtCallExpression,
-    givenParent: UElement?
-) : KotlinUAnnotationBase<KtCallExpression>(original, givenParent) {
-    override val javaPsi: PsiAnnotation? by lazy { original.toLightAnnotation() }
-
-    override fun computeClassDescriptor(): ClassDescriptor? = classDescriptor(sourcePsi)
-
-    override fun annotationUseSiteTarget(): AnnotationUseSiteTarget? = null
-
-    override val uastAnchor by lazy {
-        KotlinUIdentifier(
-            javaPsi?.nameReferenceElement?.referenceNameElement,
-            (original.calleeExpression as? KtNameReferenceExpression)?.getReferencedNameElement(),
-            this
-        )
-    }
-
-    companion object {
-        fun tryCreate(original: KtCallExpression, givenParent: UElement?): KotlinUNestedAnnotation? {
-            if (classDescriptor(original)?.kind == ClassKind.ANNOTATION_CLASS)
-                return KotlinUNestedAnnotation(original, givenParent)
-            else
-                return null
-        }
-
-        private fun classDescriptor(original: KtCallExpression) =
-            (original.getResolvedCall(original.analyze())?.resultingDescriptor as? ClassConstructorDescriptor)?.constructedClass
-    }
-
-}
-
-
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUClass.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUClass.kt
deleted file mode 100644
index 831c192dbd9..00000000000
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUClass.kt
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright 2010-2016 JetBrains s.r.o.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.*
-import org.jetbrains.kotlin.asJava.classes.KtLightClass
-import org.jetbrains.kotlin.asJava.classes.KtLightClassForScript
-import org.jetbrains.kotlin.asJava.elements.KtLightMethod
-import org.jetbrains.kotlin.psi.*
-import org.jetbrains.uast.*
-
-class KotlinUClass(
-    psi: KtLightClass,
-    givenParent: UElement?
-) : BaseKotlinUClass(psi, givenParent) {
-    override fun buildPrimaryConstructorUMethod(ktClass: KtClassOrObject?, psi: KtLightMethod, givenParent: UElement?): UMethod {
-        return KotlinConstructorUMethod(ktClass, psi, givenParent)
-    }
-
-    override fun buildSecondaryConstructorUMethod(ktClass: KtClassOrObject?, psi: KtLightMethod, givenParent: UElement?): UMethod {
-        return KotlinSecondaryConstructorWithInitializersUMethod(ktClass, psi, givenParent)
-    }
-
-    companion object {
-        fun create(psi: KtLightClass, containingElement: UElement?): UClass = when (psi) {
-            is PsiAnonymousClass -> KotlinUAnonymousClass(psi, containingElement)
-            is KtLightClassForScript -> KotlinScriptUClass(psi, containingElement)
-            else -> KotlinUClass(psi, containingElement)
-        }
-    }
-}
-
-class KotlinScriptUClass(
-        psi: KtLightClassForScript,
-        givenParent: UElement?
-) : AbstractKotlinUClass(givenParent), PsiClass by psi {
-    override fun getContainingFile(): PsiFile = unwrapFakeFileForLightClass(psi.containingFile)
-
-    override fun getNameIdentifier(): PsiIdentifier? = UastLightIdentifier(psi, psi.kotlinOrigin)
-
-    override val uastAnchor by lazy { KotlinUIdentifier(nameIdentifier, sourcePsi?.nameIdentifier, this) }
-
-    override val javaPsi: PsiClass = psi
-
-    override val sourcePsi: KtClassOrObject? = psi.kotlinOrigin
-
-    override val psi = unwrap<UClass, KtLightClassForScript>(psi)
-
-    override fun getSuperClass(): UClass? = super.getSuperClass()
-
-    override fun getFields(): Array<UField> = super.getFields()
-
-    override fun getInitializers(): Array<UClassInitializer> = super.getInitializers()
-
-    override fun getInnerClasses(): Array<UClass> =
-            psi.innerClasses.mapNotNull { getLanguagePlugin().convertOpt<UClass>(it, this) }.toTypedArray()
-
-    override fun getMethods(): Array<UMethod> = psi.methods.map(this::createUMethod).toTypedArray()
-
-    private fun createUMethod(method: PsiMethod): UMethod {
-        return if (method.isConstructor) {
-            KotlinScriptConstructorUMethod(psi.script, method as KtLightMethod, this)
-        }
-        else {
-            getLanguagePlugin().convertOpt(method, this) ?: reportConvertFailure(method)
-        }
-    }
-
-    override fun getOriginalElement(): PsiElement? = psi.originalElement
-
-    class KotlinScriptConstructorUMethod(
-        script: KtScript,
-        override val psi: KtLightMethod,
-        givenParent: UElement?
-    ) : KotlinUMethod(psi, psi.kotlinOrigin, givenParent) {
-        override val uastBody: UExpression? by lz {
-            val initializers = script.declarations.filterIsInstance<KtScriptInitializer>()
-            KotlinLazyUBlockExpression.create(initializers, this)
-        }
-        override val javaPsi = psi
-    }
-}
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethod.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethodWithFakeLightDelegate.kt
similarity index 59%
rename from uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethod.kt
rename to uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethodWithFakeLightDelegate.kt
index 386664d258f..86c31891505 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethod.kt
+++ b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/declarations/KotlinUMethodWithFakeLightDelegate.kt
@@ -17,40 +17,10 @@
 package org.jetbrains.uast.kotlin

 import com.intellij.psi.*
-import org.jetbrains.kotlin.asJava.elements.*
 import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.psi.psiUtil.containingClassOrObject
-import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
 import org.jetbrains.uast.*
 import org.jetbrains.uast.kotlin.psi.UastFakeLightMethod

-open class KotlinUMethod(
-    psi: PsiMethod,
-    sourcePsi: KtDeclaration?,
-    givenParent: UElement?
-) : BaseKotlinUMethod(psi, sourcePsi, givenParent) {
-    constructor(
-        psi: KtLightMethod,
-        givenParent: UElement?
-    ) : this(psi, getKotlinMemberOrigin(psi), givenParent)
-
-    companion object {
-        fun create(psi: KtLightMethod, containingElement: UElement?): UMethod {
-            val kotlinOrigin = psi.kotlinOrigin
-            return if (kotlinOrigin is KtConstructor<*>) {
-                KotlinConstructorUMethod(
-                    kotlinOrigin.containingClassOrObject,
-                    psi,
-                    containingElement
-                )
-            } else if (kotlinOrigin is KtParameter && kotlinOrigin.getParentOfType<KtClass>(true)?.isAnnotation() == true)
-                KotlinUAnnotationMethod(psi, containingElement)
-            else
-                KotlinUMethod(psi, containingElement)
-        }
-    }
-}
-
 class KotlinUMethodWithFakeLightDelegate internal constructor(
     val original: KtFunction,
     fakePsi: UastFakeLightMethod,
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUFunctionCallExpression.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUFunctionCallExpression.kt
deleted file mode 100644
index 81cb5321a49..00000000000
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUFunctionCallExpression.kt
+++ /dev/null
@@ -1,219 +0,0 @@
-/*
- * Copyright 2010-2016 JetBrains s.r.o.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.jetbrains.uast.kotlin
-
-import com.intellij.psi.*
-import com.intellij.psi.util.PsiTypesUtil
-import org.jetbrains.kotlin.descriptors.ConstructorDescriptor
-import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
-import org.jetbrains.kotlin.psi.psiUtil.parents
-import org.jetbrains.kotlin.resolve.CompileTimeConstantUtils
-import org.jetbrains.kotlin.resolve.calls.callUtil.getResolvedCall
-import org.jetbrains.kotlin.resolve.calls.model.ResolvedCall
-import org.jetbrains.uast.*
-import org.jetbrains.uast.internal.acceptList
-import org.jetbrains.uast.kotlin.internal.TypedResolveResult
-import org.jetbrains.uast.visitor.UastVisitor
-
-class KotlinUFunctionCallExpression(
-        override val sourcePsi: KtCallElement,
-        givenParent: UElement?,
-        private val _resolvedCall: ResolvedCall<*>?
-) : KotlinAbstractUExpression(givenParent), UCallExpressionEx, KotlinUElementWithType, UMultiResolvable {
-
-    constructor(psi: KtCallElement, uastParent: UElement?) : this(psi, uastParent, null)
-
-    private val resolvedCall
-        get() = _resolvedCall ?: sourcePsi.getResolvedCall(sourcePsi.analyze())
-
-    override val receiverType by lz {
-        val resolvedCall = this.resolvedCall ?: return@lz null
-        val receiver = resolvedCall.dispatchReceiver ?: resolvedCall.extensionReceiver ?: return@lz null
-        receiver.type.toPsiType(this, sourcePsi, boxed = true)
-    }
-
-    override val methodName by lz { resolvedCall?.resultingDescriptor?.name?.asString() }
-
-    override val classReference by lz {
-        KotlinClassViaConstructorUSimpleReferenceExpression(sourcePsi, methodName.orAnonymous("class"), this)
-    }
-
-    override val methodIdentifier by lz {
-        if (sourcePsi is KtSuperTypeCallEntry) {
-            ((sourcePsi.parent as? KtInitializerList)?.parent as? KtEnumEntry)?.let { ktEnumEntry ->
-                return@lz KotlinUIdentifier(ktEnumEntry.nameIdentifier, this)
-            }
-        }
-
-        when (val calleeExpression = sourcePsi.calleeExpression) {
-            null -> null
-            is KtNameReferenceExpression ->
-                KotlinUIdentifier(calleeExpression.getReferencedNameElement(), this)
-            is KtConstructorDelegationReferenceExpression ->
-                KotlinUIdentifier(calleeExpression.firstChild ?: calleeExpression, this)
-            is KtConstructorCalleeExpression ->
-                KotlinUIdentifier(
-                    calleeExpression.constructorReferenceExpression?.getReferencedNameElement() ?: calleeExpression, this
-                )
-            is KtLambdaExpression ->
-                KotlinUIdentifier(calleeExpression.functionLiteral.lBrace, this)
-            else -> KotlinUIdentifier(
-                sourcePsi.valueArgumentList?.leftParenthesis
-                    ?: sourcePsi.lambdaArguments.singleOrNull()?.getLambdaExpression()?.functionLiteral?.lBrace
-                    ?: calleeExpression, this)
-        }
-    }
-
-    override val valueArgumentCount: Int
-        get() = sourcePsi.valueArguments.size
-
-    override val valueArguments by lz { sourcePsi.valueArguments.map { KotlinConverter.convertOrEmpty(it.getArgumentExpression(), this) } }
-
-    override fun getArgumentForParameter(i: Int): UExpression? {
-        val resolvedCall = resolvedCall
-        if (resolvedCall != null) {
-            val actualParamIndex = if (resolvedCall.extensionReceiver == null) i else i - 1
-            if (actualParamIndex == -1) return receiver
-            return baseResolveProviderService.getArgumentForParameter(sourcePsi, actualParamIndex, this)
-        }
-        val argument = valueArguments.getOrNull(i) ?: return null
-        val argumentType = argument.getExpressionType()
-        for (resolveResult in multiResolve()) {
-            val psiMethod = resolveResult.element as? PsiMethod ?: continue
-            val psiParameter = psiMethod.parameterList.parameters.getOrNull(i) ?: continue
-
-            if (argumentType == null || psiParameter.type.isAssignableFrom(argumentType))
-                return argument
-        }
-        return null
-    }
-
-    override fun getExpressionType(): PsiType? {
-        super<KotlinUElementWithType>.getExpressionType()?.let { return it }
-        for (resolveResult in multiResolve()) {
-            val psiMethod = resolveResult.element
-            when {
-                psiMethod.isConstructor ->
-                    psiMethod.containingClass?.let { return PsiTypesUtil.getClassType(it) }
-                else ->
-                    psiMethod.returnType?.let { return it }
-            }
-        }
-        return null
-    }
-
-    override val typeArgumentCount: Int
-        get() = sourcePsi.typeArguments.size
-
-    override val typeArguments by lz { sourcePsi.typeArguments.map { it.typeReference.toPsiType(this, boxed = true) } }
-
-    override val returnType: PsiType?
-        get() = getExpressionType()
-
-    override val kind: UastCallKind by lz {
-        val resolvedCall = resolvedCall ?: return@lz UastCallKind.METHOD_CALL
-        when {
-            resolvedCall.resultingDescriptor is ConstructorDescriptor -> UastCallKind.CONSTRUCTOR_CALL
-            this.isAnnotationArgumentArrayInitializer() -> UastCallKind.NESTED_ARRAY_INITIALIZER
-            else -> UastCallKind.METHOD_CALL
-        }
-    }
-
-    override val receiver: UExpression?
-        get() {
-            (uastParent as? UQualifiedReferenceExpression)?.let {
-                if (it.selector == this) return it.receiver
-            }
-
-            val ktNameReferenceExpression = sourcePsi.calleeExpression as? KtNameReferenceExpression ?: return null
-            val localCallableDeclaration =
-                baseResolveProviderService.resolveToDeclaration(ktNameReferenceExpression) as? PsiVariable ?: return null
-            if (localCallableDeclaration !is PsiLocalVariable && localCallableDeclaration !is PsiParameter) return null
-
-            // an implicit receiver for variables calls (KT-25524)
-            return object : KotlinAbstractUExpression(this), UReferenceExpression {
-
-                override val sourcePsi: KtNameReferenceExpression get() = ktNameReferenceExpression
-
-                override val resolvedName: String? get() = localCallableDeclaration.name
-
-                override fun resolve(): PsiElement? = localCallableDeclaration
-
-            }
-
-        }
-
-    private val multiResolved by lazy(fun(): Iterable<TypedResolveResult<PsiMethod>> {
-        val contextElement = sourcePsi
-        val calleeExpression = contextElement.calleeExpression as? KtReferenceExpression ?: return emptyList()
-        val methodName = methodName ?: calleeExpression.text ?: return emptyList()
-        val variants = baseResolveProviderService.getReferenceVariants(calleeExpression, methodName)
-        return variants.flatMap {
-            when (it) {
-                is PsiClass -> it.constructors.asSequence()
-                is PsiMethod -> sequenceOf(it)
-                else -> emptySequence()
-            }
-        }.map { TypedResolveResult(it) }.asIterable()
-    })
-
-    override fun multiResolve(): Iterable<TypedResolveResult<PsiMethod>> = multiResolved
-
-
-    override fun resolve(): PsiMethod? {
-        val descriptor = resolvedCall?.resultingDescriptor ?: return null
-        return resolveToPsiMethod(sourcePsi, descriptor)
-    }
-
-    override fun accept(visitor: UastVisitor) {
-        if (visitor.visitCallExpression(this)) return
-        annotations.acceptList(visitor)
-        methodIdentifier?.accept(visitor)
-        classReference.accept(visitor)
-        valueArguments.acceptList(visitor)
-
-        visitor.afterVisitCallExpression(this)
-    }
-
-    private fun isAnnotationArgumentArrayInitializer(): Boolean {
-        // KtAnnotationEntry (or KtCallExpression when annotation is nested) -> KtValueArgumentList -> KtValueArgument -> arrayOf call
-        val isAnnotationArgument = when (val elementAt2 = sourcePsi.parents.elementAtOrNull(2)) {
-            is KtAnnotationEntry -> true
-            is KtCallExpression -> elementAt2.getParentOfType<KtAnnotationEntry>(true, KtDeclaration::class.java) != null
-            else -> false
-        }
-        if (!isAnnotationArgument) return false
-
-        val resolvedCall = resolvedCall ?: return false
-        return CompileTimeConstantUtils.isArrayFunctionCall(resolvedCall)
-    }
-
-    override fun convertParent(): UElement? = super.convertParent().let { result ->
-        when (result) {
-            is UMethod -> result.uastBody ?: result
-            is UClass ->
-                result.methods
-                        .filterIsInstance<KotlinConstructorUMethod>()
-                        .firstOrNull { it.isPrimary }
-                        ?.uastBody
-                ?: result
-            else -> result
-        }
-    }
-
-}
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt
index e3b9bcca2df..871269788e8 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt
+++ b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt
@@ -19,21 +19,15 @@ package org.jetbrains.uast.kotlin
 import com.intellij.openapi.util.Key
 import com.intellij.psi.*
 import org.jetbrains.kotlin.descriptors.CallableDescriptor
-import org.jetbrains.kotlin.descriptors.ConstructorDescriptor
 import org.jetbrains.kotlin.descriptors.DeclarationDescriptor
-import org.jetbrains.kotlin.kdoc.psi.impl.KDocName
 import org.jetbrains.kotlin.lexer.KtTokens
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.resolve.calls.callUtil.getResolvedCall
 import org.jetbrains.kotlin.resolve.calls.model.ResolvedCall
-import org.jetbrains.kotlin.resolve.calls.tower.NewResolvedCallImpl
-import org.jetbrains.kotlin.resolve.sam.SamConstructorDescriptor
 import org.jetbrains.kotlin.synthetic.SyntheticJavaPropertyDescriptor
 import org.jetbrains.uast.*
 import org.jetbrains.uast.internal.acceptList
-import org.jetbrains.uast.internal.log
 import org.jetbrains.uast.kotlin.internal.DelegatedMultiResolve
-import org.jetbrains.uast.kotlin.internal.multiResolveResults
 import org.jetbrains.uast.visitor.UastVisitor

 var PsiElement.destructuringDeclarationInitializer: Boolean? by UserDataProperty(Key.create("kotlin.uast.destructuringDeclarationInitializer"))
@@ -156,43 +150,3 @@ class KotlinUSimpleReferenceExpression(
     }

 }
-
-class KotlinClassViaConstructorUSimpleReferenceExpression(
-    override val sourcePsi: KtCallElement,
-    override val identifier: String,
-    givenParent: UElement?
-) : KotlinAbstractUExpression(givenParent), USimpleNameReferenceExpression, KotlinUElementWithType {
-    override val resolvedName: String?
-        get() = (resolved as? PsiNamedElement)?.name
-
-    private val resolved by lazy {
-        when (val resultingDescriptor = sourcePsi.getResolvedCall(sourcePsi.analyze())?.descriptorForResolveViaConstructor()) {
-            is ConstructorDescriptor -> {
-                sourcePsi.calleeExpression?.let { resolveToDeclarationImpl(it, resultingDescriptor.constructedClass) }
-            }
-            is SamConstructorDescriptor ->
-                (resultingDescriptor.returnType?.getFunctionalInterfaceType(this, sourcePsi) as? PsiClassType)?.resolve()
-            else -> null
-        }
-    }
-
-    override fun accept(visitor: UastVisitor) {
-        super<KotlinAbstractUExpression>.accept(visitor)
-    }
-
-    override fun resolve(): PsiElement? = resolved
-
-    override fun asLogString(): String {
-        val resolveStr = when (val resolved = resolve()) {
-            is PsiClass -> "PsiClass: ${resolved.name}"
-            is PsiMethod -> "PsiMethod: ${resolved.name}"
-            else -> resolved.toString()
-        }
-        return log<USimpleNameReferenceExpression>("identifier = $identifier, resolvesTo = $resolveStr")
-    }
-
-    // In new inference, SAM constructor is substituted with a function descriptor, so we use candidate descriptor to preserve behavior
-    private fun ResolvedCall<*>.descriptorForResolveViaConstructor(): CallableDescriptor? {
-        return if (this is NewResolvedCallImpl) candidateDescriptor else resultingDescriptor
-    }
-}
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt
index c7c67764389..046979cca42 100644
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt
+++ b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt
@@ -283,6 +283,21 @@ internal fun resolveToPsiMethod(
     }
 }

+internal fun resolveToClassIfConstructorCallImpl(ktCallElement: KtCallElement, source: UElement): PsiElement? =
+    when (val resultingDescriptor = ktCallElement.getResolvedCall(ktCallElement.analyze())?.descriptorForResolveViaConstructor()) {
+        is ConstructorDescriptor -> {
+            ktCallElement.calleeExpression?.let { resolveToDeclarationImpl(it, resultingDescriptor.constructedClass) }
+        }
+        is SamConstructorDescriptor ->
+            (resultingDescriptor.returnType?.getFunctionalInterfaceType(source, ktCallElement) as? PsiClassType)?.resolve()
+        else -> null
+    }
+
+// In new inference, SAM constructor is substituted with a function descriptor, so we use candidate descriptor to preserve behavior
+private fun ResolvedCall<*>.descriptorForResolveViaConstructor(): CallableDescriptor? {
+    return if (this is NewResolvedCallImpl) candidateDescriptor else resultingDescriptor
+}
+
 internal fun resolveToDeclarationImpl(sourcePsi: KtExpression): PsiElement? =
     when (sourcePsi) {
         is KtSimpleNameExpression ->
diff --git a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinUastMultiresolve.kt b/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinUastMultiresolve.kt
deleted file mode 100644
index e433b95d72f..00000000000
--- a/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinUastMultiresolve.kt
+++ /dev/null
@@ -1,18 +0,0 @@
-/*
- * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.
- * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
- */
-
-package org.jetbrains.uast.kotlin.internal
-
-import com.intellij.psi.PsiElement
-import com.intellij.psi.PsiPolyVariantReference
-import com.intellij.psi.PsiSubstitutor
-import com.intellij.psi.ResolveResult
-import com.intellij.psi.infos.CandidateInfo
-import org.jetbrains.kotlin.psi.KtElement
-
-class TypedResolveResult<T : PsiElement>(element: T) : CandidateInfo(element, PsiSubstitutor.EMPTY) {
-    @Suppress("UNCHECKED_CAST")
-    override fun getElement(): T = super.getElement() as T
-}
diff --git a/uast/uast-kotlin/test/KotlinUastApiTest.kt b/uast/uast-kotlin/test/KotlinUastApiTest.kt
index 176529e8ff7..93cdd7d140f 100644
--- a/uast/uast-kotlin/test/KotlinUastApiTest.kt
+++ b/uast/uast-kotlin/test/KotlinUastApiTest.kt
@@ -444,7 +444,6 @@ class KotlinUastApiTest : AbstractKotlinUastTest() {

         fun assertArguments(argumentsInPositionalOrder: List<String?>?, refText: String) =
             file.findElementByTextFromPsi<UCallExpression>(refText).let { call ->
-                if (call !is UCallExpressionEx) throw AssertionError("${call.javaClass} is not a UCallExpressionEx")
                 Assert.assertEquals(
                     argumentsInPositionalOrder,
                     call.resolve()?.let { psiMethod ->
diff --git a/uast/uast-kotlin/test/org/jetbrains/uast/test/comparasion/AbstractFE1LegacyUastIdentifiersTest.kt b/uast/uast-kotlin/test/org/jetbrains/uast/test/comparasion/AbstractFE1LegacyUastIdentifiersTest.kt
index 6e8588b6b08..3cd49345b92 100644
--- a/uast/uast-kotlin/test/org/jetbrains/uast/test/comparasion/AbstractFE1LegacyUastIdentifiersTest.kt
+++ b/uast/uast-kotlin/test/org/jetbrains/uast/test/comparasion/AbstractFE1LegacyUastIdentifiersTest.kt
@@ -11,7 +11,7 @@ import kotlin.io.path.ExperimentalPathApi
 import kotlin.io.path.absolute

 abstract class AbstractFE1LegacyUastIdentifiersTest : AbstractFE1UastIdentifiersTest(), LegacyUastIdentifiersTestBase {
-    // TODO: better not to see exceptions from legacy UAST
+    // TODO: better not to see exceptions from FE1.0 UAST
     @OptIn(ExperimentalPathApi::class)
     private val whitelist : Set<String> = setOf(
         "uast-kotlin/testData/DestructuringDeclaration.kt",